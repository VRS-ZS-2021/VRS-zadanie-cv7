
VRS-zadanie-cv7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08007180  08007180  00017180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080076ac  080076ac  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076ac  080076ac  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080076b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001d8  0800788c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800788c  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007720  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192e  00000000  00000000  00027928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00029258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00029950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f7b  00000000  00000000  00029f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c2a  00000000  00000000  0002defb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007356c  00000000  00000000  00033b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a7091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003108  00000000  00000000  000a70e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007168 	.word	0x08007168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007168 	.word	0x08007168

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2103      	movs	r1, #3
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	401a      	ands	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	fab3 f383 	clz	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	fb01 f303 	mul.w	r3, r1, r3
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	605a      	str	r2, [r3, #4]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b089      	sub	sp, #36	; 0x24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	613b      	str	r3, [r7, #16]
  return(result);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2103      	movs	r1, #3
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fab3 f383 	clz	r3, r3
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000dcc:	bf00      	nop
 8000dce:	3724      	adds	r7, #36	; 0x24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	613b      	str	r3, [r7, #16]
  return(result);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	401a      	ands	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	431a      	orrs	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	60da      	str	r2, [r3, #12]
}
 8000e26:	bf00      	nop
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b089      	sub	sp, #36	; 0x24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6a1a      	ldr	r2, [r3, #32]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa93 f3a3 	rbit	r3, r3
 8000e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	210f      	movs	r1, #15
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000e80:	bf00      	nop
 8000e82:	3724      	adds	r7, #36	; 0x24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	61bb      	str	r3, [r7, #24]
  return(result);
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b088      	sub	sp, #32
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa93 f3a3 	rbit	r3, r3
 8000f08:	613b      	str	r3, [r7, #16]
  return(result);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f12:	e048      	b.n	8000fa6 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d03a      	beq.n	8000fa0 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	69b9      	ldr	r1, [r7, #24]
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fede 	bl	8000cf4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d003      	beq.n	8000f48 <LL_GPIO_Init+0x5e>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d106      	bne.n	8000f56 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff14 	bl	8000d7e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	69b9      	ldr	r1, [r7, #24]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff3a 	bl	8000dd8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d119      	bne.n	8000fa0 <LL_GPIO_Init+0xb6>
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f78:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	d807      	bhi.n	8000f92 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	461a      	mov	r2, r3
 8000f88:	69b9      	ldr	r1, [r7, #24]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff51 	bl	8000e32 <LL_GPIO_SetAFPin_0_7>
 8000f90:	e006      	b.n	8000fa0 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	461a      	mov	r2, r3
 8000f98:	69b9      	ldr	r1, [r7, #24]
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff76 	bl	8000e8c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1af      	bne.n	8000f14 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d003      	beq.n	8000fc4 <LL_GPIO_Init+0xda>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d107      	bne.n	8000fd4 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff febd 	bl	8000d4e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <LL_RCC_HSI_IsReady+0x20>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000

08001004 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <LL_RCC_LSE_IsReady+0x20>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b02      	cmp	r3, #2
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000

08001028 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <LL_RCC_GetSysClkSource+0x18>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <LL_RCC_GetAHBPrescaler+0x18>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <LL_RCC_GetUSARTClockSource+0x28>)
 80010a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a4:	2103      	movs	r1, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	061b      	lsls	r3, r3, #24
 80010b2:	4313      	orrs	r3, r2
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000

080010c4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <LL_RCC_PLL_GetMainSource+0x18>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <LL_RCC_PLL_GetPrediv+0x18>)
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	f003 030f 	and.w	r3, r3, #15
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001120:	f000 f864 	bl	80011ec <RCC_GetSystemClockFreq>
 8001124:	4602      	mov	r2, r0
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f882 	bl	8001238 <RCC_GetHCLKClockFreq>
 8001134:	4602      	mov	r2, r0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f890 	bl	8001264 <RCC_GetPCLK1ClockFreq>
 8001144:	4602      	mov	r2, r0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f89c 	bl	800128c <RCC_GetPCLK2ClockFreq>
 8001154:	4602      	mov	r2, r0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60da      	str	r2, [r3, #12]
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d12d      	bne.n	80011d2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff8e 	bl	8001098 <LL_RCC_GetUSARTClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b03      	cmp	r3, #3
 8001180:	d00a      	beq.n	8001198 <LL_RCC_GetUSARTClockFreq+0x34>
 8001182:	2b03      	cmp	r3, #3
 8001184:	d819      	bhi.n	80011ba <LL_RCC_GetUSARTClockFreq+0x56>
 8001186:	2b01      	cmp	r3, #1
 8001188:	d002      	beq.n	8001190 <LL_RCC_GetUSARTClockFreq+0x2c>
 800118a:	2b02      	cmp	r3, #2
 800118c:	d00c      	beq.n	80011a8 <LL_RCC_GetUSARTClockFreq+0x44>
 800118e:	e014      	b.n	80011ba <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001190:	f000 f82c 	bl	80011ec <RCC_GetSystemClockFreq>
 8001194:	60f8      	str	r0, [r7, #12]
        break;
 8001196:	e021      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001198:	f7ff ff22 	bl	8000fe0 <LL_RCC_HSI_IsReady>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d019      	beq.n	80011d6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <LL_RCC_GetUSARTClockFreq+0x84>)
 80011a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011a6:	e016      	b.n	80011d6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80011a8:	f7ff ff2c 	bl	8001004 <LL_RCC_LSE_IsReady>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d013      	beq.n	80011da <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80011b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011b8:	e00f      	b.n	80011da <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80011ba:	f000 f817 	bl	80011ec <RCC_GetSystemClockFreq>
 80011be:	4603      	mov	r3, r0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f839 	bl	8001238 <RCC_GetHCLKClockFreq>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f84b 	bl	8001264 <RCC_GetPCLK1ClockFreq>
 80011ce:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80011d0:	e004      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80011d2:	bf00      	nop
 80011d4:	e002      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80011d6:	bf00      	nop
 80011d8:	e000      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80011da:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80011dc:	68fb      	ldr	r3, [r7, #12]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	007a1200 	.word	0x007a1200

080011ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80011f6:	f7ff ff17 	bl	8001028 <LL_RCC_GetSysClkSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d00c      	beq.n	800121a <RCC_GetSystemClockFreq+0x2e>
 8001200:	2b08      	cmp	r3, #8
 8001202:	d80e      	bhi.n	8001222 <RCC_GetSystemClockFreq+0x36>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <RCC_GetSystemClockFreq+0x22>
 8001208:	2b04      	cmp	r3, #4
 800120a:	d003      	beq.n	8001214 <RCC_GetSystemClockFreq+0x28>
 800120c:	e009      	b.n	8001222 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <RCC_GetSystemClockFreq+0x48>)
 8001210:	607b      	str	r3, [r7, #4]
      break;
 8001212:	e009      	b.n	8001228 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <RCC_GetSystemClockFreq+0x48>)
 8001216:	607b      	str	r3, [r7, #4]
      break;
 8001218:	e006      	b.n	8001228 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800121a:	f000 f84b 	bl	80012b4 <RCC_PLL_GetFreqDomain_SYS>
 800121e:	6078      	str	r0, [r7, #4]
      break;
 8001220:	e002      	b.n	8001228 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <RCC_GetSystemClockFreq+0x48>)
 8001224:	607b      	str	r3, [r7, #4]
      break;
 8001226:	bf00      	nop
  }

  return frequency;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	007a1200 	.word	0x007a1200

08001238 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001240:	f7ff ff00 	bl	8001044 <LL_RCC_GetAHBPrescaler>
 8001244:	4603      	mov	r3, r0
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <RCC_GetHCLKClockFreq+0x28>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	461a      	mov	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	40d3      	lsrs	r3, r2
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	080071d4 	.word	0x080071d4

08001264 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800126c:	f7ff fef8 	bl	8001060 <LL_RCC_GetAPB1Prescaler>
 8001270:	4603      	mov	r3, r0
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <RCC_GetPCLK1ClockFreq+0x24>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	40d3      	lsrs	r3, r2
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	080071e4 	.word	0x080071e4

0800128c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001294:	f7ff fef2 	bl	800107c <LL_RCC_GetAPB2Prescaler>
 8001298:	4603      	mov	r3, r0
 800129a:	0adb      	lsrs	r3, r3, #11
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <RCC_GetPCLK2ClockFreq+0x24>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	461a      	mov	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	40d3      	lsrs	r3, r2
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	080071e4 	.word	0x080071e4

080012b4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80012c2:	f7ff feff 	bl	80010c4 <LL_RCC_PLL_GetMainSource>
 80012c6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d003      	beq.n	80012de <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80012d6:	e005      	b.n	80012e4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80012da:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80012dc:	e005      	b.n	80012ea <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80012e0:	60fb      	str	r3, [r7, #12]
      break;
 80012e2:	e002      	b.n	80012ea <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80012e6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80012e8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80012ea:	f7ff ff07 	bl	80010fc <LL_RCC_PLL_GetPrediv>
 80012ee:	4603      	mov	r3, r0
 80012f0:	3301      	adds	r3, #1
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	fbb2 f4f3 	udiv	r4, r2, r3
 80012f8:	f7ff fef2 	bl	80010e0 <LL_RCC_PLL_GetMultiplicator>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001302:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001306:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	fa92 f2a2 	rbit	r2, r2
 800130e:	603a      	str	r2, [r7, #0]
  return(result);
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	40d3      	lsrs	r3, r2
 8001318:	3302      	adds	r3, #2
 800131a:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	003d0900 	.word	0x003d0900
 800132c:	007a1200 	.word	0x007a1200

08001330 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	605a      	str	r2, [r3, #4]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80013a2:	b4b0      	push	{r4, r5, r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 80013b0:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 80013b2:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ba:	d114      	bne.n	80013e6 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	005a      	lsls	r2, r3, #1
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	441a      	add	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80013d0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80013d4:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80013d6:	086b      	lsrs	r3, r5, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80013e4:	e00a      	b.n	80013fc <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	085a      	lsrs	r2, r3, #1
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	441a      	add	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	60da      	str	r2, [r3, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bcb0      	pop	{r4, r5, r7}
 8001404:	4770      	bx	lr
	...

08001408 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff88 	bl	8001330 <LL_USART_IsEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d14e      	bne.n	80014c4 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <LL_USART_Init+0xc8>)
 800142c:	4013      	ands	r3, r2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6851      	ldr	r1, [r2, #4]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	68d2      	ldr	r2, [r2, #12]
 8001436:	4311      	orrs	r1, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	6912      	ldr	r2, [r2, #16]
 800143c:	4311      	orrs	r1, r2
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	6992      	ldr	r2, [r2, #24]
 8001442:	430a      	orrs	r2, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff80 	bl	8001356 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff8d 	bl	800137c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <LL_USART_Init+0xcc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d104      	bne.n	8001474 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fe7a 	bl	8001164 <LL_RCC_GetUSARTClockFreq>
 8001470:	61b8      	str	r0, [r7, #24]
 8001472:	e016      	b.n	80014a2 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <LL_USART_Init+0xd0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d107      	bne.n	800148c <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe49 	bl	8001118 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e00a      	b.n	80014a2 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a13      	ldr	r2, [pc, #76]	; (80014dc <LL_USART_Init+0xd4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d106      	bne.n	80014a2 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fe3d 	bl	8001118 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00d      	beq.n	80014c4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80014b0:	2300      	movs	r3, #0
 80014b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff6f 	bl	80013a2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	efff69f3 	.word	0xefff69f3
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40004400 	.word	0x40004400
 80014dc:	40004800 	.word	0x40004800

080014e0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <LL_InitTick+0x30>)
 80014f4:	3b01      	subs	r3, #1
 80014f6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <LL_InitTick+0x30>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <LL_InitTick+0x30>)
 8001500:	2205      	movs	r2, #5
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e010 	.word	0xe000e010

08001514 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800151c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffdd 	bl	80014e0 <LL_InitTick>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <LL_mDelay+0x48>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d00c      	beq.n	8001562 <LL_mDelay+0x32>
  {
    Delay++;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800154e:	e008      	b.n	8001562 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <LL_mDelay+0x48>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <LL_mDelay+0x32>
    {
      Delay--;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f3      	bne.n	8001550 <LL_mDelay+0x20>
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <LL_SetSystemCoreClock+0x1c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <NVIC_EnableIRQ+0x30>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da0b      	bge.n	80015fc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <NVIC_SetPriority+0x4c>)
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	3b04      	subs	r3, #4
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fa:	e009      	b.n	8001610 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <NVIC_SetPriority+0x50>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	e000e100 	.word	0xe000e100

08001624 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000

08001654 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff ffe3 	bl	8001624 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 800165e:	2100      	movs	r1, #0
 8001660:	2010      	movs	r0, #16
 8001662:	f7ff ffb5 	bl	80015d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001666:	2010      	movs	r0, #16
 8001668:	f7ff ff98 	bl	800159c <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	2011      	movs	r0, #17
 8001670:	f7ff ffae 	bl	80015d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001674:	2011      	movs	r0, #17
 8001676:	f7ff ff91 	bl	800159c <NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <LL_AHB1_GRP1_EnableClock>:
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000

080016b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016e6:	f7ff ffcb 	bl	8001680 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016ee:	f7ff ffc7 	bl	8001680 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <MX_GPIO_Init+0x54>)
 80016f6:	f7ff ffdb 	bl	80016b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80016fa:	2308      	movs	r3, #8
 80016fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016fe:	2301      	movs	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	463b      	mov	r3, r7
 8001710:	4619      	mov	r1, r3
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <MX_GPIO_Init+0x54>)
 8001714:	f7ff fbe9 	bl	8000eea <LL_GPIO_Init>

}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	48000400 	.word	0x48000400

08001724 <NVIC_SetPriorityGrouping>:
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <LL_RCC_HSI_Enable>:
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <LL_RCC_HSI_Enable+0x1c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <LL_RCC_HSI_Enable+0x1c>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <LL_RCC_HSI_IsReady>:
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <LL_RCC_HSI_IsReady+0x20>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b02      	cmp	r3, #2
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000

080017b0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_RCC_SetSysClkSource>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <LL_RCC_SetSysClkSource+0x24>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 0203 	bic.w	r2, r3, #3
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <LL_RCC_SetSysClkSource+0x24>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000

08001804 <LL_RCC_GetSysClkSource>:
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <LL_RCC_GetSysClkSource+0x18>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <LL_RCC_SetAHBPrescaler>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LL_RCC_SetAHBPrescaler+0x24>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <LL_RCC_SetAHBPrescaler+0x24>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000

08001848 <LL_RCC_SetAPB1Prescaler>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <LL_RCC_SetAPB1Prescaler+0x24>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_SetAPB2Prescaler>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <LL_RCC_SetAPB2Prescaler+0x24>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000

08001898 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000

080018c8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <LL_FLASH_SetLatency+0x24>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 0207 	bic.w	r2, r3, #7
 8001908:	4904      	ldr	r1, [pc, #16]	; (800191c <LL_FLASH_SetLatency+0x24>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40022000 	.word	0x40022000

08001920 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <LL_FLASH_GetLatency+0x18>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d106      	bne.n	8001958 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001956:	e005      	b.n	8001964 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 800195e:	f023 0304 	bic.w	r3, r3, #4
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e010 	.word	0xe000e010

08001974 <main>:
	// type your global variables here:
char actual_data_buffer[50];
char data_to_send[100];

int main(void)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b085      	sub	sp, #20
 8001978:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff ffa4 	bl	80018c8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001980:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001984:	f7ff ff88 	bl	8001898 <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f7ff fecb 	bl	8001724 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 800198e:	f000 f843 	bl	8001a18 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001992:	f7ff fe9b 	bl	80016cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001996:	f7ff fe5d 	bl	8001654 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800199a:	f000 fe1f 	bl	80025dc <MX_USART2_UART_Init>

  /* Space for your local variables, callback registration ...*/

  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <main+0x8c>)
 80019a0:	f000 fdfe 	bl	80025a0 <USART2_RegisterCallback>

  //clearing buffers
  strcpy(actual_data_buffer,"");
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <main+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	   */
  	  	  	  //type your code here:


	  //Sending info about buffer capacity status
	  uint16_t buffer_state = getBufferState();
 80019aa:	f000 fe0b 	bl	80025c4 <getBufferState>
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
	  float buffer_percentage = (float) (buffer_state) / (float) (DMA_USART2_BUFFER_SIZE)*100;
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019bc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001a08 <main+0x94>
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a0c <main+0x98>
 80019c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019cc:	edc7 7a00 	vstr	s15, [r7]
	  sprintf(data_to_send, "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]:%.2f%%\r\n", DMA_USART2_BUFFER_SIZE, buffer_state, buffer_percentage);
 80019d0:	88fc      	ldrh	r4, [r7, #6]
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f7fe fdb8 	bl	8000548 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9cd 2300 	strd	r2, r3, [sp]
 80019e0:	4623      	mov	r3, r4
 80019e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e6:	490a      	ldr	r1, [pc, #40]	; (8001a10 <main+0x9c>)
 80019e8:	480a      	ldr	r0, [pc, #40]	; (8001a14 <main+0xa0>)
 80019ea:	f001 fe07 	bl	80035fc <siprintf>

	  USART2_PutBuffer((uint8_t *) data_to_send, sizeof(data_to_send));
 80019ee:	2164      	movs	r1, #100	; 0x64
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <main+0xa0>)
 80019f2:	f000 fed5 	bl	80027a0 <USART2_PutBuffer>
	  LL_mDelay(1000);
 80019f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019fa:	f7ff fd99 	bl	8001530 <LL_mDelay>
  {
 80019fe:	e7d4      	b.n	80019aa <main+0x36>
 8001a00:	08001a85 	.word	0x08001a85
 8001a04:	2000026c 	.word	0x2000026c
 8001a08:	43800000 	.word	0x43800000
 8001a0c:	42c80000 	.word	0x42c80000
 8001a10:	08007180 	.word	0x08007180
 8001a14:	20000208 	.word	0x20000208

08001a18 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff ff6b 	bl	80018f8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001a22:	f7ff ff7d 	bl	8001920 <LL_FLASH_GetLatency>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001a2c:	f000 f84a 	bl	8001ac4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001a30:	f7ff fe9c 	bl	800176c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a34:	bf00      	nop
 8001a36:	f7ff fea9 	bl	800178c <LL_RCC_HSI_IsReady>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d1fa      	bne.n	8001a36 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a40:	2010      	movs	r0, #16
 8001a42:	f7ff feb5 	bl	80017b0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff feea 	bl	8001820 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fefb 	bl	8001848 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff ff0c 	bl	8001870 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff febf 	bl	80017dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001a5e:	bf00      	nop
 8001a60:	f7ff fed0 	bl	8001804 <LL_RCC_GetSysClkSource>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1fa      	bne.n	8001a60 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <SystemClock_Config+0x68>)
 8001a6c:	f7ff fd52 	bl	8001514 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001a70:	2004      	movs	r0, #4
 8001a72:	f7ff ff63 	bl	800193c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <SystemClock_Config+0x68>)
 8001a78:	f7ff fd80 	bl	800157c <LL_SetSystemCoreClock>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(uint8_t sign)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	/* Process received data */

		// type your algorithm here:
	if(sign == '\r') return;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b0d      	cmp	r3, #13
 8001a92:	d011      	beq.n	8001ab8 <proccesDmaData+0x34>

	char tmp_string[2];
	tmp_string[0] = sign;
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	733b      	strb	r3, [r7, #12]
	tmp_string[1] = '\0';
 8001a98:	2300      	movs	r3, #0
 8001a9a:	737b      	strb	r3, [r7, #13]
	strcat(actual_data_buffer,tmp_string);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <proccesDmaData+0x3c>)
 8001aa4:	f001 fdca 	bl	800363c <strcat>
	actual_data_buffer[strlen(actual_data_buffer)] = '\0';
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <proccesDmaData+0x3c>)
 8001aaa:	f7fe fb91 	bl	80001d0 <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <proccesDmaData+0x3c>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	54d1      	strb	r1, [r2, r3]
 8001ab6:	e000      	b.n	8001aba <proccesDmaData+0x36>
	if(sign == '\r') return;
 8001ab8:	bf00      	nop
}
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2000026c 	.word	0x2000026c

08001ac4 <Error_Handler>:


void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <LL_DMA_DisableChannel+0x3c>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	3a01      	subs	r2, #1
 8001af2:	4907      	ldr	r1, [pc, #28]	; (8001b10 <LL_DMA_DisableChannel+0x3c>)
 8001af4:	5c8a      	ldrb	r2, [r1, r2]
 8001af6:	4611      	mov	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	440a      	add	r2, r1
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	080071cc 	.word	0x080071cc

08001b14 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b9a:	605a      	str	r2, [r3, #4]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb6:	605a      	str	r2, [r3, #4]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bd2:	605a      	str	r2, [r3, #4]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2210      	movs	r2, #16
 8001c38:	621a      	str	r2, [r3, #32]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <HardFault_Handler+0x4>

08001c5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <MemManage_Handler+0x4>

08001c60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <BusFault_Handler+0x4>

08001c66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <UsageFault_Handler+0x4>

08001c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <DMA1_Channel6_IRQHandler+0x38>)
 8001caa:	f7ff ff33 	bl	8001b14 <LL_DMA_IsActiveFlag_TC6>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001cb4:	f000 fd94 	bl	80027e0 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <DMA1_Channel6_IRQHandler+0x38>)
 8001cba:	f7ff ff67 	bl	8001b8c <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001cbe:	e00a      	b.n	8001cd6 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001cc0:	4806      	ldr	r0, [pc, #24]	; (8001cdc <DMA1_Channel6_IRQHandler+0x38>)
 8001cc2:	f7ff ff4f 	bl	8001b64 <LL_DMA_IsActiveFlag_HT6>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d104      	bne.n	8001cd6 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001ccc:	f000 fd88 	bl	80027e0 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DMA1_Channel6_IRQHandler+0x38>)
 8001cd2:	f7ff ff77 	bl	8001bc4 <LL_DMA_ClearFlag_HT6>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <DMA1_Channel7_IRQHandler+0x30>)
 8001ce6:	f7ff ff29 	bl	8001b3c <LL_DMA_IsActiveFlag_TC7>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d10d      	bne.n	8001d0c <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <DMA1_Channel7_IRQHandler+0x30>)
 8001cf2:	f7ff ff59 	bl	8001ba8 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001cf6:	bf00      	nop
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <DMA1_Channel7_IRQHandler+0x34>)
 8001cfa:	f7ff ff84 	bl	8001c06 <LL_USART_IsActiveFlag_TC>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f9      	beq.n	8001cf8 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001d04:	2107      	movs	r1, #7
 8001d06:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA1_Channel7_IRQHandler+0x30>)
 8001d08:	f7ff fee4 	bl	8001ad4 <LL_DMA_DisableChannel>
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40004400 	.word	0x40004400

08001d18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001d1c:	4806      	ldr	r0, [pc, #24]	; (8001d38 <USART2_IRQHandler+0x20>)
 8001d1e:	f7ff ff5f 	bl	8001be0 <LL_USART_IsActiveFlag_IDLE>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001d28:	f000 fd5a 	bl	80027e0 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <USART2_IRQHandler+0x20>)
 8001d2e:	f7ff ff7d 	bl	8001c2c <LL_USART_ClearFlag_IDLE>
	}
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40004400 	.word	0x40004400

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_kill>:

int _kill(int pid, int sig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d56:	f000 fd9f 	bl	8002898 <__errno>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_exit>:

void _exit (int status)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ffe7 	bl	8001d4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d7e:	e7fe      	b.n	8001d7e <_exit+0x12>

08001d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e00a      	b.n	8001da8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d92:	f3af 8000 	nop.w
 8001d96:	4601      	mov	r1, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf0      	blt.n	8001d92 <_read+0x12>
	}

return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e009      	b.n	8001de0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf1      	blt.n	8001dcc <_write+0x12>
	}
	return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_isatty>:

int _isatty(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
	return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x50>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x16>
		heap_end = &end;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <_sbrk+0x50>)
 8001e6e:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <_sbrk+0x54>)
 8001e70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <_sbrk+0x50>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <_sbrk+0x50>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	466a      	mov	r2, sp
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d907      	bls.n	8001e96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e86:	f000 fd07 	bl	8002898 <__errno>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	220c      	movs	r2, #12
 8001e8e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	e006      	b.n	8001ea4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <_sbrk+0x50>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a03      	ldr	r2, [pc, #12]	; (8001eac <_sbrk+0x50>)
 8001ea0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200001f4 	.word	0x200001f4
 8001eb0:	200003b0 	.word	0x200003b0

08001eb4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <SystemInit+0x84>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <SystemInit+0x84>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <SystemInit+0x88>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <SystemInit+0x88>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <SystemInit+0x88>)
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4918      	ldr	r1, [pc, #96]	; (8001f3c <SystemInit+0x88>)
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <SystemInit+0x8c>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <SystemInit+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <SystemInit+0x88>)
 8001ee6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <SystemInit+0x88>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <SystemInit+0x88>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <SystemInit+0x88>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <SystemInit+0x88>)
 8001f02:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f06:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <SystemInit+0x88>)
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <SystemInit+0x88>)
 8001f0e:	f023 030f 	bic.w	r3, r3, #15
 8001f12:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <SystemInit+0x88>)
 8001f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f18:	4908      	ldr	r1, [pc, #32]	; (8001f3c <SystemInit+0x88>)
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <SystemInit+0x90>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <SystemInit+0x88>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SystemInit+0x84>)
 8001f28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2c:	609a      	str	r2, [r3, #8]
#endif
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	f87fc00c 	.word	0xf87fc00c
 8001f44:	ff00fccc 	.word	0xff00fccc

08001f48 <NVIC_EnableIRQ>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <NVIC_EnableIRQ+0x30>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <NVIC_SetPriority>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da0b      	bge.n	8001fa8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <NVIC_SetPriority+0x4c>)
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	3b04      	subs	r3, #4
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	761a      	strb	r2, [r3, #24]
}
 8001fa6:	e009      	b.n	8001fbc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <NVIC_SetPriority+0x50>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <LL_DMA_EnableChannel>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	4a0b      	ldr	r2, [pc, #44]	; (800200c <LL_DMA_EnableChannel+0x3c>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	3a01      	subs	r2, #1
 8001fee:	4907      	ldr	r1, [pc, #28]	; (800200c <LL_DMA_EnableChannel+0x3c>)
 8001ff0:	5c8a      	ldrb	r2, [r1, r2]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	440a      	add	r2, r1
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	080071ec 	.word	0x080071ec

08002010 <LL_DMA_SetDataTransferDirection>:
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	3b01      	subs	r3, #1
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <LL_DMA_SetDataTransferDirection+0x48>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002030:	f023 0310 	bic.w	r3, r3, #16
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	3a01      	subs	r2, #1
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <LL_DMA_SetDataTransferDirection+0x48>)
 800203a:	5c8a      	ldrb	r2, [r1, r2]
 800203c:	4611      	mov	r1, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	440a      	add	r2, r1
 8002042:	4611      	mov	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	080071ec 	.word	0x080071ec

0800205c <LL_DMA_GetDataTransferDirection>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <LL_DMA_GetDataTransferDirection+0x2c>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f244 0310 	movw	r3, #16400	; 0x4010
 800207a:	4013      	ands	r3, r2
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	080071ec 	.word	0x080071ec

0800208c <LL_DMA_SetMode>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3b01      	subs	r3, #1
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <LL_DMA_SetMode+0x44>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0220 	bic.w	r2, r3, #32
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <LL_DMA_SetMode+0x44>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	4619      	mov	r1, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	440b      	add	r3, r1
 80020ba:	4619      	mov	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	080071ec 	.word	0x080071ec

080020d4 <LL_DMA_SetPeriphIncMode>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <LL_DMA_SetPeriphIncMode+0x44>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	461a      	mov	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4413      	add	r3, r2
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	4907      	ldr	r1, [pc, #28]	; (8002118 <LL_DMA_SetPeriphIncMode+0x44>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	4619      	mov	r1, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	440b      	add	r3, r1
 8002102:	4619      	mov	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	080071ec 	.word	0x080071ec

0800211c <LL_DMA_SetMemoryIncMode>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3b01      	subs	r3, #1
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <LL_DMA_SetMemoryIncMode+0x44>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4413      	add	r3, r2
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3b01      	subs	r3, #1
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <LL_DMA_SetMemoryIncMode+0x44>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	4619      	mov	r1, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	440b      	add	r3, r1
 800214a:	4619      	mov	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	080071ec 	.word	0x080071ec

08002164 <LL_DMA_SetPeriphSize>:
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3b01      	subs	r3, #1
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <LL_DMA_SetPeriphSize+0x44>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	461a      	mov	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3b01      	subs	r3, #1
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <LL_DMA_SetPeriphSize+0x44>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	4619      	mov	r1, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	440b      	add	r3, r1
 8002192:	4619      	mov	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	080071ec 	.word	0x080071ec

080021ac <LL_DMA_SetMemorySize>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <LL_DMA_SetMemorySize+0x44>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <LL_DMA_SetMemorySize+0x44>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	4619      	mov	r1, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	440b      	add	r3, r1
 80021da:	4619      	mov	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	080071ec 	.word	0x080071ec

080021f4 <LL_DMA_SetChannelPriorityLevel>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	461a      	mov	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4413      	add	r3, r2
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3b01      	subs	r3, #1
 8002218:	4907      	ldr	r1, [pc, #28]	; (8002238 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	4619      	mov	r1, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	440b      	add	r3, r1
 8002222:	4619      	mov	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	080071ec 	.word	0x080071ec

0800223c <LL_DMA_SetDataLength>:
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3b01      	subs	r3, #1
 800224c:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <LL_DMA_SetDataLength+0x44>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	461a      	mov	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	3a01      	subs	r2, #1
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <LL_DMA_SetDataLength+0x44>)
 8002262:	5c8a      	ldrb	r2, [r1, r2]
 8002264:	4611      	mov	r1, r2
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	440a      	add	r2, r1
 800226a:	4611      	mov	r1, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	080071ec 	.word	0x080071ec

08002284 <LL_DMA_GetDataLength>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	4a06      	ldr	r2, [pc, #24]	; (80022ac <LL_DMA_GetDataLength+0x28>)
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	b29b      	uxth	r3, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	080071ec 	.word	0x080071ec

080022b0 <LL_DMA_ConfigAddresses>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d114      	bne.n	80022ee <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <LL_DMA_ConfigAddresses+0x74>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	3b01      	subs	r3, #1
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <LL_DMA_ConfigAddresses+0x74>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	461a      	mov	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6093      	str	r3, [r2, #8]
}
 80022ec:	e013      	b.n	8002316 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <LL_DMA_ConfigAddresses+0x74>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3b01      	subs	r3, #1
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <LL_DMA_ConfigAddresses+0x74>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	461a      	mov	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	60d3      	str	r3, [r2, #12]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	080071ec 	.word	0x080071ec

08002328 <LL_DMA_SetMemoryAddress>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <LL_DMA_SetMemoryAddress+0x2c>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	461a      	mov	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4413      	add	r3, r2
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	080071ec 	.word	0x080071ec

08002358 <LL_DMA_SetPeriphAddress>:
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	3b01      	subs	r3, #1
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <LL_DMA_SetPeriphAddress+0x2c>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	461a      	mov	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6093      	str	r3, [r2, #8]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	080071ec 	.word	0x080071ec

08002388 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3b01      	subs	r3, #1
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <LL_DMA_EnableIT_TC+0x3c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	3a01      	subs	r2, #1
 80023a6:	4907      	ldr	r1, [pc, #28]	; (80023c4 <LL_DMA_EnableIT_TC+0x3c>)
 80023a8:	5c8a      	ldrb	r2, [r1, r2]
 80023aa:	4611      	mov	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	440a      	add	r2, r1
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	080071ec 	.word	0x080071ec

080023c8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <LL_DMA_EnableIT_HT+0x3c>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	3a01      	subs	r2, #1
 80023e6:	4907      	ldr	r1, [pc, #28]	; (8002404 <LL_DMA_EnableIT_HT+0x3c>)
 80023e8:	5c8a      	ldrb	r2, [r1, r2]
 80023ea:	4611      	mov	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	440a      	add	r2, r1
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6013      	str	r3, [r2, #0]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	080071ec 	.word	0x080071ec

08002408 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	3b01      	subs	r3, #1
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <LL_DMA_EnableIT_TE+0x3c>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	461a      	mov	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	3a01      	subs	r2, #1
 8002426:	4907      	ldr	r1, [pc, #28]	; (8002444 <LL_DMA_EnableIT_TE+0x3c>)
 8002428:	5c8a      	ldrb	r2, [r1, r2]
 800242a:	4611      	mov	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	440a      	add	r2, r1
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6013      	str	r3, [r2, #0]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	080071ec 	.word	0x080071ec

08002448 <LL_AHB1_GRP1_EnableClock>:
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4013      	ands	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40021000 	.word	0x40021000

08002478 <LL_APB1_GRP1_EnableClock>:
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000

080024a8 <LL_USART_Enable>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	601a      	str	r2, [r3, #0]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_USART_ConfigAsyncMode>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002574:	b490      	push	{r4, r7}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 800257e:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3328      	adds	r3, #40	; 0x28
 800258a:	461c      	mov	r4, r3
 800258c:	e002      	b.n	8002594 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3324      	adds	r3, #36	; 0x24
 8002592:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002594:	4623      	mov	r3, r4
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bc90      	pop	{r4, r7}
 800259e:	4770      	bx	lr

080025a0 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a03      	ldr	r2, [pc, #12]	; (80025c0 <USART2_RegisterCallback+0x20>)
 80025b2:	6013      	str	r3, [r2, #0]
	}
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	200001f8 	.word	0x200001f8

080025c4 <getBufferState>:
/* Space for global variables, if you need them */

	// type global variables here
static uint16_t old_pos = 0;

uint16_t getBufferState() {
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
	return old_pos;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <getBufferState+0x14>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	200001fc 	.word	0x200001fc

080025dc <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80025dc:	b5b0      	push	{r4, r5, r7, lr}
 80025de:	b090      	sub	sp, #64	; 0x40
 80025e0:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002606:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800260a:	f7ff ff35 	bl	8002478 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800260e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002612:	f7ff ff19 	bl	8002448 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002616:	f248 0304 	movw	r3, #32772	; 0x8004
 800261a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800261c:	2302      	movs	r3, #2
 800261e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800262c:	2307      	movs	r3, #7
 800262e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002638:	f7fe fc57 	bl	8000eea <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800263c:	2200      	movs	r2, #0
 800263e:	2106      	movs	r1, #6
 8002640:	4854      	ldr	r0, [pc, #336]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002642:	f7ff fce5 	bl	8002010 <LL_DMA_SetDataTransferDirection>
   LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800264a:	2106      	movs	r1, #6
 800264c:	4851      	ldr	r0, [pc, #324]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 800264e:	f7ff fdd1 	bl	80021f4 <LL_DMA_SetChannelPriorityLevel>
   LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002652:	2200      	movs	r2, #0
 8002654:	2106      	movs	r1, #6
 8002656:	484f      	ldr	r0, [pc, #316]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002658:	f7ff fd18 	bl	800208c <LL_DMA_SetMode>
   LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800265c:	2200      	movs	r2, #0
 800265e:	2106      	movs	r1, #6
 8002660:	484c      	ldr	r0, [pc, #304]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002662:	f7ff fd37 	bl	80020d4 <LL_DMA_SetPeriphIncMode>
   LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	2106      	movs	r1, #6
 800266a:	484a      	ldr	r0, [pc, #296]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 800266c:	f7ff fd56 	bl	800211c <LL_DMA_SetMemoryIncMode>
   LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002670:	2200      	movs	r2, #0
 8002672:	2106      	movs	r1, #6
 8002674:	4847      	ldr	r0, [pc, #284]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002676:	f7ff fd75 	bl	8002164 <LL_DMA_SetPeriphSize>
   LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800267a:	2200      	movs	r2, #0
 800267c:	2106      	movs	r1, #6
 800267e:	4845      	ldr	r0, [pc, #276]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002680:	f7ff fd94 	bl	80021ac <LL_DMA_SetMemorySize>

   LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002684:	2101      	movs	r1, #1
 8002686:	4844      	ldr	r0, [pc, #272]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 8002688:	f7ff ff74 	bl	8002574 <LL_USART_DMA_GetRegAddr>
 800268c:	4604      	mov	r4, r0
 800268e:	4d43      	ldr	r5, [pc, #268]	; (800279c <MX_USART2_UART_Init+0x1c0>)
 8002690:	2106      	movs	r1, #6
 8002692:	4840      	ldr	r0, [pc, #256]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002694:	f7ff fce2 	bl	800205c <LL_DMA_GetDataTransferDirection>
 8002698:	4603      	mov	r3, r0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	462b      	mov	r3, r5
 800269e:	4622      	mov	r2, r4
 80026a0:	2106      	movs	r1, #6
 80026a2:	483c      	ldr	r0, [pc, #240]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026a4:	f7ff fe04 	bl	80022b0 <LL_DMA_ConfigAddresses>
 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
 							(uint32_t)bufferUSART2dma,
 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

   LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80026a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ac:	2106      	movs	r1, #6
 80026ae:	4839      	ldr	r0, [pc, #228]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026b0:	f7ff fdc4 	bl	800223c <LL_DMA_SetDataLength>
   LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80026b4:	2106      	movs	r1, #6
 80026b6:	4837      	ldr	r0, [pc, #220]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026b8:	f7ff fc8a 	bl	8001fd0 <LL_DMA_EnableChannel>
   LL_USART_EnableDMAReq_RX(USART2);
 80026bc:	4836      	ldr	r0, [pc, #216]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 80026be:	f7ff ff39 	bl	8002534 <LL_USART_EnableDMAReq_RX>


  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80026c2:	2210      	movs	r2, #16
 80026c4:	2107      	movs	r1, #7
 80026c6:	4833      	ldr	r0, [pc, #204]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026c8:	f7ff fca2 	bl	8002010 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80026cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026d0:	2107      	movs	r1, #7
 80026d2:	4830      	ldr	r0, [pc, #192]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026d4:	f7ff fd8e 	bl	80021f4 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80026d8:	2200      	movs	r2, #0
 80026da:	2107      	movs	r1, #7
 80026dc:	482d      	ldr	r0, [pc, #180]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026de:	f7ff fcd5 	bl	800208c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2107      	movs	r1, #7
 80026e6:	482b      	ldr	r0, [pc, #172]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026e8:	f7ff fcf4 	bl	80020d4 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	2107      	movs	r1, #7
 80026f0:	4828      	ldr	r0, [pc, #160]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026f2:	f7ff fd13 	bl	800211c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2107      	movs	r1, #7
 80026fa:	4826      	ldr	r0, [pc, #152]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 80026fc:	f7ff fd32 	bl	8002164 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002700:	2200      	movs	r2, #0
 8002702:	2107      	movs	r1, #7
 8002704:	4823      	ldr	r0, [pc, #140]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002706:	f7ff fd51 	bl	80021ac <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800270a:	2100      	movs	r1, #0
 800270c:	4822      	ldr	r0, [pc, #136]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 800270e:	f7ff ff31 	bl	8002574 <LL_USART_DMA_GetRegAddr>
 8002712:	4603      	mov	r3, r0
 8002714:	461a      	mov	r2, r3
 8002716:	2107      	movs	r1, #7
 8002718:	481e      	ldr	r0, [pc, #120]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 800271a:	f7ff fe1d 	bl	8002358 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800271e:	481e      	ldr	r0, [pc, #120]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 8002720:	f7ff ff18 	bl	8002554 <LL_USART_EnableDMAReq_TX>


  /* Enable USART2 peripheral and interrupts*/

  	  //type your code here:
  NVIC_SetPriority(USART2_IRQn, 0);
 8002724:	2100      	movs	r1, #0
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f7ff fc28 	bl	8001f7c <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800272c:	2026      	movs	r0, #38	; 0x26
 800272e:	f7ff fc0b 	bl	8001f48 <NVIC_EnableIRQ>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002732:	2106      	movs	r1, #6
 8002734:	4817      	ldr	r0, [pc, #92]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002736:	f7ff fe27 	bl	8002388 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 800273a:	2106      	movs	r1, #6
 800273c:	4815      	ldr	r0, [pc, #84]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 800273e:	f7ff fe43 	bl	80023c8 <LL_DMA_EnableIT_HT>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002742:	2107      	movs	r1, #7
 8002744:	4813      	ldr	r0, [pc, #76]	; (8002794 <MX_USART2_UART_Init+0x1b8>)
 8002746:	f7ff fe5f 	bl	8002408 <LL_DMA_EnableIT_TE>

  USART_InitStruct.BaudRate = 115200;
 800274a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800274e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002758:	2300      	movs	r3, #0
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800275c:	230c      	movs	r3, #12
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002760:	2300      	movs	r3, #0
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	480a      	ldr	r0, [pc, #40]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 8002770:	f7fe fe4a 	bl	8001408 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002774:	4808      	ldr	r0, [pc, #32]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 8002776:	f7ff fecd 	bl	8002514 <LL_USART_DisableIT_CTS>

  LL_USART_EnableIT_IDLE(USART2);
 800277a:	4807      	ldr	r0, [pc, #28]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 800277c:	f7ff feba 	bl	80024f4 <LL_USART_EnableIT_IDLE>

  LL_USART_ConfigAsyncMode(USART2);
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 8002782:	f7ff fea1 	bl	80024c8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002786:	4804      	ldr	r0, [pc, #16]	; (8002798 <MX_USART2_UART_Init+0x1bc>)
 8002788:	f7ff fe8e 	bl	80024a8 <LL_USART_Enable>
}
 800278c:	bf00      	nop
 800278e:	3738      	adds	r7, #56	; 0x38
 8002790:	46bd      	mov	sp, r7
 8002792:	bdb0      	pop	{r4, r5, r7, pc}
 8002794:	40020000 	.word	0x40020000
 8002798:	40004400 	.word	0x40004400
 800279c:	200002a0 	.word	0x200002a0

080027a0 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	2107      	movs	r1, #7
 80027b2:	480a      	ldr	r0, [pc, #40]	; (80027dc <USART2_PutBuffer+0x3c>)
 80027b4:	f7ff fdb8 	bl	8002328 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	461a      	mov	r2, r3
 80027bc:	2107      	movs	r1, #7
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <USART2_PutBuffer+0x3c>)
 80027c0:	f7ff fd3c 	bl	800223c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80027c4:	2107      	movs	r1, #7
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <USART2_PutBuffer+0x3c>)
 80027c8:	f7ff fdde 	bl	8002388 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80027cc:	2107      	movs	r1, #7
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <USART2_PutBuffer+0x3c>)
 80027d0:	f7ff fbfe 	bl	8001fd0 <LL_DMA_EnableChannel>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40020000 	.word	0x40020000

080027e0 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <USART2_CheckDmaReception+0x54>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01e      	beq.n	800282c <USART2_CheckDmaReception+0x4c>

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80027ee:	2106      	movs	r1, #6
 80027f0:	4811      	ldr	r0, [pc, #68]	; (8002838 <USART2_CheckDmaReception+0x58>)
 80027f2:	f7ff fd47 	bl	8002284 <LL_DMA_GetDataLength>
 80027f6:	4603      	mov	r3, r0
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80027fe:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <USART2_CheckDmaReception+0x5c>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	80fb      	strh	r3, [r7, #6]
 8002806:	e009      	b.n	800281c <USART2_CheckDmaReception+0x3c>
		USART2_ProcessData(bufferUSART2dma[i]);
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <USART2_CheckDmaReception+0x54>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	490c      	ldr	r1, [pc, #48]	; (8002840 <USART2_CheckDmaReception+0x60>)
 8002810:	5c8a      	ldrb	r2, [r1, r2]
 8002812:	4610      	mov	r0, r2
 8002814:	4798      	blx	r3
	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	3301      	adds	r3, #1
 800281a:	80fb      	strh	r3, [r7, #6]
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	88bb      	ldrh	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d3f1      	bcc.n	8002808 <USART2_CheckDmaReception+0x28>
	}

	old_pos = pos;
 8002824:	4a05      	ldr	r2, [pc, #20]	; (800283c <USART2_CheckDmaReception+0x5c>)
 8002826:	88bb      	ldrh	r3, [r7, #4]
 8002828:	8013      	strh	r3, [r2, #0]
 800282a:	e000      	b.n	800282e <USART2_CheckDmaReception+0x4e>
	if(USART2_ProcessData == 0) return;
 800282c:	bf00      	nop
}
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200001f8 	.word	0x200001f8
 8002838:	40020000 	.word	0x40020000
 800283c:	200001fc 	.word	0x200001fc
 8002840:	200002a0 	.word	0x200002a0

08002844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800287c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002848:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800284a:	e003      	b.n	8002854 <LoopCopyDataInit>

0800284c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800284e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002850:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002852:	3104      	adds	r1, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002854:	480b      	ldr	r0, [pc, #44]	; (8002884 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002858:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800285a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800285c:	d3f6      	bcc.n	800284c <CopyDataInit>
	ldr	r2, =_sbss
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002860:	e002      	b.n	8002868 <LoopFillZerobss>

08002862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002862:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002864:	f842 3b04 	str.w	r3, [r2], #4

08002868 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <LoopForever+0x16>)
	cmp	r2, r3
 800286a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800286c:	d3f9      	bcc.n	8002862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800286e:	f7ff fb21 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002872:	f000 f817 	bl	80028a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002876:	f7ff f87d 	bl	8001974 <main>

0800287a <LoopForever>:

LoopForever:
    b LoopForever
 800287a:	e7fe      	b.n	800287a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800287c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002880:	080076b4 	.word	0x080076b4
	ldr	r0, =_sdata
 8002884:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002888:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 800288c:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8002890:	200003b0 	.word	0x200003b0

08002894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC1_2_IRQHandler>
	...

08002898 <__errno>:
 8002898:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <__errno+0x8>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000004 	.word	0x20000004

080028a4 <__libc_init_array>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4d0d      	ldr	r5, [pc, #52]	; (80028dc <__libc_init_array+0x38>)
 80028a8:	4c0d      	ldr	r4, [pc, #52]	; (80028e0 <__libc_init_array+0x3c>)
 80028aa:	1b64      	subs	r4, r4, r5
 80028ac:	10a4      	asrs	r4, r4, #2
 80028ae:	2600      	movs	r6, #0
 80028b0:	42a6      	cmp	r6, r4
 80028b2:	d109      	bne.n	80028c8 <__libc_init_array+0x24>
 80028b4:	4d0b      	ldr	r5, [pc, #44]	; (80028e4 <__libc_init_array+0x40>)
 80028b6:	4c0c      	ldr	r4, [pc, #48]	; (80028e8 <__libc_init_array+0x44>)
 80028b8:	f004 fc56 	bl	8007168 <_init>
 80028bc:	1b64      	subs	r4, r4, r5
 80028be:	10a4      	asrs	r4, r4, #2
 80028c0:	2600      	movs	r6, #0
 80028c2:	42a6      	cmp	r6, r4
 80028c4:	d105      	bne.n	80028d2 <__libc_init_array+0x2e>
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028cc:	4798      	blx	r3
 80028ce:	3601      	adds	r6, #1
 80028d0:	e7ee      	b.n	80028b0 <__libc_init_array+0xc>
 80028d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d6:	4798      	blx	r3
 80028d8:	3601      	adds	r6, #1
 80028da:	e7f2      	b.n	80028c2 <__libc_init_array+0x1e>
 80028dc:	080076ac 	.word	0x080076ac
 80028e0:	080076ac 	.word	0x080076ac
 80028e4:	080076ac 	.word	0x080076ac
 80028e8:	080076b0 	.word	0x080076b0

080028ec <memset>:
 80028ec:	4402      	add	r2, r0
 80028ee:	4603      	mov	r3, r0
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d100      	bne.n	80028f6 <memset+0xa>
 80028f4:	4770      	bx	lr
 80028f6:	f803 1b01 	strb.w	r1, [r3], #1
 80028fa:	e7f9      	b.n	80028f0 <memset+0x4>

080028fc <__cvt>:
 80028fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002900:	ec55 4b10 	vmov	r4, r5, d0
 8002904:	2d00      	cmp	r5, #0
 8002906:	460e      	mov	r6, r1
 8002908:	4619      	mov	r1, r3
 800290a:	462b      	mov	r3, r5
 800290c:	bfbb      	ittet	lt
 800290e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002912:	461d      	movlt	r5, r3
 8002914:	2300      	movge	r3, #0
 8002916:	232d      	movlt	r3, #45	; 0x2d
 8002918:	700b      	strb	r3, [r1, #0]
 800291a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800291c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002920:	4691      	mov	r9, r2
 8002922:	f023 0820 	bic.w	r8, r3, #32
 8002926:	bfbc      	itt	lt
 8002928:	4622      	movlt	r2, r4
 800292a:	4614      	movlt	r4, r2
 800292c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002930:	d005      	beq.n	800293e <__cvt+0x42>
 8002932:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002936:	d100      	bne.n	800293a <__cvt+0x3e>
 8002938:	3601      	adds	r6, #1
 800293a:	2102      	movs	r1, #2
 800293c:	e000      	b.n	8002940 <__cvt+0x44>
 800293e:	2103      	movs	r1, #3
 8002940:	ab03      	add	r3, sp, #12
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	ab02      	add	r3, sp, #8
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	ec45 4b10 	vmov	d0, r4, r5
 800294c:	4653      	mov	r3, sl
 800294e:	4632      	mov	r2, r6
 8002950:	f001 fdc6 	bl	80044e0 <_dtoa_r>
 8002954:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002958:	4607      	mov	r7, r0
 800295a:	d102      	bne.n	8002962 <__cvt+0x66>
 800295c:	f019 0f01 	tst.w	r9, #1
 8002960:	d022      	beq.n	80029a8 <__cvt+0xac>
 8002962:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002966:	eb07 0906 	add.w	r9, r7, r6
 800296a:	d110      	bne.n	800298e <__cvt+0x92>
 800296c:	783b      	ldrb	r3, [r7, #0]
 800296e:	2b30      	cmp	r3, #48	; 0x30
 8002970:	d10a      	bne.n	8002988 <__cvt+0x8c>
 8002972:	2200      	movs	r2, #0
 8002974:	2300      	movs	r3, #0
 8002976:	4620      	mov	r0, r4
 8002978:	4629      	mov	r1, r5
 800297a:	f7fe f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800297e:	b918      	cbnz	r0, 8002988 <__cvt+0x8c>
 8002980:	f1c6 0601 	rsb	r6, r6, #1
 8002984:	f8ca 6000 	str.w	r6, [sl]
 8002988:	f8da 3000 	ldr.w	r3, [sl]
 800298c:	4499      	add	r9, r3
 800298e:	2200      	movs	r2, #0
 8002990:	2300      	movs	r3, #0
 8002992:	4620      	mov	r0, r4
 8002994:	4629      	mov	r1, r5
 8002996:	f7fe f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800299a:	b108      	cbz	r0, 80029a0 <__cvt+0xa4>
 800299c:	f8cd 900c 	str.w	r9, [sp, #12]
 80029a0:	2230      	movs	r2, #48	; 0x30
 80029a2:	9b03      	ldr	r3, [sp, #12]
 80029a4:	454b      	cmp	r3, r9
 80029a6:	d307      	bcc.n	80029b8 <__cvt+0xbc>
 80029a8:	9b03      	ldr	r3, [sp, #12]
 80029aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029ac:	1bdb      	subs	r3, r3, r7
 80029ae:	4638      	mov	r0, r7
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	b004      	add	sp, #16
 80029b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b8:	1c59      	adds	r1, r3, #1
 80029ba:	9103      	str	r1, [sp, #12]
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e7f0      	b.n	80029a2 <__cvt+0xa6>

080029c0 <__exponent>:
 80029c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029c2:	4603      	mov	r3, r0
 80029c4:	2900      	cmp	r1, #0
 80029c6:	bfb8      	it	lt
 80029c8:	4249      	neglt	r1, r1
 80029ca:	f803 2b02 	strb.w	r2, [r3], #2
 80029ce:	bfb4      	ite	lt
 80029d0:	222d      	movlt	r2, #45	; 0x2d
 80029d2:	222b      	movge	r2, #43	; 0x2b
 80029d4:	2909      	cmp	r1, #9
 80029d6:	7042      	strb	r2, [r0, #1]
 80029d8:	dd2a      	ble.n	8002a30 <__exponent+0x70>
 80029da:	f10d 0407 	add.w	r4, sp, #7
 80029de:	46a4      	mov	ip, r4
 80029e0:	270a      	movs	r7, #10
 80029e2:	46a6      	mov	lr, r4
 80029e4:	460a      	mov	r2, r1
 80029e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80029ea:	fb07 1516 	mls	r5, r7, r6, r1
 80029ee:	3530      	adds	r5, #48	; 0x30
 80029f0:	2a63      	cmp	r2, #99	; 0x63
 80029f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80029f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80029fa:	4631      	mov	r1, r6
 80029fc:	dcf1      	bgt.n	80029e2 <__exponent+0x22>
 80029fe:	3130      	adds	r1, #48	; 0x30
 8002a00:	f1ae 0502 	sub.w	r5, lr, #2
 8002a04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002a08:	1c44      	adds	r4, r0, #1
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	4561      	cmp	r1, ip
 8002a0e:	d30a      	bcc.n	8002a26 <__exponent+0x66>
 8002a10:	f10d 0209 	add.w	r2, sp, #9
 8002a14:	eba2 020e 	sub.w	r2, r2, lr
 8002a18:	4565      	cmp	r5, ip
 8002a1a:	bf88      	it	hi
 8002a1c:	2200      	movhi	r2, #0
 8002a1e:	4413      	add	r3, r2
 8002a20:	1a18      	subs	r0, r3, r0
 8002a22:	b003      	add	sp, #12
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002a2e:	e7ed      	b.n	8002a0c <__exponent+0x4c>
 8002a30:	2330      	movs	r3, #48	; 0x30
 8002a32:	3130      	adds	r1, #48	; 0x30
 8002a34:	7083      	strb	r3, [r0, #2]
 8002a36:	70c1      	strb	r1, [r0, #3]
 8002a38:	1d03      	adds	r3, r0, #4
 8002a3a:	e7f1      	b.n	8002a20 <__exponent+0x60>

08002a3c <_printf_float>:
 8002a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a40:	ed2d 8b02 	vpush	{d8}
 8002a44:	b08d      	sub	sp, #52	; 0x34
 8002a46:	460c      	mov	r4, r1
 8002a48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	461f      	mov	r7, r3
 8002a50:	4605      	mov	r5, r0
 8002a52:	f002 fea1 	bl	8005798 <_localeconv_r>
 8002a56:	f8d0 a000 	ldr.w	sl, [r0]
 8002a5a:	4650      	mov	r0, sl
 8002a5c:	f7fd fbb8 	bl	80001d0 <strlen>
 8002a60:	2300      	movs	r3, #0
 8002a62:	930a      	str	r3, [sp, #40]	; 0x28
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	9305      	str	r3, [sp, #20]
 8002a68:	f8d8 3000 	ldr.w	r3, [r8]
 8002a6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002a70:	3307      	adds	r3, #7
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	f8c8 2000 	str.w	r2, [r8]
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002a8e:	9307      	str	r3, [sp, #28]
 8002a90:	f8cd 8018 	str.w	r8, [sp, #24]
 8002a94:	ee08 0a10 	vmov	s16, r0
 8002a98:	4b9f      	ldr	r3, [pc, #636]	; (8002d18 <_printf_float+0x2dc>)
 8002a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa2:	f7fe f843 	bl	8000b2c <__aeabi_dcmpun>
 8002aa6:	bb88      	cbnz	r0, 8002b0c <_printf_float+0xd0>
 8002aa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002aac:	4b9a      	ldr	r3, [pc, #616]	; (8002d18 <_printf_float+0x2dc>)
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab2:	f7fe f81d 	bl	8000af0 <__aeabi_dcmple>
 8002ab6:	bb48      	cbnz	r0, 8002b0c <_printf_float+0xd0>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2300      	movs	r3, #0
 8002abc:	4640      	mov	r0, r8
 8002abe:	4649      	mov	r1, r9
 8002ac0:	f7fe f80c 	bl	8000adc <__aeabi_dcmplt>
 8002ac4:	b110      	cbz	r0, 8002acc <_printf_float+0x90>
 8002ac6:	232d      	movs	r3, #45	; 0x2d
 8002ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002acc:	4b93      	ldr	r3, [pc, #588]	; (8002d1c <_printf_float+0x2e0>)
 8002ace:	4894      	ldr	r0, [pc, #592]	; (8002d20 <_printf_float+0x2e4>)
 8002ad0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002ad4:	bf94      	ite	ls
 8002ad6:	4698      	movls	r8, r3
 8002ad8:	4680      	movhi	r8, r0
 8002ada:	2303      	movs	r3, #3
 8002adc:	6123      	str	r3, [r4, #16]
 8002ade:	9b05      	ldr	r3, [sp, #20]
 8002ae0:	f023 0204 	bic.w	r2, r3, #4
 8002ae4:	6022      	str	r2, [r4, #0]
 8002ae6:	f04f 0900 	mov.w	r9, #0
 8002aea:	9700      	str	r7, [sp, #0]
 8002aec:	4633      	mov	r3, r6
 8002aee:	aa0b      	add	r2, sp, #44	; 0x2c
 8002af0:	4621      	mov	r1, r4
 8002af2:	4628      	mov	r0, r5
 8002af4:	f000 f9d8 	bl	8002ea8 <_printf_common>
 8002af8:	3001      	adds	r0, #1
 8002afa:	f040 8090 	bne.w	8002c1e <_printf_float+0x1e2>
 8002afe:	f04f 30ff 	mov.w	r0, #4294967295
 8002b02:	b00d      	add	sp, #52	; 0x34
 8002b04:	ecbd 8b02 	vpop	{d8}
 8002b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	4640      	mov	r0, r8
 8002b12:	4649      	mov	r1, r9
 8002b14:	f7fe f80a 	bl	8000b2c <__aeabi_dcmpun>
 8002b18:	b140      	cbz	r0, 8002b2c <_printf_float+0xf0>
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bfbc      	itt	lt
 8002b20:	232d      	movlt	r3, #45	; 0x2d
 8002b22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002b26:	487f      	ldr	r0, [pc, #508]	; (8002d24 <_printf_float+0x2e8>)
 8002b28:	4b7f      	ldr	r3, [pc, #508]	; (8002d28 <_printf_float+0x2ec>)
 8002b2a:	e7d1      	b.n	8002ad0 <_printf_float+0x94>
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002b32:	9206      	str	r2, [sp, #24]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	d13f      	bne.n	8002bb8 <_printf_float+0x17c>
 8002b38:	2306      	movs	r3, #6
 8002b3a:	6063      	str	r3, [r4, #4]
 8002b3c:	9b05      	ldr	r3, [sp, #20]
 8002b3e:	6861      	ldr	r1, [r4, #4]
 8002b40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b44:	2300      	movs	r3, #0
 8002b46:	9303      	str	r3, [sp, #12]
 8002b48:	ab0a      	add	r3, sp, #40	; 0x28
 8002b4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002b4e:	ab09      	add	r3, sp, #36	; 0x24
 8002b50:	ec49 8b10 	vmov	d0, r8, r9
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	6022      	str	r2, [r4, #0]
 8002b58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	f7ff fecd 	bl	80028fc <__cvt>
 8002b62:	9b06      	ldr	r3, [sp, #24]
 8002b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b66:	2b47      	cmp	r3, #71	; 0x47
 8002b68:	4680      	mov	r8, r0
 8002b6a:	d108      	bne.n	8002b7e <_printf_float+0x142>
 8002b6c:	1cc8      	adds	r0, r1, #3
 8002b6e:	db02      	blt.n	8002b76 <_printf_float+0x13a>
 8002b70:	6863      	ldr	r3, [r4, #4]
 8002b72:	4299      	cmp	r1, r3
 8002b74:	dd41      	ble.n	8002bfa <_printf_float+0x1be>
 8002b76:	f1ab 0b02 	sub.w	fp, fp, #2
 8002b7a:	fa5f fb8b 	uxtb.w	fp, fp
 8002b7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002b82:	d820      	bhi.n	8002bc6 <_printf_float+0x18a>
 8002b84:	3901      	subs	r1, #1
 8002b86:	465a      	mov	r2, fp
 8002b88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b8c:	9109      	str	r1, [sp, #36]	; 0x24
 8002b8e:	f7ff ff17 	bl	80029c0 <__exponent>
 8002b92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b94:	1813      	adds	r3, r2, r0
 8002b96:	2a01      	cmp	r2, #1
 8002b98:	4681      	mov	r9, r0
 8002b9a:	6123      	str	r3, [r4, #16]
 8002b9c:	dc02      	bgt.n	8002ba4 <_printf_float+0x168>
 8002b9e:	6822      	ldr	r2, [r4, #0]
 8002ba0:	07d2      	lsls	r2, r2, #31
 8002ba2:	d501      	bpl.n	8002ba8 <_printf_float+0x16c>
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	6123      	str	r3, [r4, #16]
 8002ba8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d09c      	beq.n	8002aea <_printf_float+0xae>
 8002bb0:	232d      	movs	r3, #45	; 0x2d
 8002bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb6:	e798      	b.n	8002aea <_printf_float+0xae>
 8002bb8:	9a06      	ldr	r2, [sp, #24]
 8002bba:	2a47      	cmp	r2, #71	; 0x47
 8002bbc:	d1be      	bne.n	8002b3c <_printf_float+0x100>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1bc      	bne.n	8002b3c <_printf_float+0x100>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e7b9      	b.n	8002b3a <_printf_float+0xfe>
 8002bc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002bca:	d118      	bne.n	8002bfe <_printf_float+0x1c2>
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	6863      	ldr	r3, [r4, #4]
 8002bd0:	dd0b      	ble.n	8002bea <_printf_float+0x1ae>
 8002bd2:	6121      	str	r1, [r4, #16]
 8002bd4:	b913      	cbnz	r3, 8002bdc <_printf_float+0x1a0>
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	07d0      	lsls	r0, r2, #31
 8002bda:	d502      	bpl.n	8002be2 <_printf_float+0x1a6>
 8002bdc:	3301      	adds	r3, #1
 8002bde:	440b      	add	r3, r1
 8002be0:	6123      	str	r3, [r4, #16]
 8002be2:	65a1      	str	r1, [r4, #88]	; 0x58
 8002be4:	f04f 0900 	mov.w	r9, #0
 8002be8:	e7de      	b.n	8002ba8 <_printf_float+0x16c>
 8002bea:	b913      	cbnz	r3, 8002bf2 <_printf_float+0x1b6>
 8002bec:	6822      	ldr	r2, [r4, #0]
 8002bee:	07d2      	lsls	r2, r2, #31
 8002bf0:	d501      	bpl.n	8002bf6 <_printf_float+0x1ba>
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	e7f4      	b.n	8002be0 <_printf_float+0x1a4>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e7f2      	b.n	8002be0 <_printf_float+0x1a4>
 8002bfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c00:	4299      	cmp	r1, r3
 8002c02:	db05      	blt.n	8002c10 <_printf_float+0x1d4>
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	6121      	str	r1, [r4, #16]
 8002c08:	07d8      	lsls	r0, r3, #31
 8002c0a:	d5ea      	bpl.n	8002be2 <_printf_float+0x1a6>
 8002c0c:	1c4b      	adds	r3, r1, #1
 8002c0e:	e7e7      	b.n	8002be0 <_printf_float+0x1a4>
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bfd4      	ite	le
 8002c14:	f1c1 0202 	rsble	r2, r1, #2
 8002c18:	2201      	movgt	r2, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	e7e0      	b.n	8002be0 <_printf_float+0x1a4>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	055a      	lsls	r2, r3, #21
 8002c22:	d407      	bmi.n	8002c34 <_printf_float+0x1f8>
 8002c24:	6923      	ldr	r3, [r4, #16]
 8002c26:	4642      	mov	r2, r8
 8002c28:	4631      	mov	r1, r6
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	47b8      	blx	r7
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d12c      	bne.n	8002c8c <_printf_float+0x250>
 8002c32:	e764      	b.n	8002afe <_printf_float+0xc2>
 8002c34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002c38:	f240 80e0 	bls.w	8002dfc <_printf_float+0x3c0>
 8002c3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c40:	2200      	movs	r2, #0
 8002c42:	2300      	movs	r3, #0
 8002c44:	f7fd ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d034      	beq.n	8002cb6 <_printf_float+0x27a>
 8002c4c:	4a37      	ldr	r2, [pc, #220]	; (8002d2c <_printf_float+0x2f0>)
 8002c4e:	2301      	movs	r3, #1
 8002c50:	4631      	mov	r1, r6
 8002c52:	4628      	mov	r0, r5
 8002c54:	47b8      	blx	r7
 8002c56:	3001      	adds	r0, #1
 8002c58:	f43f af51 	beq.w	8002afe <_printf_float+0xc2>
 8002c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c60:	429a      	cmp	r2, r3
 8002c62:	db02      	blt.n	8002c6a <_printf_float+0x22e>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	07d8      	lsls	r0, r3, #31
 8002c68:	d510      	bpl.n	8002c8c <_printf_float+0x250>
 8002c6a:	ee18 3a10 	vmov	r3, s16
 8002c6e:	4652      	mov	r2, sl
 8002c70:	4631      	mov	r1, r6
 8002c72:	4628      	mov	r0, r5
 8002c74:	47b8      	blx	r7
 8002c76:	3001      	adds	r0, #1
 8002c78:	f43f af41 	beq.w	8002afe <_printf_float+0xc2>
 8002c7c:	f04f 0800 	mov.w	r8, #0
 8002c80:	f104 091a 	add.w	r9, r4, #26
 8002c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	4543      	cmp	r3, r8
 8002c8a:	dc09      	bgt.n	8002ca0 <_printf_float+0x264>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	079b      	lsls	r3, r3, #30
 8002c90:	f100 8105 	bmi.w	8002e9e <_printf_float+0x462>
 8002c94:	68e0      	ldr	r0, [r4, #12]
 8002c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c98:	4298      	cmp	r0, r3
 8002c9a:	bfb8      	it	lt
 8002c9c:	4618      	movlt	r0, r3
 8002c9e:	e730      	b.n	8002b02 <_printf_float+0xc6>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	464a      	mov	r2, r9
 8002ca4:	4631      	mov	r1, r6
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	47b8      	blx	r7
 8002caa:	3001      	adds	r0, #1
 8002cac:	f43f af27 	beq.w	8002afe <_printf_float+0xc2>
 8002cb0:	f108 0801 	add.w	r8, r8, #1
 8002cb4:	e7e6      	b.n	8002c84 <_printf_float+0x248>
 8002cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	dc39      	bgt.n	8002d30 <_printf_float+0x2f4>
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <_printf_float+0x2f0>)
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	47b8      	blx	r7
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	f43f af19 	beq.w	8002afe <_printf_float+0xc2>
 8002ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	d102      	bne.n	8002cda <_printf_float+0x29e>
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	07d9      	lsls	r1, r3, #31
 8002cd8:	d5d8      	bpl.n	8002c8c <_printf_float+0x250>
 8002cda:	ee18 3a10 	vmov	r3, s16
 8002cde:	4652      	mov	r2, sl
 8002ce0:	4631      	mov	r1, r6
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	47b8      	blx	r7
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	f43f af09 	beq.w	8002afe <_printf_float+0xc2>
 8002cec:	f04f 0900 	mov.w	r9, #0
 8002cf0:	f104 0a1a 	add.w	sl, r4, #26
 8002cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	454b      	cmp	r3, r9
 8002cfa:	dc01      	bgt.n	8002d00 <_printf_float+0x2c4>
 8002cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cfe:	e792      	b.n	8002c26 <_printf_float+0x1ea>
 8002d00:	2301      	movs	r3, #1
 8002d02:	4652      	mov	r2, sl
 8002d04:	4631      	mov	r1, r6
 8002d06:	4628      	mov	r0, r5
 8002d08:	47b8      	blx	r7
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	f43f aef7 	beq.w	8002afe <_printf_float+0xc2>
 8002d10:	f109 0901 	add.w	r9, r9, #1
 8002d14:	e7ee      	b.n	8002cf4 <_printf_float+0x2b8>
 8002d16:	bf00      	nop
 8002d18:	7fefffff 	.word	0x7fefffff
 8002d1c:	080071f8 	.word	0x080071f8
 8002d20:	080071fc 	.word	0x080071fc
 8002d24:	08007204 	.word	0x08007204
 8002d28:	08007200 	.word	0x08007200
 8002d2c:	08007208 	.word	0x08007208
 8002d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d34:	429a      	cmp	r2, r3
 8002d36:	bfa8      	it	ge
 8002d38:	461a      	movge	r2, r3
 8002d3a:	2a00      	cmp	r2, #0
 8002d3c:	4691      	mov	r9, r2
 8002d3e:	dc37      	bgt.n	8002db0 <_printf_float+0x374>
 8002d40:	f04f 0b00 	mov.w	fp, #0
 8002d44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d48:	f104 021a 	add.w	r2, r4, #26
 8002d4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d4e:	9305      	str	r3, [sp, #20]
 8002d50:	eba3 0309 	sub.w	r3, r3, r9
 8002d54:	455b      	cmp	r3, fp
 8002d56:	dc33      	bgt.n	8002dc0 <_printf_float+0x384>
 8002d58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	db3b      	blt.n	8002dd8 <_printf_float+0x39c>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	07da      	lsls	r2, r3, #31
 8002d64:	d438      	bmi.n	8002dd8 <_printf_float+0x39c>
 8002d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d68:	9b05      	ldr	r3, [sp, #20]
 8002d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	eba2 0901 	sub.w	r9, r2, r1
 8002d72:	4599      	cmp	r9, r3
 8002d74:	bfa8      	it	ge
 8002d76:	4699      	movge	r9, r3
 8002d78:	f1b9 0f00 	cmp.w	r9, #0
 8002d7c:	dc35      	bgt.n	8002dea <_printf_float+0x3ae>
 8002d7e:	f04f 0800 	mov.w	r8, #0
 8002d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d86:	f104 0a1a 	add.w	sl, r4, #26
 8002d8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	eba3 0309 	sub.w	r3, r3, r9
 8002d94:	4543      	cmp	r3, r8
 8002d96:	f77f af79 	ble.w	8002c8c <_printf_float+0x250>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	4652      	mov	r2, sl
 8002d9e:	4631      	mov	r1, r6
 8002da0:	4628      	mov	r0, r5
 8002da2:	47b8      	blx	r7
 8002da4:	3001      	adds	r0, #1
 8002da6:	f43f aeaa 	beq.w	8002afe <_printf_float+0xc2>
 8002daa:	f108 0801 	add.w	r8, r8, #1
 8002dae:	e7ec      	b.n	8002d8a <_printf_float+0x34e>
 8002db0:	4613      	mov	r3, r2
 8002db2:	4631      	mov	r1, r6
 8002db4:	4642      	mov	r2, r8
 8002db6:	4628      	mov	r0, r5
 8002db8:	47b8      	blx	r7
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d1c0      	bne.n	8002d40 <_printf_float+0x304>
 8002dbe:	e69e      	b.n	8002afe <_printf_float+0xc2>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4631      	mov	r1, r6
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	9205      	str	r2, [sp, #20]
 8002dc8:	47b8      	blx	r7
 8002dca:	3001      	adds	r0, #1
 8002dcc:	f43f ae97 	beq.w	8002afe <_printf_float+0xc2>
 8002dd0:	9a05      	ldr	r2, [sp, #20]
 8002dd2:	f10b 0b01 	add.w	fp, fp, #1
 8002dd6:	e7b9      	b.n	8002d4c <_printf_float+0x310>
 8002dd8:	ee18 3a10 	vmov	r3, s16
 8002ddc:	4652      	mov	r2, sl
 8002dde:	4631      	mov	r1, r6
 8002de0:	4628      	mov	r0, r5
 8002de2:	47b8      	blx	r7
 8002de4:	3001      	adds	r0, #1
 8002de6:	d1be      	bne.n	8002d66 <_printf_float+0x32a>
 8002de8:	e689      	b.n	8002afe <_printf_float+0xc2>
 8002dea:	9a05      	ldr	r2, [sp, #20]
 8002dec:	464b      	mov	r3, r9
 8002dee:	4442      	add	r2, r8
 8002df0:	4631      	mov	r1, r6
 8002df2:	4628      	mov	r0, r5
 8002df4:	47b8      	blx	r7
 8002df6:	3001      	adds	r0, #1
 8002df8:	d1c1      	bne.n	8002d7e <_printf_float+0x342>
 8002dfa:	e680      	b.n	8002afe <_printf_float+0xc2>
 8002dfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dfe:	2a01      	cmp	r2, #1
 8002e00:	dc01      	bgt.n	8002e06 <_printf_float+0x3ca>
 8002e02:	07db      	lsls	r3, r3, #31
 8002e04:	d538      	bpl.n	8002e78 <_printf_float+0x43c>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4642      	mov	r2, r8
 8002e0a:	4631      	mov	r1, r6
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	47b8      	blx	r7
 8002e10:	3001      	adds	r0, #1
 8002e12:	f43f ae74 	beq.w	8002afe <_printf_float+0xc2>
 8002e16:	ee18 3a10 	vmov	r3, s16
 8002e1a:	4652      	mov	r2, sl
 8002e1c:	4631      	mov	r1, r6
 8002e1e:	4628      	mov	r0, r5
 8002e20:	47b8      	blx	r7
 8002e22:	3001      	adds	r0, #1
 8002e24:	f43f ae6b 	beq.w	8002afe <_printf_float+0xc2>
 8002e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f7fd fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e34:	b9d8      	cbnz	r0, 8002e6e <_printf_float+0x432>
 8002e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e38:	f108 0201 	add.w	r2, r8, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	4631      	mov	r1, r6
 8002e40:	4628      	mov	r0, r5
 8002e42:	47b8      	blx	r7
 8002e44:	3001      	adds	r0, #1
 8002e46:	d10e      	bne.n	8002e66 <_printf_float+0x42a>
 8002e48:	e659      	b.n	8002afe <_printf_float+0xc2>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	4652      	mov	r2, sl
 8002e4e:	4631      	mov	r1, r6
 8002e50:	4628      	mov	r0, r5
 8002e52:	47b8      	blx	r7
 8002e54:	3001      	adds	r0, #1
 8002e56:	f43f ae52 	beq.w	8002afe <_printf_float+0xc2>
 8002e5a:	f108 0801 	add.w	r8, r8, #1
 8002e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	4543      	cmp	r3, r8
 8002e64:	dcf1      	bgt.n	8002e4a <_printf_float+0x40e>
 8002e66:	464b      	mov	r3, r9
 8002e68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e6c:	e6dc      	b.n	8002c28 <_printf_float+0x1ec>
 8002e6e:	f04f 0800 	mov.w	r8, #0
 8002e72:	f104 0a1a 	add.w	sl, r4, #26
 8002e76:	e7f2      	b.n	8002e5e <_printf_float+0x422>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	e7df      	b.n	8002e3e <_printf_float+0x402>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	464a      	mov	r2, r9
 8002e82:	4631      	mov	r1, r6
 8002e84:	4628      	mov	r0, r5
 8002e86:	47b8      	blx	r7
 8002e88:	3001      	adds	r0, #1
 8002e8a:	f43f ae38 	beq.w	8002afe <_printf_float+0xc2>
 8002e8e:	f108 0801 	add.w	r8, r8, #1
 8002e92:	68e3      	ldr	r3, [r4, #12]
 8002e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e96:	1a5b      	subs	r3, r3, r1
 8002e98:	4543      	cmp	r3, r8
 8002e9a:	dcf0      	bgt.n	8002e7e <_printf_float+0x442>
 8002e9c:	e6fa      	b.n	8002c94 <_printf_float+0x258>
 8002e9e:	f04f 0800 	mov.w	r8, #0
 8002ea2:	f104 0919 	add.w	r9, r4, #25
 8002ea6:	e7f4      	b.n	8002e92 <_printf_float+0x456>

08002ea8 <_printf_common>:
 8002ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eac:	4616      	mov	r6, r2
 8002eae:	4699      	mov	r9, r3
 8002eb0:	688a      	ldr	r2, [r1, #8]
 8002eb2:	690b      	ldr	r3, [r1, #16]
 8002eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bfb8      	it	lt
 8002ebc:	4613      	movlt	r3, r2
 8002ebe:	6033      	str	r3, [r6, #0]
 8002ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ec4:	4607      	mov	r7, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	b10a      	cbz	r2, 8002ece <_printf_common+0x26>
 8002eca:	3301      	adds	r3, #1
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	0699      	lsls	r1, r3, #26
 8002ed2:	bf42      	ittt	mi
 8002ed4:	6833      	ldrmi	r3, [r6, #0]
 8002ed6:	3302      	addmi	r3, #2
 8002ed8:	6033      	strmi	r3, [r6, #0]
 8002eda:	6825      	ldr	r5, [r4, #0]
 8002edc:	f015 0506 	ands.w	r5, r5, #6
 8002ee0:	d106      	bne.n	8002ef0 <_printf_common+0x48>
 8002ee2:	f104 0a19 	add.w	sl, r4, #25
 8002ee6:	68e3      	ldr	r3, [r4, #12]
 8002ee8:	6832      	ldr	r2, [r6, #0]
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	42ab      	cmp	r3, r5
 8002eee:	dc26      	bgt.n	8002f3e <_printf_common+0x96>
 8002ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ef4:	1e13      	subs	r3, r2, #0
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	bf18      	it	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	0692      	lsls	r2, r2, #26
 8002efe:	d42b      	bmi.n	8002f58 <_printf_common+0xb0>
 8002f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f04:	4649      	mov	r1, r9
 8002f06:	4638      	mov	r0, r7
 8002f08:	47c0      	blx	r8
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d01e      	beq.n	8002f4c <_printf_common+0xa4>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	68e5      	ldr	r5, [r4, #12]
 8002f12:	6832      	ldr	r2, [r6, #0]
 8002f14:	f003 0306 	and.w	r3, r3, #6
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	bf08      	it	eq
 8002f1c:	1aad      	subeq	r5, r5, r2
 8002f1e:	68a3      	ldr	r3, [r4, #8]
 8002f20:	6922      	ldr	r2, [r4, #16]
 8002f22:	bf0c      	ite	eq
 8002f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f28:	2500      	movne	r5, #0
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	bfc4      	itt	gt
 8002f2e:	1a9b      	subgt	r3, r3, r2
 8002f30:	18ed      	addgt	r5, r5, r3
 8002f32:	2600      	movs	r6, #0
 8002f34:	341a      	adds	r4, #26
 8002f36:	42b5      	cmp	r5, r6
 8002f38:	d11a      	bne.n	8002f70 <_printf_common+0xc8>
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	e008      	b.n	8002f50 <_printf_common+0xa8>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4652      	mov	r2, sl
 8002f42:	4649      	mov	r1, r9
 8002f44:	4638      	mov	r0, r7
 8002f46:	47c0      	blx	r8
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d103      	bne.n	8002f54 <_printf_common+0xac>
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f54:	3501      	adds	r5, #1
 8002f56:	e7c6      	b.n	8002ee6 <_printf_common+0x3e>
 8002f58:	18e1      	adds	r1, r4, r3
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	2030      	movs	r0, #48	; 0x30
 8002f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f62:	4422      	add	r2, r4
 8002f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	e7c7      	b.n	8002f00 <_printf_common+0x58>
 8002f70:	2301      	movs	r3, #1
 8002f72:	4622      	mov	r2, r4
 8002f74:	4649      	mov	r1, r9
 8002f76:	4638      	mov	r0, r7
 8002f78:	47c0      	blx	r8
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d0e6      	beq.n	8002f4c <_printf_common+0xa4>
 8002f7e:	3601      	adds	r6, #1
 8002f80:	e7d9      	b.n	8002f36 <_printf_common+0x8e>
	...

08002f84 <_printf_i>:
 8002f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	460c      	mov	r4, r1
 8002f8a:	4691      	mov	r9, r2
 8002f8c:	7e27      	ldrb	r7, [r4, #24]
 8002f8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f90:	2f78      	cmp	r7, #120	; 0x78
 8002f92:	4680      	mov	r8, r0
 8002f94:	469a      	mov	sl, r3
 8002f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f9a:	d807      	bhi.n	8002fac <_printf_i+0x28>
 8002f9c:	2f62      	cmp	r7, #98	; 0x62
 8002f9e:	d80a      	bhi.n	8002fb6 <_printf_i+0x32>
 8002fa0:	2f00      	cmp	r7, #0
 8002fa2:	f000 80d8 	beq.w	8003156 <_printf_i+0x1d2>
 8002fa6:	2f58      	cmp	r7, #88	; 0x58
 8002fa8:	f000 80a3 	beq.w	80030f2 <_printf_i+0x16e>
 8002fac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fb4:	e03a      	b.n	800302c <_printf_i+0xa8>
 8002fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fba:	2b15      	cmp	r3, #21
 8002fbc:	d8f6      	bhi.n	8002fac <_printf_i+0x28>
 8002fbe:	a001      	add	r0, pc, #4	; (adr r0, 8002fc4 <_printf_i+0x40>)
 8002fc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fc4:	0800301d 	.word	0x0800301d
 8002fc8:	08003031 	.word	0x08003031
 8002fcc:	08002fad 	.word	0x08002fad
 8002fd0:	08002fad 	.word	0x08002fad
 8002fd4:	08002fad 	.word	0x08002fad
 8002fd8:	08002fad 	.word	0x08002fad
 8002fdc:	08003031 	.word	0x08003031
 8002fe0:	08002fad 	.word	0x08002fad
 8002fe4:	08002fad 	.word	0x08002fad
 8002fe8:	08002fad 	.word	0x08002fad
 8002fec:	08002fad 	.word	0x08002fad
 8002ff0:	0800313d 	.word	0x0800313d
 8002ff4:	08003061 	.word	0x08003061
 8002ff8:	0800311f 	.word	0x0800311f
 8002ffc:	08002fad 	.word	0x08002fad
 8003000:	08002fad 	.word	0x08002fad
 8003004:	0800315f 	.word	0x0800315f
 8003008:	08002fad 	.word	0x08002fad
 800300c:	08003061 	.word	0x08003061
 8003010:	08002fad 	.word	0x08002fad
 8003014:	08002fad 	.word	0x08002fad
 8003018:	08003127 	.word	0x08003127
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	600a      	str	r2, [r1, #0]
 8003024:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800302c:	2301      	movs	r3, #1
 800302e:	e0a3      	b.n	8003178 <_printf_i+0x1f4>
 8003030:	6825      	ldr	r5, [r4, #0]
 8003032:	6808      	ldr	r0, [r1, #0]
 8003034:	062e      	lsls	r6, r5, #24
 8003036:	f100 0304 	add.w	r3, r0, #4
 800303a:	d50a      	bpl.n	8003052 <_printf_i+0xce>
 800303c:	6805      	ldr	r5, [r0, #0]
 800303e:	600b      	str	r3, [r1, #0]
 8003040:	2d00      	cmp	r5, #0
 8003042:	da03      	bge.n	800304c <_printf_i+0xc8>
 8003044:	232d      	movs	r3, #45	; 0x2d
 8003046:	426d      	negs	r5, r5
 8003048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800304c:	485e      	ldr	r0, [pc, #376]	; (80031c8 <_printf_i+0x244>)
 800304e:	230a      	movs	r3, #10
 8003050:	e019      	b.n	8003086 <_printf_i+0x102>
 8003052:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003056:	6805      	ldr	r5, [r0, #0]
 8003058:	600b      	str	r3, [r1, #0]
 800305a:	bf18      	it	ne
 800305c:	b22d      	sxthne	r5, r5
 800305e:	e7ef      	b.n	8003040 <_printf_i+0xbc>
 8003060:	680b      	ldr	r3, [r1, #0]
 8003062:	6825      	ldr	r5, [r4, #0]
 8003064:	1d18      	adds	r0, r3, #4
 8003066:	6008      	str	r0, [r1, #0]
 8003068:	0628      	lsls	r0, r5, #24
 800306a:	d501      	bpl.n	8003070 <_printf_i+0xec>
 800306c:	681d      	ldr	r5, [r3, #0]
 800306e:	e002      	b.n	8003076 <_printf_i+0xf2>
 8003070:	0669      	lsls	r1, r5, #25
 8003072:	d5fb      	bpl.n	800306c <_printf_i+0xe8>
 8003074:	881d      	ldrh	r5, [r3, #0]
 8003076:	4854      	ldr	r0, [pc, #336]	; (80031c8 <_printf_i+0x244>)
 8003078:	2f6f      	cmp	r7, #111	; 0x6f
 800307a:	bf0c      	ite	eq
 800307c:	2308      	moveq	r3, #8
 800307e:	230a      	movne	r3, #10
 8003080:	2100      	movs	r1, #0
 8003082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003086:	6866      	ldr	r6, [r4, #4]
 8003088:	60a6      	str	r6, [r4, #8]
 800308a:	2e00      	cmp	r6, #0
 800308c:	bfa2      	ittt	ge
 800308e:	6821      	ldrge	r1, [r4, #0]
 8003090:	f021 0104 	bicge.w	r1, r1, #4
 8003094:	6021      	strge	r1, [r4, #0]
 8003096:	b90d      	cbnz	r5, 800309c <_printf_i+0x118>
 8003098:	2e00      	cmp	r6, #0
 800309a:	d04d      	beq.n	8003138 <_printf_i+0x1b4>
 800309c:	4616      	mov	r6, r2
 800309e:	fbb5 f1f3 	udiv	r1, r5, r3
 80030a2:	fb03 5711 	mls	r7, r3, r1, r5
 80030a6:	5dc7      	ldrb	r7, [r0, r7]
 80030a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030ac:	462f      	mov	r7, r5
 80030ae:	42bb      	cmp	r3, r7
 80030b0:	460d      	mov	r5, r1
 80030b2:	d9f4      	bls.n	800309e <_printf_i+0x11a>
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d10b      	bne.n	80030d0 <_printf_i+0x14c>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	07df      	lsls	r7, r3, #31
 80030bc:	d508      	bpl.n	80030d0 <_printf_i+0x14c>
 80030be:	6923      	ldr	r3, [r4, #16]
 80030c0:	6861      	ldr	r1, [r4, #4]
 80030c2:	4299      	cmp	r1, r3
 80030c4:	bfde      	ittt	le
 80030c6:	2330      	movle	r3, #48	; 0x30
 80030c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030d0:	1b92      	subs	r2, r2, r6
 80030d2:	6122      	str	r2, [r4, #16]
 80030d4:	f8cd a000 	str.w	sl, [sp]
 80030d8:	464b      	mov	r3, r9
 80030da:	aa03      	add	r2, sp, #12
 80030dc:	4621      	mov	r1, r4
 80030de:	4640      	mov	r0, r8
 80030e0:	f7ff fee2 	bl	8002ea8 <_printf_common>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d14c      	bne.n	8003182 <_printf_i+0x1fe>
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	b004      	add	sp, #16
 80030ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f2:	4835      	ldr	r0, [pc, #212]	; (80031c8 <_printf_i+0x244>)
 80030f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	680e      	ldr	r6, [r1, #0]
 80030fc:	061f      	lsls	r7, r3, #24
 80030fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8003102:	600e      	str	r6, [r1, #0]
 8003104:	d514      	bpl.n	8003130 <_printf_i+0x1ac>
 8003106:	07d9      	lsls	r1, r3, #31
 8003108:	bf44      	itt	mi
 800310a:	f043 0320 	orrmi.w	r3, r3, #32
 800310e:	6023      	strmi	r3, [r4, #0]
 8003110:	b91d      	cbnz	r5, 800311a <_printf_i+0x196>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	f023 0320 	bic.w	r3, r3, #32
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	2310      	movs	r3, #16
 800311c:	e7b0      	b.n	8003080 <_printf_i+0xfc>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	f043 0320 	orr.w	r3, r3, #32
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	2378      	movs	r3, #120	; 0x78
 8003128:	4828      	ldr	r0, [pc, #160]	; (80031cc <_printf_i+0x248>)
 800312a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800312e:	e7e3      	b.n	80030f8 <_printf_i+0x174>
 8003130:	065e      	lsls	r6, r3, #25
 8003132:	bf48      	it	mi
 8003134:	b2ad      	uxthmi	r5, r5
 8003136:	e7e6      	b.n	8003106 <_printf_i+0x182>
 8003138:	4616      	mov	r6, r2
 800313a:	e7bb      	b.n	80030b4 <_printf_i+0x130>
 800313c:	680b      	ldr	r3, [r1, #0]
 800313e:	6826      	ldr	r6, [r4, #0]
 8003140:	6960      	ldr	r0, [r4, #20]
 8003142:	1d1d      	adds	r5, r3, #4
 8003144:	600d      	str	r5, [r1, #0]
 8003146:	0635      	lsls	r5, r6, #24
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	d501      	bpl.n	8003150 <_printf_i+0x1cc>
 800314c:	6018      	str	r0, [r3, #0]
 800314e:	e002      	b.n	8003156 <_printf_i+0x1d2>
 8003150:	0671      	lsls	r1, r6, #25
 8003152:	d5fb      	bpl.n	800314c <_printf_i+0x1c8>
 8003154:	8018      	strh	r0, [r3, #0]
 8003156:	2300      	movs	r3, #0
 8003158:	6123      	str	r3, [r4, #16]
 800315a:	4616      	mov	r6, r2
 800315c:	e7ba      	b.n	80030d4 <_printf_i+0x150>
 800315e:	680b      	ldr	r3, [r1, #0]
 8003160:	1d1a      	adds	r2, r3, #4
 8003162:	600a      	str	r2, [r1, #0]
 8003164:	681e      	ldr	r6, [r3, #0]
 8003166:	6862      	ldr	r2, [r4, #4]
 8003168:	2100      	movs	r1, #0
 800316a:	4630      	mov	r0, r6
 800316c:	f7fd f838 	bl	80001e0 <memchr>
 8003170:	b108      	cbz	r0, 8003176 <_printf_i+0x1f2>
 8003172:	1b80      	subs	r0, r0, r6
 8003174:	6060      	str	r0, [r4, #4]
 8003176:	6863      	ldr	r3, [r4, #4]
 8003178:	6123      	str	r3, [r4, #16]
 800317a:	2300      	movs	r3, #0
 800317c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003180:	e7a8      	b.n	80030d4 <_printf_i+0x150>
 8003182:	6923      	ldr	r3, [r4, #16]
 8003184:	4632      	mov	r2, r6
 8003186:	4649      	mov	r1, r9
 8003188:	4640      	mov	r0, r8
 800318a:	47d0      	blx	sl
 800318c:	3001      	adds	r0, #1
 800318e:	d0ab      	beq.n	80030e8 <_printf_i+0x164>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	079b      	lsls	r3, r3, #30
 8003194:	d413      	bmi.n	80031be <_printf_i+0x23a>
 8003196:	68e0      	ldr	r0, [r4, #12]
 8003198:	9b03      	ldr	r3, [sp, #12]
 800319a:	4298      	cmp	r0, r3
 800319c:	bfb8      	it	lt
 800319e:	4618      	movlt	r0, r3
 80031a0:	e7a4      	b.n	80030ec <_printf_i+0x168>
 80031a2:	2301      	movs	r3, #1
 80031a4:	4632      	mov	r2, r6
 80031a6:	4649      	mov	r1, r9
 80031a8:	4640      	mov	r0, r8
 80031aa:	47d0      	blx	sl
 80031ac:	3001      	adds	r0, #1
 80031ae:	d09b      	beq.n	80030e8 <_printf_i+0x164>
 80031b0:	3501      	adds	r5, #1
 80031b2:	68e3      	ldr	r3, [r4, #12]
 80031b4:	9903      	ldr	r1, [sp, #12]
 80031b6:	1a5b      	subs	r3, r3, r1
 80031b8:	42ab      	cmp	r3, r5
 80031ba:	dcf2      	bgt.n	80031a2 <_printf_i+0x21e>
 80031bc:	e7eb      	b.n	8003196 <_printf_i+0x212>
 80031be:	2500      	movs	r5, #0
 80031c0:	f104 0619 	add.w	r6, r4, #25
 80031c4:	e7f5      	b.n	80031b2 <_printf_i+0x22e>
 80031c6:	bf00      	nop
 80031c8:	0800720a 	.word	0x0800720a
 80031cc:	0800721b 	.word	0x0800721b

080031d0 <_scanf_float>:
 80031d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d4:	b087      	sub	sp, #28
 80031d6:	4617      	mov	r7, r2
 80031d8:	9303      	str	r3, [sp, #12]
 80031da:	688b      	ldr	r3, [r1, #8]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80031e2:	bf83      	ittte	hi
 80031e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80031e8:	195b      	addhi	r3, r3, r5
 80031ea:	9302      	strhi	r3, [sp, #8]
 80031ec:	2300      	movls	r3, #0
 80031ee:	bf86      	itte	hi
 80031f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80031f4:	608b      	strhi	r3, [r1, #8]
 80031f6:	9302      	strls	r3, [sp, #8]
 80031f8:	680b      	ldr	r3, [r1, #0]
 80031fa:	468b      	mov	fp, r1
 80031fc:	2500      	movs	r5, #0
 80031fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003202:	f84b 3b1c 	str.w	r3, [fp], #28
 8003206:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800320a:	4680      	mov	r8, r0
 800320c:	460c      	mov	r4, r1
 800320e:	465e      	mov	r6, fp
 8003210:	46aa      	mov	sl, r5
 8003212:	46a9      	mov	r9, r5
 8003214:	9501      	str	r5, [sp, #4]
 8003216:	68a2      	ldr	r2, [r4, #8]
 8003218:	b152      	cbz	r2, 8003230 <_scanf_float+0x60>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b4e      	cmp	r3, #78	; 0x4e
 8003220:	d864      	bhi.n	80032ec <_scanf_float+0x11c>
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d83c      	bhi.n	80032a0 <_scanf_float+0xd0>
 8003226:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800322a:	b2c8      	uxtb	r0, r1
 800322c:	280e      	cmp	r0, #14
 800322e:	d93a      	bls.n	80032a6 <_scanf_float+0xd6>
 8003230:	f1b9 0f00 	cmp.w	r9, #0
 8003234:	d003      	beq.n	800323e <_scanf_float+0x6e>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003242:	f1ba 0f01 	cmp.w	sl, #1
 8003246:	f200 8113 	bhi.w	8003470 <_scanf_float+0x2a0>
 800324a:	455e      	cmp	r6, fp
 800324c:	f200 8105 	bhi.w	800345a <_scanf_float+0x28a>
 8003250:	2501      	movs	r5, #1
 8003252:	4628      	mov	r0, r5
 8003254:	b007      	add	sp, #28
 8003256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800325a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800325e:	2a0d      	cmp	r2, #13
 8003260:	d8e6      	bhi.n	8003230 <_scanf_float+0x60>
 8003262:	a101      	add	r1, pc, #4	; (adr r1, 8003268 <_scanf_float+0x98>)
 8003264:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003268:	080033a7 	.word	0x080033a7
 800326c:	08003231 	.word	0x08003231
 8003270:	08003231 	.word	0x08003231
 8003274:	08003231 	.word	0x08003231
 8003278:	08003407 	.word	0x08003407
 800327c:	080033df 	.word	0x080033df
 8003280:	08003231 	.word	0x08003231
 8003284:	08003231 	.word	0x08003231
 8003288:	080033b5 	.word	0x080033b5
 800328c:	08003231 	.word	0x08003231
 8003290:	08003231 	.word	0x08003231
 8003294:	08003231 	.word	0x08003231
 8003298:	08003231 	.word	0x08003231
 800329c:	0800336d 	.word	0x0800336d
 80032a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80032a4:	e7db      	b.n	800325e <_scanf_float+0x8e>
 80032a6:	290e      	cmp	r1, #14
 80032a8:	d8c2      	bhi.n	8003230 <_scanf_float+0x60>
 80032aa:	a001      	add	r0, pc, #4	; (adr r0, 80032b0 <_scanf_float+0xe0>)
 80032ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80032b0:	0800335f 	.word	0x0800335f
 80032b4:	08003231 	.word	0x08003231
 80032b8:	0800335f 	.word	0x0800335f
 80032bc:	080033f3 	.word	0x080033f3
 80032c0:	08003231 	.word	0x08003231
 80032c4:	0800330d 	.word	0x0800330d
 80032c8:	08003349 	.word	0x08003349
 80032cc:	08003349 	.word	0x08003349
 80032d0:	08003349 	.word	0x08003349
 80032d4:	08003349 	.word	0x08003349
 80032d8:	08003349 	.word	0x08003349
 80032dc:	08003349 	.word	0x08003349
 80032e0:	08003349 	.word	0x08003349
 80032e4:	08003349 	.word	0x08003349
 80032e8:	08003349 	.word	0x08003349
 80032ec:	2b6e      	cmp	r3, #110	; 0x6e
 80032ee:	d809      	bhi.n	8003304 <_scanf_float+0x134>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d8b2      	bhi.n	800325a <_scanf_float+0x8a>
 80032f4:	2b54      	cmp	r3, #84	; 0x54
 80032f6:	d077      	beq.n	80033e8 <_scanf_float+0x218>
 80032f8:	2b59      	cmp	r3, #89	; 0x59
 80032fa:	d199      	bne.n	8003230 <_scanf_float+0x60>
 80032fc:	2d07      	cmp	r5, #7
 80032fe:	d197      	bne.n	8003230 <_scanf_float+0x60>
 8003300:	2508      	movs	r5, #8
 8003302:	e029      	b.n	8003358 <_scanf_float+0x188>
 8003304:	2b74      	cmp	r3, #116	; 0x74
 8003306:	d06f      	beq.n	80033e8 <_scanf_float+0x218>
 8003308:	2b79      	cmp	r3, #121	; 0x79
 800330a:	e7f6      	b.n	80032fa <_scanf_float+0x12a>
 800330c:	6821      	ldr	r1, [r4, #0]
 800330e:	05c8      	lsls	r0, r1, #23
 8003310:	d51a      	bpl.n	8003348 <_scanf_float+0x178>
 8003312:	9b02      	ldr	r3, [sp, #8]
 8003314:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003318:	6021      	str	r1, [r4, #0]
 800331a:	f109 0901 	add.w	r9, r9, #1
 800331e:	b11b      	cbz	r3, 8003328 <_scanf_float+0x158>
 8003320:	3b01      	subs	r3, #1
 8003322:	3201      	adds	r2, #1
 8003324:	9302      	str	r3, [sp, #8]
 8003326:	60a2      	str	r2, [r4, #8]
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	3b01      	subs	r3, #1
 800332c:	60a3      	str	r3, [r4, #8]
 800332e:	6923      	ldr	r3, [r4, #16]
 8003330:	3301      	adds	r3, #1
 8003332:	6123      	str	r3, [r4, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	f340 8084 	ble.w	8003448 <_scanf_float+0x278>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	e766      	b.n	8003216 <_scanf_float+0x46>
 8003348:	eb1a 0f05 	cmn.w	sl, r5
 800334c:	f47f af70 	bne.w	8003230 <_scanf_float+0x60>
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003356:	6022      	str	r2, [r4, #0]
 8003358:	f806 3b01 	strb.w	r3, [r6], #1
 800335c:	e7e4      	b.n	8003328 <_scanf_float+0x158>
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	0610      	lsls	r0, r2, #24
 8003362:	f57f af65 	bpl.w	8003230 <_scanf_float+0x60>
 8003366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800336a:	e7f4      	b.n	8003356 <_scanf_float+0x186>
 800336c:	f1ba 0f00 	cmp.w	sl, #0
 8003370:	d10e      	bne.n	8003390 <_scanf_float+0x1c0>
 8003372:	f1b9 0f00 	cmp.w	r9, #0
 8003376:	d10e      	bne.n	8003396 <_scanf_float+0x1c6>
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800337e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003382:	d108      	bne.n	8003396 <_scanf_float+0x1c6>
 8003384:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003388:	6022      	str	r2, [r4, #0]
 800338a:	f04f 0a01 	mov.w	sl, #1
 800338e:	e7e3      	b.n	8003358 <_scanf_float+0x188>
 8003390:	f1ba 0f02 	cmp.w	sl, #2
 8003394:	d055      	beq.n	8003442 <_scanf_float+0x272>
 8003396:	2d01      	cmp	r5, #1
 8003398:	d002      	beq.n	80033a0 <_scanf_float+0x1d0>
 800339a:	2d04      	cmp	r5, #4
 800339c:	f47f af48 	bne.w	8003230 <_scanf_float+0x60>
 80033a0:	3501      	adds	r5, #1
 80033a2:	b2ed      	uxtb	r5, r5
 80033a4:	e7d8      	b.n	8003358 <_scanf_float+0x188>
 80033a6:	f1ba 0f01 	cmp.w	sl, #1
 80033aa:	f47f af41 	bne.w	8003230 <_scanf_float+0x60>
 80033ae:	f04f 0a02 	mov.w	sl, #2
 80033b2:	e7d1      	b.n	8003358 <_scanf_float+0x188>
 80033b4:	b97d      	cbnz	r5, 80033d6 <_scanf_float+0x206>
 80033b6:	f1b9 0f00 	cmp.w	r9, #0
 80033ba:	f47f af3c 	bne.w	8003236 <_scanf_float+0x66>
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80033c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80033c8:	f47f af39 	bne.w	800323e <_scanf_float+0x6e>
 80033cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80033d0:	6022      	str	r2, [r4, #0]
 80033d2:	2501      	movs	r5, #1
 80033d4:	e7c0      	b.n	8003358 <_scanf_float+0x188>
 80033d6:	2d03      	cmp	r5, #3
 80033d8:	d0e2      	beq.n	80033a0 <_scanf_float+0x1d0>
 80033da:	2d05      	cmp	r5, #5
 80033dc:	e7de      	b.n	800339c <_scanf_float+0x1cc>
 80033de:	2d02      	cmp	r5, #2
 80033e0:	f47f af26 	bne.w	8003230 <_scanf_float+0x60>
 80033e4:	2503      	movs	r5, #3
 80033e6:	e7b7      	b.n	8003358 <_scanf_float+0x188>
 80033e8:	2d06      	cmp	r5, #6
 80033ea:	f47f af21 	bne.w	8003230 <_scanf_float+0x60>
 80033ee:	2507      	movs	r5, #7
 80033f0:	e7b2      	b.n	8003358 <_scanf_float+0x188>
 80033f2:	6822      	ldr	r2, [r4, #0]
 80033f4:	0591      	lsls	r1, r2, #22
 80033f6:	f57f af1b 	bpl.w	8003230 <_scanf_float+0x60>
 80033fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80033fe:	6022      	str	r2, [r4, #0]
 8003400:	f8cd 9004 	str.w	r9, [sp, #4]
 8003404:	e7a8      	b.n	8003358 <_scanf_float+0x188>
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800340c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003410:	d006      	beq.n	8003420 <_scanf_float+0x250>
 8003412:	0550      	lsls	r0, r2, #21
 8003414:	f57f af0c 	bpl.w	8003230 <_scanf_float+0x60>
 8003418:	f1b9 0f00 	cmp.w	r9, #0
 800341c:	f43f af0f 	beq.w	800323e <_scanf_float+0x6e>
 8003420:	0591      	lsls	r1, r2, #22
 8003422:	bf58      	it	pl
 8003424:	9901      	ldrpl	r1, [sp, #4]
 8003426:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800342a:	bf58      	it	pl
 800342c:	eba9 0101 	subpl.w	r1, r9, r1
 8003430:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003434:	bf58      	it	pl
 8003436:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800343a:	6022      	str	r2, [r4, #0]
 800343c:	f04f 0900 	mov.w	r9, #0
 8003440:	e78a      	b.n	8003358 <_scanf_float+0x188>
 8003442:	f04f 0a03 	mov.w	sl, #3
 8003446:	e787      	b.n	8003358 <_scanf_float+0x188>
 8003448:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800344c:	4639      	mov	r1, r7
 800344e:	4640      	mov	r0, r8
 8003450:	4798      	blx	r3
 8003452:	2800      	cmp	r0, #0
 8003454:	f43f aedf 	beq.w	8003216 <_scanf_float+0x46>
 8003458:	e6ea      	b.n	8003230 <_scanf_float+0x60>
 800345a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800345e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003462:	463a      	mov	r2, r7
 8003464:	4640      	mov	r0, r8
 8003466:	4798      	blx	r3
 8003468:	6923      	ldr	r3, [r4, #16]
 800346a:	3b01      	subs	r3, #1
 800346c:	6123      	str	r3, [r4, #16]
 800346e:	e6ec      	b.n	800324a <_scanf_float+0x7a>
 8003470:	1e6b      	subs	r3, r5, #1
 8003472:	2b06      	cmp	r3, #6
 8003474:	d825      	bhi.n	80034c2 <_scanf_float+0x2f2>
 8003476:	2d02      	cmp	r5, #2
 8003478:	d836      	bhi.n	80034e8 <_scanf_float+0x318>
 800347a:	455e      	cmp	r6, fp
 800347c:	f67f aee8 	bls.w	8003250 <_scanf_float+0x80>
 8003480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003484:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003488:	463a      	mov	r2, r7
 800348a:	4640      	mov	r0, r8
 800348c:	4798      	blx	r3
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	3b01      	subs	r3, #1
 8003492:	6123      	str	r3, [r4, #16]
 8003494:	e7f1      	b.n	800347a <_scanf_float+0x2aa>
 8003496:	9802      	ldr	r0, [sp, #8]
 8003498:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800349c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80034a0:	9002      	str	r0, [sp, #8]
 80034a2:	463a      	mov	r2, r7
 80034a4:	4640      	mov	r0, r8
 80034a6:	4798      	blx	r3
 80034a8:	6923      	ldr	r3, [r4, #16]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034b2:	fa5f fa8a 	uxtb.w	sl, sl
 80034b6:	f1ba 0f02 	cmp.w	sl, #2
 80034ba:	d1ec      	bne.n	8003496 <_scanf_float+0x2c6>
 80034bc:	3d03      	subs	r5, #3
 80034be:	b2ed      	uxtb	r5, r5
 80034c0:	1b76      	subs	r6, r6, r5
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	05da      	lsls	r2, r3, #23
 80034c6:	d52f      	bpl.n	8003528 <_scanf_float+0x358>
 80034c8:	055b      	lsls	r3, r3, #21
 80034ca:	d510      	bpl.n	80034ee <_scanf_float+0x31e>
 80034cc:	455e      	cmp	r6, fp
 80034ce:	f67f aebf 	bls.w	8003250 <_scanf_float+0x80>
 80034d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80034da:	463a      	mov	r2, r7
 80034dc:	4640      	mov	r0, r8
 80034de:	4798      	blx	r3
 80034e0:	6923      	ldr	r3, [r4, #16]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6123      	str	r3, [r4, #16]
 80034e6:	e7f1      	b.n	80034cc <_scanf_float+0x2fc>
 80034e8:	46aa      	mov	sl, r5
 80034ea:	9602      	str	r6, [sp, #8]
 80034ec:	e7df      	b.n	80034ae <_scanf_float+0x2de>
 80034ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	2965      	cmp	r1, #101	; 0x65
 80034f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80034fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80034fe:	6123      	str	r3, [r4, #16]
 8003500:	d00c      	beq.n	800351c <_scanf_float+0x34c>
 8003502:	2945      	cmp	r1, #69	; 0x45
 8003504:	d00a      	beq.n	800351c <_scanf_float+0x34c>
 8003506:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800350a:	463a      	mov	r2, r7
 800350c:	4640      	mov	r0, r8
 800350e:	4798      	blx	r3
 8003510:	6923      	ldr	r3, [r4, #16]
 8003512:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003516:	3b01      	subs	r3, #1
 8003518:	1eb5      	subs	r5, r6, #2
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003520:	463a      	mov	r2, r7
 8003522:	4640      	mov	r0, r8
 8003524:	4798      	blx	r3
 8003526:	462e      	mov	r6, r5
 8003528:	6825      	ldr	r5, [r4, #0]
 800352a:	f015 0510 	ands.w	r5, r5, #16
 800352e:	d158      	bne.n	80035e2 <_scanf_float+0x412>
 8003530:	7035      	strb	r5, [r6, #0]
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d11c      	bne.n	8003578 <_scanf_float+0x3a8>
 800353e:	9b01      	ldr	r3, [sp, #4]
 8003540:	454b      	cmp	r3, r9
 8003542:	eba3 0209 	sub.w	r2, r3, r9
 8003546:	d124      	bne.n	8003592 <_scanf_float+0x3c2>
 8003548:	2200      	movs	r2, #0
 800354a:	4659      	mov	r1, fp
 800354c:	4640      	mov	r0, r8
 800354e:	f000 fead 	bl	80042ac <_strtod_r>
 8003552:	9b03      	ldr	r3, [sp, #12]
 8003554:	6821      	ldr	r1, [r4, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f011 0f02 	tst.w	r1, #2
 800355c:	ec57 6b10 	vmov	r6, r7, d0
 8003560:	f103 0204 	add.w	r2, r3, #4
 8003564:	d020      	beq.n	80035a8 <_scanf_float+0x3d8>
 8003566:	9903      	ldr	r1, [sp, #12]
 8003568:	600a      	str	r2, [r1, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	e9c3 6700 	strd	r6, r7, [r3]
 8003570:	68e3      	ldr	r3, [r4, #12]
 8003572:	3301      	adds	r3, #1
 8003574:	60e3      	str	r3, [r4, #12]
 8003576:	e66c      	b.n	8003252 <_scanf_float+0x82>
 8003578:	9b04      	ldr	r3, [sp, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0e4      	beq.n	8003548 <_scanf_float+0x378>
 800357e:	9905      	ldr	r1, [sp, #20]
 8003580:	230a      	movs	r3, #10
 8003582:	462a      	mov	r2, r5
 8003584:	3101      	adds	r1, #1
 8003586:	4640      	mov	r0, r8
 8003588:	f000 ff1a 	bl	80043c0 <_strtol_r>
 800358c:	9b04      	ldr	r3, [sp, #16]
 800358e:	9e05      	ldr	r6, [sp, #20]
 8003590:	1ac2      	subs	r2, r0, r3
 8003592:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003596:	429e      	cmp	r6, r3
 8003598:	bf28      	it	cs
 800359a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800359e:	4912      	ldr	r1, [pc, #72]	; (80035e8 <_scanf_float+0x418>)
 80035a0:	4630      	mov	r0, r6
 80035a2:	f000 f82b 	bl	80035fc <siprintf>
 80035a6:	e7cf      	b.n	8003548 <_scanf_float+0x378>
 80035a8:	f011 0f04 	tst.w	r1, #4
 80035ac:	9903      	ldr	r1, [sp, #12]
 80035ae:	600a      	str	r2, [r1, #0]
 80035b0:	d1db      	bne.n	800356a <_scanf_float+0x39a>
 80035b2:	f8d3 8000 	ldr.w	r8, [r3]
 80035b6:	ee10 2a10 	vmov	r2, s0
 80035ba:	ee10 0a10 	vmov	r0, s0
 80035be:	463b      	mov	r3, r7
 80035c0:	4639      	mov	r1, r7
 80035c2:	f7fd fab3 	bl	8000b2c <__aeabi_dcmpun>
 80035c6:	b128      	cbz	r0, 80035d4 <_scanf_float+0x404>
 80035c8:	4808      	ldr	r0, [pc, #32]	; (80035ec <_scanf_float+0x41c>)
 80035ca:	f000 f811 	bl	80035f0 <nanf>
 80035ce:	ed88 0a00 	vstr	s0, [r8]
 80035d2:	e7cd      	b.n	8003570 <_scanf_float+0x3a0>
 80035d4:	4630      	mov	r0, r6
 80035d6:	4639      	mov	r1, r7
 80035d8:	f7fd fb06 	bl	8000be8 <__aeabi_d2f>
 80035dc:	f8c8 0000 	str.w	r0, [r8]
 80035e0:	e7c6      	b.n	8003570 <_scanf_float+0x3a0>
 80035e2:	2500      	movs	r5, #0
 80035e4:	e635      	b.n	8003252 <_scanf_float+0x82>
 80035e6:	bf00      	nop
 80035e8:	0800722c 	.word	0x0800722c
 80035ec:	08007648 	.word	0x08007648

080035f0 <nanf>:
 80035f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80035f8 <nanf+0x8>
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	7fc00000 	.word	0x7fc00000

080035fc <siprintf>:
 80035fc:	b40e      	push	{r1, r2, r3}
 80035fe:	b500      	push	{lr}
 8003600:	b09c      	sub	sp, #112	; 0x70
 8003602:	ab1d      	add	r3, sp, #116	; 0x74
 8003604:	9002      	str	r0, [sp, #8]
 8003606:	9006      	str	r0, [sp, #24]
 8003608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800360c:	4809      	ldr	r0, [pc, #36]	; (8003634 <siprintf+0x38>)
 800360e:	9107      	str	r1, [sp, #28]
 8003610:	9104      	str	r1, [sp, #16]
 8003612:	4909      	ldr	r1, [pc, #36]	; (8003638 <siprintf+0x3c>)
 8003614:	f853 2b04 	ldr.w	r2, [r3], #4
 8003618:	9105      	str	r1, [sp, #20]
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	a902      	add	r1, sp, #8
 8003620:	f002 feb6 	bl	8006390 <_svfiprintf_r>
 8003624:	9b02      	ldr	r3, [sp, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	b01c      	add	sp, #112	; 0x70
 800362c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003630:	b003      	add	sp, #12
 8003632:	4770      	bx	lr
 8003634:	20000004 	.word	0x20000004
 8003638:	ffff0208 	.word	0xffff0208

0800363c <strcat>:
 800363c:	b510      	push	{r4, lr}
 800363e:	4602      	mov	r2, r0
 8003640:	7814      	ldrb	r4, [r2, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	3201      	adds	r2, #1
 8003646:	2c00      	cmp	r4, #0
 8003648:	d1fa      	bne.n	8003640 <strcat+0x4>
 800364a:	3b01      	subs	r3, #1
 800364c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003650:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003654:	2a00      	cmp	r2, #0
 8003656:	d1f9      	bne.n	800364c <strcat+0x10>
 8003658:	bd10      	pop	{r4, pc}

0800365a <sulp>:
 800365a:	b570      	push	{r4, r5, r6, lr}
 800365c:	4604      	mov	r4, r0
 800365e:	460d      	mov	r5, r1
 8003660:	ec45 4b10 	vmov	d0, r4, r5
 8003664:	4616      	mov	r6, r2
 8003666:	f002 fc2f 	bl	8005ec8 <__ulp>
 800366a:	ec51 0b10 	vmov	r0, r1, d0
 800366e:	b17e      	cbz	r6, 8003690 <sulp+0x36>
 8003670:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003674:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003678:	2b00      	cmp	r3, #0
 800367a:	dd09      	ble.n	8003690 <sulp+0x36>
 800367c:	051b      	lsls	r3, r3, #20
 800367e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003682:	2400      	movs	r4, #0
 8003684:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003688:	4622      	mov	r2, r4
 800368a:	462b      	mov	r3, r5
 800368c:	f7fc ffb4 	bl	80005f8 <__aeabi_dmul>
 8003690:	bd70      	pop	{r4, r5, r6, pc}
 8003692:	0000      	movs	r0, r0
 8003694:	0000      	movs	r0, r0
	...

08003698 <_strtod_l>:
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	b0a3      	sub	sp, #140	; 0x8c
 800369e:	461f      	mov	r7, r3
 80036a0:	2300      	movs	r3, #0
 80036a2:	931e      	str	r3, [sp, #120]	; 0x78
 80036a4:	4ba4      	ldr	r3, [pc, #656]	; (8003938 <_strtod_l+0x2a0>)
 80036a6:	9219      	str	r2, [sp, #100]	; 0x64
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	9307      	str	r3, [sp, #28]
 80036ac:	4604      	mov	r4, r0
 80036ae:	4618      	mov	r0, r3
 80036b0:	4688      	mov	r8, r1
 80036b2:	f7fc fd8d 	bl	80001d0 <strlen>
 80036b6:	f04f 0a00 	mov.w	sl, #0
 80036ba:	4605      	mov	r5, r0
 80036bc:	f04f 0b00 	mov.w	fp, #0
 80036c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80036c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	2a2b      	cmp	r2, #43	; 0x2b
 80036ca:	d04c      	beq.n	8003766 <_strtod_l+0xce>
 80036cc:	d839      	bhi.n	8003742 <_strtod_l+0xaa>
 80036ce:	2a0d      	cmp	r2, #13
 80036d0:	d832      	bhi.n	8003738 <_strtod_l+0xa0>
 80036d2:	2a08      	cmp	r2, #8
 80036d4:	d832      	bhi.n	800373c <_strtod_l+0xa4>
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	d03c      	beq.n	8003754 <_strtod_l+0xbc>
 80036da:	2300      	movs	r3, #0
 80036dc:	930e      	str	r3, [sp, #56]	; 0x38
 80036de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80036e0:	7833      	ldrb	r3, [r6, #0]
 80036e2:	2b30      	cmp	r3, #48	; 0x30
 80036e4:	f040 80b4 	bne.w	8003850 <_strtod_l+0x1b8>
 80036e8:	7873      	ldrb	r3, [r6, #1]
 80036ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80036ee:	2b58      	cmp	r3, #88	; 0x58
 80036f0:	d16c      	bne.n	80037cc <_strtod_l+0x134>
 80036f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	ab1e      	add	r3, sp, #120	; 0x78
 80036f8:	9702      	str	r7, [sp, #8]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4a8f      	ldr	r2, [pc, #572]	; (800393c <_strtod_l+0x2a4>)
 80036fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8003700:	a91d      	add	r1, sp, #116	; 0x74
 8003702:	4620      	mov	r0, r4
 8003704:	f001 fd40 	bl	8005188 <__gethex>
 8003708:	f010 0707 	ands.w	r7, r0, #7
 800370c:	4605      	mov	r5, r0
 800370e:	d005      	beq.n	800371c <_strtod_l+0x84>
 8003710:	2f06      	cmp	r7, #6
 8003712:	d12a      	bne.n	800376a <_strtod_l+0xd2>
 8003714:	3601      	adds	r6, #1
 8003716:	2300      	movs	r3, #0
 8003718:	961d      	str	r6, [sp, #116]	; 0x74
 800371a:	930e      	str	r3, [sp, #56]	; 0x38
 800371c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 8596 	bne.w	8004250 <_strtod_l+0xbb8>
 8003724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003726:	b1db      	cbz	r3, 8003760 <_strtod_l+0xc8>
 8003728:	4652      	mov	r2, sl
 800372a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800372e:	ec43 2b10 	vmov	d0, r2, r3
 8003732:	b023      	add	sp, #140	; 0x8c
 8003734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003738:	2a20      	cmp	r2, #32
 800373a:	d1ce      	bne.n	80036da <_strtod_l+0x42>
 800373c:	3301      	adds	r3, #1
 800373e:	931d      	str	r3, [sp, #116]	; 0x74
 8003740:	e7c0      	b.n	80036c4 <_strtod_l+0x2c>
 8003742:	2a2d      	cmp	r2, #45	; 0x2d
 8003744:	d1c9      	bne.n	80036da <_strtod_l+0x42>
 8003746:	2201      	movs	r2, #1
 8003748:	920e      	str	r2, [sp, #56]	; 0x38
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	921d      	str	r2, [sp, #116]	; 0x74
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1c4      	bne.n	80036de <_strtod_l+0x46>
 8003754:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003756:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8576 	bne.w	800424c <_strtod_l+0xbb4>
 8003760:	4652      	mov	r2, sl
 8003762:	465b      	mov	r3, fp
 8003764:	e7e3      	b.n	800372e <_strtod_l+0x96>
 8003766:	2200      	movs	r2, #0
 8003768:	e7ee      	b.n	8003748 <_strtod_l+0xb0>
 800376a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800376c:	b13a      	cbz	r2, 800377e <_strtod_l+0xe6>
 800376e:	2135      	movs	r1, #53	; 0x35
 8003770:	a820      	add	r0, sp, #128	; 0x80
 8003772:	f002 fcb4 	bl	80060de <__copybits>
 8003776:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003778:	4620      	mov	r0, r4
 800377a:	f002 f879 	bl	8005870 <_Bfree>
 800377e:	3f01      	subs	r7, #1
 8003780:	2f05      	cmp	r7, #5
 8003782:	d807      	bhi.n	8003794 <_strtod_l+0xfc>
 8003784:	e8df f007 	tbb	[pc, r7]
 8003788:	1d180b0e 	.word	0x1d180b0e
 800378c:	030e      	.short	0x030e
 800378e:	f04f 0b00 	mov.w	fp, #0
 8003792:	46da      	mov	sl, fp
 8003794:	0728      	lsls	r0, r5, #28
 8003796:	d5c1      	bpl.n	800371c <_strtod_l+0x84>
 8003798:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800379c:	e7be      	b.n	800371c <_strtod_l+0x84>
 800379e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80037a2:	e7f7      	b.n	8003794 <_strtod_l+0xfc>
 80037a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80037a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80037aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80037b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80037b6:	e7ed      	b.n	8003794 <_strtod_l+0xfc>
 80037b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003940 <_strtod_l+0x2a8>
 80037bc:	f04f 0a00 	mov.w	sl, #0
 80037c0:	e7e8      	b.n	8003794 <_strtod_l+0xfc>
 80037c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80037c6:	f04f 3aff 	mov.w	sl, #4294967295
 80037ca:	e7e3      	b.n	8003794 <_strtod_l+0xfc>
 80037cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	921d      	str	r2, [sp, #116]	; 0x74
 80037d2:	785b      	ldrb	r3, [r3, #1]
 80037d4:	2b30      	cmp	r3, #48	; 0x30
 80037d6:	d0f9      	beq.n	80037cc <_strtod_l+0x134>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d09f      	beq.n	800371c <_strtod_l+0x84>
 80037dc:	2301      	movs	r3, #1
 80037de:	f04f 0900 	mov.w	r9, #0
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80037e6:	930a      	str	r3, [sp, #40]	; 0x28
 80037e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80037ec:	464f      	mov	r7, r9
 80037ee:	220a      	movs	r2, #10
 80037f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80037f2:	7806      	ldrb	r6, [r0, #0]
 80037f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80037f8:	b2d9      	uxtb	r1, r3
 80037fa:	2909      	cmp	r1, #9
 80037fc:	d92a      	bls.n	8003854 <_strtod_l+0x1bc>
 80037fe:	9907      	ldr	r1, [sp, #28]
 8003800:	462a      	mov	r2, r5
 8003802:	f002 fedd 	bl	80065c0 <strncmp>
 8003806:	b398      	cbz	r0, 8003870 <_strtod_l+0x1d8>
 8003808:	2000      	movs	r0, #0
 800380a:	4633      	mov	r3, r6
 800380c:	463d      	mov	r5, r7
 800380e:	9007      	str	r0, [sp, #28]
 8003810:	4602      	mov	r2, r0
 8003812:	2b65      	cmp	r3, #101	; 0x65
 8003814:	d001      	beq.n	800381a <_strtod_l+0x182>
 8003816:	2b45      	cmp	r3, #69	; 0x45
 8003818:	d118      	bne.n	800384c <_strtod_l+0x1b4>
 800381a:	b91d      	cbnz	r5, 8003824 <_strtod_l+0x18c>
 800381c:	9b04      	ldr	r3, [sp, #16]
 800381e:	4303      	orrs	r3, r0
 8003820:	d098      	beq.n	8003754 <_strtod_l+0xbc>
 8003822:	2500      	movs	r5, #0
 8003824:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8003828:	f108 0301 	add.w	r3, r8, #1
 800382c:	931d      	str	r3, [sp, #116]	; 0x74
 800382e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003832:	2b2b      	cmp	r3, #43	; 0x2b
 8003834:	d075      	beq.n	8003922 <_strtod_l+0x28a>
 8003836:	2b2d      	cmp	r3, #45	; 0x2d
 8003838:	d07b      	beq.n	8003932 <_strtod_l+0x29a>
 800383a:	f04f 0c00 	mov.w	ip, #0
 800383e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003842:	2909      	cmp	r1, #9
 8003844:	f240 8082 	bls.w	800394c <_strtod_l+0x2b4>
 8003848:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800384c:	2600      	movs	r6, #0
 800384e:	e09d      	b.n	800398c <_strtod_l+0x2f4>
 8003850:	2300      	movs	r3, #0
 8003852:	e7c4      	b.n	80037de <_strtod_l+0x146>
 8003854:	2f08      	cmp	r7, #8
 8003856:	bfd8      	it	le
 8003858:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800385a:	f100 0001 	add.w	r0, r0, #1
 800385e:	bfda      	itte	le
 8003860:	fb02 3301 	mlale	r3, r2, r1, r3
 8003864:	9309      	strle	r3, [sp, #36]	; 0x24
 8003866:	fb02 3909 	mlagt	r9, r2, r9, r3
 800386a:	3701      	adds	r7, #1
 800386c:	901d      	str	r0, [sp, #116]	; 0x74
 800386e:	e7bf      	b.n	80037f0 <_strtod_l+0x158>
 8003870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003872:	195a      	adds	r2, r3, r5
 8003874:	921d      	str	r2, [sp, #116]	; 0x74
 8003876:	5d5b      	ldrb	r3, [r3, r5]
 8003878:	2f00      	cmp	r7, #0
 800387a:	d037      	beq.n	80038ec <_strtod_l+0x254>
 800387c:	9007      	str	r0, [sp, #28]
 800387e:	463d      	mov	r5, r7
 8003880:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003884:	2a09      	cmp	r2, #9
 8003886:	d912      	bls.n	80038ae <_strtod_l+0x216>
 8003888:	2201      	movs	r2, #1
 800388a:	e7c2      	b.n	8003812 <_strtod_l+0x17a>
 800388c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	921d      	str	r2, [sp, #116]	; 0x74
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	3001      	adds	r0, #1
 8003896:	2b30      	cmp	r3, #48	; 0x30
 8003898:	d0f8      	beq.n	800388c <_strtod_l+0x1f4>
 800389a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800389e:	2a08      	cmp	r2, #8
 80038a0:	f200 84db 	bhi.w	800425a <_strtod_l+0xbc2>
 80038a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80038a6:	9007      	str	r0, [sp, #28]
 80038a8:	2000      	movs	r0, #0
 80038aa:	920a      	str	r2, [sp, #40]	; 0x28
 80038ac:	4605      	mov	r5, r0
 80038ae:	3b30      	subs	r3, #48	; 0x30
 80038b0:	f100 0201 	add.w	r2, r0, #1
 80038b4:	d014      	beq.n	80038e0 <_strtod_l+0x248>
 80038b6:	9907      	ldr	r1, [sp, #28]
 80038b8:	4411      	add	r1, r2
 80038ba:	9107      	str	r1, [sp, #28]
 80038bc:	462a      	mov	r2, r5
 80038be:	eb00 0e05 	add.w	lr, r0, r5
 80038c2:	210a      	movs	r1, #10
 80038c4:	4572      	cmp	r2, lr
 80038c6:	d113      	bne.n	80038f0 <_strtod_l+0x258>
 80038c8:	182a      	adds	r2, r5, r0
 80038ca:	2a08      	cmp	r2, #8
 80038cc:	f105 0501 	add.w	r5, r5, #1
 80038d0:	4405      	add	r5, r0
 80038d2:	dc1c      	bgt.n	800390e <_strtod_l+0x276>
 80038d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038d6:	220a      	movs	r2, #10
 80038d8:	fb02 3301 	mla	r3, r2, r1, r3
 80038dc:	9309      	str	r3, [sp, #36]	; 0x24
 80038de:	2200      	movs	r2, #0
 80038e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80038e2:	1c59      	adds	r1, r3, #1
 80038e4:	911d      	str	r1, [sp, #116]	; 0x74
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	4610      	mov	r0, r2
 80038ea:	e7c9      	b.n	8003880 <_strtod_l+0x1e8>
 80038ec:	4638      	mov	r0, r7
 80038ee:	e7d2      	b.n	8003896 <_strtod_l+0x1fe>
 80038f0:	2a08      	cmp	r2, #8
 80038f2:	dc04      	bgt.n	80038fe <_strtod_l+0x266>
 80038f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80038f6:	434e      	muls	r6, r1
 80038f8:	9609      	str	r6, [sp, #36]	; 0x24
 80038fa:	3201      	adds	r2, #1
 80038fc:	e7e2      	b.n	80038c4 <_strtod_l+0x22c>
 80038fe:	f102 0c01 	add.w	ip, r2, #1
 8003902:	f1bc 0f10 	cmp.w	ip, #16
 8003906:	bfd8      	it	le
 8003908:	fb01 f909 	mulle.w	r9, r1, r9
 800390c:	e7f5      	b.n	80038fa <_strtod_l+0x262>
 800390e:	2d10      	cmp	r5, #16
 8003910:	bfdc      	itt	le
 8003912:	220a      	movle	r2, #10
 8003914:	fb02 3909 	mlale	r9, r2, r9, r3
 8003918:	e7e1      	b.n	80038de <_strtod_l+0x246>
 800391a:	2300      	movs	r3, #0
 800391c:	9307      	str	r3, [sp, #28]
 800391e:	2201      	movs	r2, #1
 8003920:	e77c      	b.n	800381c <_strtod_l+0x184>
 8003922:	f04f 0c00 	mov.w	ip, #0
 8003926:	f108 0302 	add.w	r3, r8, #2
 800392a:	931d      	str	r3, [sp, #116]	; 0x74
 800392c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8003930:	e785      	b.n	800383e <_strtod_l+0x1a6>
 8003932:	f04f 0c01 	mov.w	ip, #1
 8003936:	e7f6      	b.n	8003926 <_strtod_l+0x28e>
 8003938:	08007488 	.word	0x08007488
 800393c:	08007234 	.word	0x08007234
 8003940:	7ff00000 	.word	0x7ff00000
 8003944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	911d      	str	r1, [sp, #116]	; 0x74
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d0f9      	beq.n	8003944 <_strtod_l+0x2ac>
 8003950:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003954:	2908      	cmp	r1, #8
 8003956:	f63f af79 	bhi.w	800384c <_strtod_l+0x1b4>
 800395a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800395e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003960:	9308      	str	r3, [sp, #32]
 8003962:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	911d      	str	r1, [sp, #116]	; 0x74
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800396e:	2e09      	cmp	r6, #9
 8003970:	d937      	bls.n	80039e2 <_strtod_l+0x34a>
 8003972:	9e08      	ldr	r6, [sp, #32]
 8003974:	1b89      	subs	r1, r1, r6
 8003976:	2908      	cmp	r1, #8
 8003978:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800397c:	dc02      	bgt.n	8003984 <_strtod_l+0x2ec>
 800397e:	4576      	cmp	r6, lr
 8003980:	bfa8      	it	ge
 8003982:	4676      	movge	r6, lr
 8003984:	f1bc 0f00 	cmp.w	ip, #0
 8003988:	d000      	beq.n	800398c <_strtod_l+0x2f4>
 800398a:	4276      	negs	r6, r6
 800398c:	2d00      	cmp	r5, #0
 800398e:	d14f      	bne.n	8003a30 <_strtod_l+0x398>
 8003990:	9904      	ldr	r1, [sp, #16]
 8003992:	4301      	orrs	r1, r0
 8003994:	f47f aec2 	bne.w	800371c <_strtod_l+0x84>
 8003998:	2a00      	cmp	r2, #0
 800399a:	f47f aedb 	bne.w	8003754 <_strtod_l+0xbc>
 800399e:	2b69      	cmp	r3, #105	; 0x69
 80039a0:	d027      	beq.n	80039f2 <_strtod_l+0x35a>
 80039a2:	dc24      	bgt.n	80039ee <_strtod_l+0x356>
 80039a4:	2b49      	cmp	r3, #73	; 0x49
 80039a6:	d024      	beq.n	80039f2 <_strtod_l+0x35a>
 80039a8:	2b4e      	cmp	r3, #78	; 0x4e
 80039aa:	f47f aed3 	bne.w	8003754 <_strtod_l+0xbc>
 80039ae:	499e      	ldr	r1, [pc, #632]	; (8003c28 <_strtod_l+0x590>)
 80039b0:	a81d      	add	r0, sp, #116	; 0x74
 80039b2:	f001 fe41 	bl	8005638 <__match>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f43f aecc 	beq.w	8003754 <_strtod_l+0xbc>
 80039bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b28      	cmp	r3, #40	; 0x28
 80039c2:	d12d      	bne.n	8003a20 <_strtod_l+0x388>
 80039c4:	4999      	ldr	r1, [pc, #612]	; (8003c2c <_strtod_l+0x594>)
 80039c6:	aa20      	add	r2, sp, #128	; 0x80
 80039c8:	a81d      	add	r0, sp, #116	; 0x74
 80039ca:	f001 fe49 	bl	8005660 <__hexnan>
 80039ce:	2805      	cmp	r0, #5
 80039d0:	d126      	bne.n	8003a20 <_strtod_l+0x388>
 80039d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80039d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80039dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80039e0:	e69c      	b.n	800371c <_strtod_l+0x84>
 80039e2:	210a      	movs	r1, #10
 80039e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80039e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80039ec:	e7b9      	b.n	8003962 <_strtod_l+0x2ca>
 80039ee:	2b6e      	cmp	r3, #110	; 0x6e
 80039f0:	e7db      	b.n	80039aa <_strtod_l+0x312>
 80039f2:	498f      	ldr	r1, [pc, #572]	; (8003c30 <_strtod_l+0x598>)
 80039f4:	a81d      	add	r0, sp, #116	; 0x74
 80039f6:	f001 fe1f 	bl	8005638 <__match>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	f43f aeaa 	beq.w	8003754 <_strtod_l+0xbc>
 8003a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a02:	498c      	ldr	r1, [pc, #560]	; (8003c34 <_strtod_l+0x59c>)
 8003a04:	3b01      	subs	r3, #1
 8003a06:	a81d      	add	r0, sp, #116	; 0x74
 8003a08:	931d      	str	r3, [sp, #116]	; 0x74
 8003a0a:	f001 fe15 	bl	8005638 <__match>
 8003a0e:	b910      	cbnz	r0, 8003a16 <_strtod_l+0x37e>
 8003a10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a12:	3301      	adds	r3, #1
 8003a14:	931d      	str	r3, [sp, #116]	; 0x74
 8003a16:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8003c44 <_strtod_l+0x5ac>
 8003a1a:	f04f 0a00 	mov.w	sl, #0
 8003a1e:	e67d      	b.n	800371c <_strtod_l+0x84>
 8003a20:	4885      	ldr	r0, [pc, #532]	; (8003c38 <_strtod_l+0x5a0>)
 8003a22:	f002 fdb5 	bl	8006590 <nan>
 8003a26:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003a2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003a2e:	e675      	b.n	800371c <_strtod_l+0x84>
 8003a30:	9b07      	ldr	r3, [sp, #28]
 8003a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a34:	1af3      	subs	r3, r6, r3
 8003a36:	2f00      	cmp	r7, #0
 8003a38:	bf08      	it	eq
 8003a3a:	462f      	moveq	r7, r5
 8003a3c:	2d10      	cmp	r5, #16
 8003a3e:	9308      	str	r3, [sp, #32]
 8003a40:	46a8      	mov	r8, r5
 8003a42:	bfa8      	it	ge
 8003a44:	f04f 0810 	movge.w	r8, #16
 8003a48:	f7fc fd5c 	bl	8000504 <__aeabi_ui2d>
 8003a4c:	2d09      	cmp	r5, #9
 8003a4e:	4682      	mov	sl, r0
 8003a50:	468b      	mov	fp, r1
 8003a52:	dd13      	ble.n	8003a7c <_strtod_l+0x3e4>
 8003a54:	4b79      	ldr	r3, [pc, #484]	; (8003c3c <_strtod_l+0x5a4>)
 8003a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003a5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003a5e:	f7fc fdcb 	bl	80005f8 <__aeabi_dmul>
 8003a62:	4682      	mov	sl, r0
 8003a64:	4648      	mov	r0, r9
 8003a66:	468b      	mov	fp, r1
 8003a68:	f7fc fd4c 	bl	8000504 <__aeabi_ui2d>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4650      	mov	r0, sl
 8003a72:	4659      	mov	r1, fp
 8003a74:	f7fc fc0a 	bl	800028c <__adddf3>
 8003a78:	4682      	mov	sl, r0
 8003a7a:	468b      	mov	fp, r1
 8003a7c:	2d0f      	cmp	r5, #15
 8003a7e:	dc38      	bgt.n	8003af2 <_strtod_l+0x45a>
 8003a80:	9b08      	ldr	r3, [sp, #32]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f43f ae4a 	beq.w	800371c <_strtod_l+0x84>
 8003a88:	dd24      	ble.n	8003ad4 <_strtod_l+0x43c>
 8003a8a:	2b16      	cmp	r3, #22
 8003a8c:	dc0b      	bgt.n	8003aa6 <_strtod_l+0x40e>
 8003a8e:	4d6b      	ldr	r5, [pc, #428]	; (8003c3c <_strtod_l+0x5a4>)
 8003a90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8003a94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003a98:	4652      	mov	r2, sl
 8003a9a:	465b      	mov	r3, fp
 8003a9c:	f7fc fdac 	bl	80005f8 <__aeabi_dmul>
 8003aa0:	4682      	mov	sl, r0
 8003aa2:	468b      	mov	fp, r1
 8003aa4:	e63a      	b.n	800371c <_strtod_l+0x84>
 8003aa6:	9a08      	ldr	r2, [sp, #32]
 8003aa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003aac:	4293      	cmp	r3, r2
 8003aae:	db20      	blt.n	8003af2 <_strtod_l+0x45a>
 8003ab0:	4c62      	ldr	r4, [pc, #392]	; (8003c3c <_strtod_l+0x5a4>)
 8003ab2:	f1c5 050f 	rsb	r5, r5, #15
 8003ab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003aba:	4652      	mov	r2, sl
 8003abc:	465b      	mov	r3, fp
 8003abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ac2:	f7fc fd99 	bl	80005f8 <__aeabi_dmul>
 8003ac6:	9b08      	ldr	r3, [sp, #32]
 8003ac8:	1b5d      	subs	r5, r3, r5
 8003aca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003ace:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ad2:	e7e3      	b.n	8003a9c <_strtod_l+0x404>
 8003ad4:	9b08      	ldr	r3, [sp, #32]
 8003ad6:	3316      	adds	r3, #22
 8003ad8:	db0b      	blt.n	8003af2 <_strtod_l+0x45a>
 8003ada:	9b07      	ldr	r3, [sp, #28]
 8003adc:	4a57      	ldr	r2, [pc, #348]	; (8003c3c <_strtod_l+0x5a4>)
 8003ade:	1b9e      	subs	r6, r3, r6
 8003ae0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ae8:	4650      	mov	r0, sl
 8003aea:	4659      	mov	r1, fp
 8003aec:	f7fc feae 	bl	800084c <__aeabi_ddiv>
 8003af0:	e7d6      	b.n	8003aa0 <_strtod_l+0x408>
 8003af2:	9b08      	ldr	r3, [sp, #32]
 8003af4:	eba5 0808 	sub.w	r8, r5, r8
 8003af8:	4498      	add	r8, r3
 8003afa:	f1b8 0f00 	cmp.w	r8, #0
 8003afe:	dd71      	ble.n	8003be4 <_strtod_l+0x54c>
 8003b00:	f018 030f 	ands.w	r3, r8, #15
 8003b04:	d00a      	beq.n	8003b1c <_strtod_l+0x484>
 8003b06:	494d      	ldr	r1, [pc, #308]	; (8003c3c <_strtod_l+0x5a4>)
 8003b08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003b0c:	4652      	mov	r2, sl
 8003b0e:	465b      	mov	r3, fp
 8003b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b14:	f7fc fd70 	bl	80005f8 <__aeabi_dmul>
 8003b18:	4682      	mov	sl, r0
 8003b1a:	468b      	mov	fp, r1
 8003b1c:	f038 080f 	bics.w	r8, r8, #15
 8003b20:	d04d      	beq.n	8003bbe <_strtod_l+0x526>
 8003b22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003b26:	dd22      	ble.n	8003b6e <_strtod_l+0x4d6>
 8003b28:	2500      	movs	r5, #0
 8003b2a:	462e      	mov	r6, r5
 8003b2c:	9509      	str	r5, [sp, #36]	; 0x24
 8003b2e:	9507      	str	r5, [sp, #28]
 8003b30:	2322      	movs	r3, #34	; 0x22
 8003b32:	f8df b110 	ldr.w	fp, [pc, #272]	; 8003c44 <_strtod_l+0x5ac>
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	f04f 0a00 	mov.w	sl, #0
 8003b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f43f adec 	beq.w	800371c <_strtod_l+0x84>
 8003b44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003b46:	4620      	mov	r0, r4
 8003b48:	f001 fe92 	bl	8005870 <_Bfree>
 8003b4c:	9907      	ldr	r1, [sp, #28]
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f001 fe8e 	bl	8005870 <_Bfree>
 8003b54:	4631      	mov	r1, r6
 8003b56:	4620      	mov	r0, r4
 8003b58:	f001 fe8a 	bl	8005870 <_Bfree>
 8003b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f001 fe86 	bl	8005870 <_Bfree>
 8003b64:	4629      	mov	r1, r5
 8003b66:	4620      	mov	r0, r4
 8003b68:	f001 fe82 	bl	8005870 <_Bfree>
 8003b6c:	e5d6      	b.n	800371c <_strtod_l+0x84>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003b74:	4650      	mov	r0, sl
 8003b76:	4659      	mov	r1, fp
 8003b78:	4699      	mov	r9, r3
 8003b7a:	f1b8 0f01 	cmp.w	r8, #1
 8003b7e:	dc21      	bgt.n	8003bc4 <_strtod_l+0x52c>
 8003b80:	b10b      	cbz	r3, 8003b86 <_strtod_l+0x4ee>
 8003b82:	4682      	mov	sl, r0
 8003b84:	468b      	mov	fp, r1
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <_strtod_l+0x5a8>)
 8003b88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003b8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003b90:	4652      	mov	r2, sl
 8003b92:	465b      	mov	r3, fp
 8003b94:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003b98:	f7fc fd2e 	bl	80005f8 <__aeabi_dmul>
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <_strtod_l+0x5ac>)
 8003b9e:	460a      	mov	r2, r1
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	4929      	ldr	r1, [pc, #164]	; (8003c48 <_strtod_l+0x5b0>)
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	4682      	mov	sl, r0
 8003ba8:	d8be      	bhi.n	8003b28 <_strtod_l+0x490>
 8003baa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003bae:	428b      	cmp	r3, r1
 8003bb0:	bf86      	itte	hi
 8003bb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8003c4c <_strtod_l+0x5b4>
 8003bb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8003bba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	e081      	b.n	8003cc8 <_strtod_l+0x630>
 8003bc4:	f018 0f01 	tst.w	r8, #1
 8003bc8:	d007      	beq.n	8003bda <_strtod_l+0x542>
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <_strtod_l+0x5a8>)
 8003bcc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fd10 	bl	80005f8 <__aeabi_dmul>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f109 0901 	add.w	r9, r9, #1
 8003bde:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003be2:	e7ca      	b.n	8003b7a <_strtod_l+0x4e2>
 8003be4:	d0eb      	beq.n	8003bbe <_strtod_l+0x526>
 8003be6:	f1c8 0800 	rsb	r8, r8, #0
 8003bea:	f018 020f 	ands.w	r2, r8, #15
 8003bee:	d00a      	beq.n	8003c06 <_strtod_l+0x56e>
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <_strtod_l+0x5a4>)
 8003bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bf6:	4650      	mov	r0, sl
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc fe25 	bl	800084c <__aeabi_ddiv>
 8003c02:	4682      	mov	sl, r0
 8003c04:	468b      	mov	fp, r1
 8003c06:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003c0a:	d0d8      	beq.n	8003bbe <_strtod_l+0x526>
 8003c0c:	f1b8 0f1f 	cmp.w	r8, #31
 8003c10:	dd1e      	ble.n	8003c50 <_strtod_l+0x5b8>
 8003c12:	2500      	movs	r5, #0
 8003c14:	462e      	mov	r6, r5
 8003c16:	9509      	str	r5, [sp, #36]	; 0x24
 8003c18:	9507      	str	r5, [sp, #28]
 8003c1a:	2322      	movs	r3, #34	; 0x22
 8003c1c:	f04f 0a00 	mov.w	sl, #0
 8003c20:	f04f 0b00 	mov.w	fp, #0
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	e789      	b.n	8003b3c <_strtod_l+0x4a4>
 8003c28:	08007205 	.word	0x08007205
 8003c2c:	08007248 	.word	0x08007248
 8003c30:	080071fd 	.word	0x080071fd
 8003c34:	0800738c 	.word	0x0800738c
 8003c38:	08007648 	.word	0x08007648
 8003c3c:	08007528 	.word	0x08007528
 8003c40:	08007500 	.word	0x08007500
 8003c44:	7ff00000 	.word	0x7ff00000
 8003c48:	7ca00000 	.word	0x7ca00000
 8003c4c:	7fefffff 	.word	0x7fefffff
 8003c50:	f018 0310 	ands.w	r3, r8, #16
 8003c54:	bf18      	it	ne
 8003c56:	236a      	movne	r3, #106	; 0x6a
 8003c58:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004010 <_strtod_l+0x978>
 8003c5c:	9304      	str	r3, [sp, #16]
 8003c5e:	4650      	mov	r0, sl
 8003c60:	4659      	mov	r1, fp
 8003c62:	2300      	movs	r3, #0
 8003c64:	f018 0f01 	tst.w	r8, #1
 8003c68:	d004      	beq.n	8003c74 <_strtod_l+0x5dc>
 8003c6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003c6e:	f7fc fcc3 	bl	80005f8 <__aeabi_dmul>
 8003c72:	2301      	movs	r3, #1
 8003c74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003c78:	f109 0908 	add.w	r9, r9, #8
 8003c7c:	d1f2      	bne.n	8003c64 <_strtod_l+0x5cc>
 8003c7e:	b10b      	cbz	r3, 8003c84 <_strtod_l+0x5ec>
 8003c80:	4682      	mov	sl, r0
 8003c82:	468b      	mov	fp, r1
 8003c84:	9b04      	ldr	r3, [sp, #16]
 8003c86:	b1bb      	cbz	r3, 8003cb8 <_strtod_l+0x620>
 8003c88:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003c8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	4659      	mov	r1, fp
 8003c94:	dd10      	ble.n	8003cb8 <_strtod_l+0x620>
 8003c96:	2b1f      	cmp	r3, #31
 8003c98:	f340 8128 	ble.w	8003eec <_strtod_l+0x854>
 8003c9c:	2b34      	cmp	r3, #52	; 0x34
 8003c9e:	bfde      	ittt	le
 8003ca0:	3b20      	suble	r3, #32
 8003ca2:	f04f 32ff 	movle.w	r2, #4294967295
 8003ca6:	fa02 f303 	lslle.w	r3, r2, r3
 8003caa:	f04f 0a00 	mov.w	sl, #0
 8003cae:	bfcc      	ite	gt
 8003cb0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003cb4:	ea03 0b01 	andle.w	fp, r3, r1
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2300      	movs	r3, #0
 8003cbc:	4650      	mov	r0, sl
 8003cbe:	4659      	mov	r1, fp
 8003cc0:	f7fc ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d1a4      	bne.n	8003c12 <_strtod_l+0x57a>
 8003cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cce:	462b      	mov	r3, r5
 8003cd0:	463a      	mov	r2, r7
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f001 fe38 	bl	8005948 <__s2b>
 8003cd8:	9009      	str	r0, [sp, #36]	; 0x24
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f43f af24 	beq.w	8003b28 <_strtod_l+0x490>
 8003ce0:	9b07      	ldr	r3, [sp, #28]
 8003ce2:	1b9e      	subs	r6, r3, r6
 8003ce4:	9b08      	ldr	r3, [sp, #32]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfb4      	ite	lt
 8003cea:	4633      	movlt	r3, r6
 8003cec:	2300      	movge	r3, #0
 8003cee:	9310      	str	r3, [sp, #64]	; 0x40
 8003cf0:	9b08      	ldr	r3, [sp, #32]
 8003cf2:	2500      	movs	r5, #0
 8003cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003cf8:	9318      	str	r3, [sp, #96]	; 0x60
 8003cfa:	462e      	mov	r6, r5
 8003cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cfe:	4620      	mov	r0, r4
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	f001 fd75 	bl	80057f0 <_Balloc>
 8003d06:	9007      	str	r0, [sp, #28]
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	f43f af11 	beq.w	8003b30 <_strtod_l+0x498>
 8003d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	3202      	adds	r2, #2
 8003d14:	f103 010c 	add.w	r1, r3, #12
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	300c      	adds	r0, #12
 8003d1c:	f001 fd5a 	bl	80057d4 <memcpy>
 8003d20:	ec4b ab10 	vmov	d0, sl, fp
 8003d24:	aa20      	add	r2, sp, #128	; 0x80
 8003d26:	a91f      	add	r1, sp, #124	; 0x7c
 8003d28:	4620      	mov	r0, r4
 8003d2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003d2e:	f002 f947 	bl	8005fc0 <__d2b>
 8003d32:	901e      	str	r0, [sp, #120]	; 0x78
 8003d34:	2800      	cmp	r0, #0
 8003d36:	f43f aefb 	beq.w	8003b30 <_strtod_l+0x498>
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f001 fe9d 	bl	8005a7c <__i2b>
 8003d42:	4606      	mov	r6, r0
 8003d44:	2800      	cmp	r0, #0
 8003d46:	f43f aef3 	beq.w	8003b30 <_strtod_l+0x498>
 8003d4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d4c:	9904      	ldr	r1, [sp, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bfab      	itete	ge
 8003d52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8003d54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8003d56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8003d58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8003d5c:	bfac      	ite	ge
 8003d5e:	eb03 0902 	addge.w	r9, r3, r2
 8003d62:	1ad7      	sublt	r7, r2, r3
 8003d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d66:	eba3 0801 	sub.w	r8, r3, r1
 8003d6a:	4490      	add	r8, r2
 8003d6c:	4ba3      	ldr	r3, [pc, #652]	; (8003ffc <_strtod_l+0x964>)
 8003d6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d72:	4598      	cmp	r8, r3
 8003d74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003d78:	f280 80cc 	bge.w	8003f14 <_strtod_l+0x87c>
 8003d7c:	eba3 0308 	sub.w	r3, r3, r8
 8003d80:	2b1f      	cmp	r3, #31
 8003d82:	eba2 0203 	sub.w	r2, r2, r3
 8003d86:	f04f 0101 	mov.w	r1, #1
 8003d8a:	f300 80b6 	bgt.w	8003efa <_strtod_l+0x862>
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	9311      	str	r3, [sp, #68]	; 0x44
 8003d94:	2300      	movs	r3, #0
 8003d96:	930c      	str	r3, [sp, #48]	; 0x30
 8003d98:	eb09 0802 	add.w	r8, r9, r2
 8003d9c:	9b04      	ldr	r3, [sp, #16]
 8003d9e:	45c1      	cmp	r9, r8
 8003da0:	4417      	add	r7, r2
 8003da2:	441f      	add	r7, r3
 8003da4:	464b      	mov	r3, r9
 8003da6:	bfa8      	it	ge
 8003da8:	4643      	movge	r3, r8
 8003daa:	42bb      	cmp	r3, r7
 8003dac:	bfa8      	it	ge
 8003dae:	463b      	movge	r3, r7
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfc2      	ittt	gt
 8003db4:	eba8 0803 	subgt.w	r8, r8, r3
 8003db8:	1aff      	subgt	r7, r7, r3
 8003dba:	eba9 0903 	subgt.w	r9, r9, r3
 8003dbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	dd17      	ble.n	8003df4 <_strtod_l+0x75c>
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f001 ff13 	bl	8005bf4 <__pow5mult>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	f43f aead 	beq.w	8003b30 <_strtod_l+0x498>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f001 fe64 	bl	8005aa8 <__multiply>
 8003de0:	900f      	str	r0, [sp, #60]	; 0x3c
 8003de2:	2800      	cmp	r0, #0
 8003de4:	f43f aea4 	beq.w	8003b30 <_strtod_l+0x498>
 8003de8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003dea:	4620      	mov	r0, r4
 8003dec:	f001 fd40 	bl	8005870 <_Bfree>
 8003df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003df2:	931e      	str	r3, [sp, #120]	; 0x78
 8003df4:	f1b8 0f00 	cmp.w	r8, #0
 8003df8:	f300 8091 	bgt.w	8003f1e <_strtod_l+0x886>
 8003dfc:	9b08      	ldr	r3, [sp, #32]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dd08      	ble.n	8003e14 <_strtod_l+0x77c>
 8003e02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003e04:	9907      	ldr	r1, [sp, #28]
 8003e06:	4620      	mov	r0, r4
 8003e08:	f001 fef4 	bl	8005bf4 <__pow5mult>
 8003e0c:	9007      	str	r0, [sp, #28]
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	f43f ae8e 	beq.w	8003b30 <_strtod_l+0x498>
 8003e14:	2f00      	cmp	r7, #0
 8003e16:	dd08      	ble.n	8003e2a <_strtod_l+0x792>
 8003e18:	9907      	ldr	r1, [sp, #28]
 8003e1a:	463a      	mov	r2, r7
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f001 ff43 	bl	8005ca8 <__lshift>
 8003e22:	9007      	str	r0, [sp, #28]
 8003e24:	2800      	cmp	r0, #0
 8003e26:	f43f ae83 	beq.w	8003b30 <_strtod_l+0x498>
 8003e2a:	f1b9 0f00 	cmp.w	r9, #0
 8003e2e:	dd08      	ble.n	8003e42 <_strtod_l+0x7aa>
 8003e30:	4631      	mov	r1, r6
 8003e32:	464a      	mov	r2, r9
 8003e34:	4620      	mov	r0, r4
 8003e36:	f001 ff37 	bl	8005ca8 <__lshift>
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f43f ae77 	beq.w	8003b30 <_strtod_l+0x498>
 8003e42:	9a07      	ldr	r2, [sp, #28]
 8003e44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003e46:	4620      	mov	r0, r4
 8003e48:	f001 ffb6 	bl	8005db8 <__mdiff>
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	f43f ae6e 	beq.w	8003b30 <_strtod_l+0x498>
 8003e54:	68c3      	ldr	r3, [r0, #12]
 8003e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60c3      	str	r3, [r0, #12]
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	f001 ff8f 	bl	8005d80 <__mcmp>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	da65      	bge.n	8003f32 <_strtod_l+0x89a>
 8003e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e68:	ea53 030a 	orrs.w	r3, r3, sl
 8003e6c:	f040 8087 	bne.w	8003f7e <_strtod_l+0x8e6>
 8003e70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f040 8082 	bne.w	8003f7e <_strtod_l+0x8e6>
 8003e7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003e7e:	0d1b      	lsrs	r3, r3, #20
 8003e80:	051b      	lsls	r3, r3, #20
 8003e82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003e86:	d97a      	bls.n	8003f7e <_strtod_l+0x8e6>
 8003e88:	696b      	ldr	r3, [r5, #20]
 8003e8a:	b913      	cbnz	r3, 8003e92 <_strtod_l+0x7fa>
 8003e8c:	692b      	ldr	r3, [r5, #16]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	dd75      	ble.n	8003f7e <_strtod_l+0x8e6>
 8003e92:	4629      	mov	r1, r5
 8003e94:	2201      	movs	r2, #1
 8003e96:	4620      	mov	r0, r4
 8003e98:	f001 ff06 	bl	8005ca8 <__lshift>
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4605      	mov	r5, r0
 8003ea0:	f001 ff6e 	bl	8005d80 <__mcmp>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	dd6a      	ble.n	8003f7e <_strtod_l+0x8e6>
 8003ea8:	9904      	ldr	r1, [sp, #16]
 8003eaa:	4a55      	ldr	r2, [pc, #340]	; (8004000 <_strtod_l+0x968>)
 8003eac:	465b      	mov	r3, fp
 8003eae:	2900      	cmp	r1, #0
 8003eb0:	f000 8085 	beq.w	8003fbe <_strtod_l+0x926>
 8003eb4:	ea02 010b 	and.w	r1, r2, fp
 8003eb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003ebc:	dc7f      	bgt.n	8003fbe <_strtod_l+0x926>
 8003ebe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003ec2:	f77f aeaa 	ble.w	8003c1a <_strtod_l+0x582>
 8003ec6:	4a4f      	ldr	r2, [pc, #316]	; (8004004 <_strtod_l+0x96c>)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8003ece:	4650      	mov	r0, sl
 8003ed0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	f7fc fb8f 	bl	80005f8 <__aeabi_dmul>
 8003eda:	460b      	mov	r3, r1
 8003edc:	4303      	orrs	r3, r0
 8003ede:	bf08      	it	eq
 8003ee0:	2322      	moveq	r3, #34	; 0x22
 8003ee2:	4682      	mov	sl, r0
 8003ee4:	468b      	mov	fp, r1
 8003ee6:	bf08      	it	eq
 8003ee8:	6023      	streq	r3, [r4, #0]
 8003eea:	e62b      	b.n	8003b44 <_strtod_l+0x4ac>
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	ea03 0a0a 	and.w	sl, r3, sl
 8003ef8:	e6de      	b.n	8003cb8 <_strtod_l+0x620>
 8003efa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8003efe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8003f02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8003f06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8003f0a:	fa01 f308 	lsl.w	r3, r1, r8
 8003f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f10:	9111      	str	r1, [sp, #68]	; 0x44
 8003f12:	e741      	b.n	8003d98 <_strtod_l+0x700>
 8003f14:	2300      	movs	r3, #0
 8003f16:	930c      	str	r3, [sp, #48]	; 0x30
 8003f18:	2301      	movs	r3, #1
 8003f1a:	9311      	str	r3, [sp, #68]	; 0x44
 8003f1c:	e73c      	b.n	8003d98 <_strtod_l+0x700>
 8003f1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003f20:	4642      	mov	r2, r8
 8003f22:	4620      	mov	r0, r4
 8003f24:	f001 fec0 	bl	8005ca8 <__lshift>
 8003f28:	901e      	str	r0, [sp, #120]	; 0x78
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	f47f af66 	bne.w	8003dfc <_strtod_l+0x764>
 8003f30:	e5fe      	b.n	8003b30 <_strtod_l+0x498>
 8003f32:	465f      	mov	r7, fp
 8003f34:	d16e      	bne.n	8004014 <_strtod_l+0x97c>
 8003f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f3c:	b342      	cbz	r2, 8003f90 <_strtod_l+0x8f8>
 8003f3e:	4a32      	ldr	r2, [pc, #200]	; (8004008 <_strtod_l+0x970>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d128      	bne.n	8003f96 <_strtod_l+0x8fe>
 8003f44:	9b04      	ldr	r3, [sp, #16]
 8003f46:	4650      	mov	r0, sl
 8003f48:	b1eb      	cbz	r3, 8003f86 <_strtod_l+0x8ee>
 8003f4a:	4a2d      	ldr	r2, [pc, #180]	; (8004000 <_strtod_l+0x968>)
 8003f4c:	403a      	ands	r2, r7
 8003f4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8003f52:	f04f 31ff 	mov.w	r1, #4294967295
 8003f56:	d819      	bhi.n	8003f8c <_strtod_l+0x8f4>
 8003f58:	0d12      	lsrs	r2, r2, #20
 8003f5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	4298      	cmp	r0, r3
 8003f64:	d117      	bne.n	8003f96 <_strtod_l+0x8fe>
 8003f66:	4b29      	ldr	r3, [pc, #164]	; (800400c <_strtod_l+0x974>)
 8003f68:	429f      	cmp	r7, r3
 8003f6a:	d102      	bne.n	8003f72 <_strtod_l+0x8da>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	f43f addf 	beq.w	8003b30 <_strtod_l+0x498>
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <_strtod_l+0x968>)
 8003f74:	403b      	ands	r3, r7
 8003f76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8003f7a:	f04f 0a00 	mov.w	sl, #0
 8003f7e:	9b04      	ldr	r3, [sp, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1a0      	bne.n	8003ec6 <_strtod_l+0x82e>
 8003f84:	e5de      	b.n	8003b44 <_strtod_l+0x4ac>
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	e7ea      	b.n	8003f62 <_strtod_l+0x8ca>
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	e7e8      	b.n	8003f62 <_strtod_l+0x8ca>
 8003f90:	ea53 030a 	orrs.w	r3, r3, sl
 8003f94:	d088      	beq.n	8003ea8 <_strtod_l+0x810>
 8003f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f98:	b1db      	cbz	r3, 8003fd2 <_strtod_l+0x93a>
 8003f9a:	423b      	tst	r3, r7
 8003f9c:	d0ef      	beq.n	8003f7e <_strtod_l+0x8e6>
 8003f9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fa0:	9a04      	ldr	r2, [sp, #16]
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	b1c3      	cbz	r3, 8003fda <_strtod_l+0x942>
 8003fa8:	f7ff fb57 	bl	800365a <sulp>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003fb4:	f7fc f96a 	bl	800028c <__adddf3>
 8003fb8:	4682      	mov	sl, r0
 8003fba:	468b      	mov	fp, r1
 8003fbc:	e7df      	b.n	8003f7e <_strtod_l+0x8e6>
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003fc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003fc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003fcc:	f04f 3aff 	mov.w	sl, #4294967295
 8003fd0:	e7d5      	b.n	8003f7e <_strtod_l+0x8e6>
 8003fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fd4:	ea13 0f0a 	tst.w	r3, sl
 8003fd8:	e7e0      	b.n	8003f9c <_strtod_l+0x904>
 8003fda:	f7ff fb3e 	bl	800365a <sulp>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003fe6:	f7fc f94f 	bl	8000288 <__aeabi_dsub>
 8003fea:	2200      	movs	r2, #0
 8003fec:	2300      	movs	r3, #0
 8003fee:	4682      	mov	sl, r0
 8003ff0:	468b      	mov	fp, r1
 8003ff2:	f7fc fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d0c1      	beq.n	8003f7e <_strtod_l+0x8e6>
 8003ffa:	e60e      	b.n	8003c1a <_strtod_l+0x582>
 8003ffc:	fffffc02 	.word	0xfffffc02
 8004000:	7ff00000 	.word	0x7ff00000
 8004004:	39500000 	.word	0x39500000
 8004008:	000fffff 	.word	0x000fffff
 800400c:	7fefffff 	.word	0x7fefffff
 8004010:	08007260 	.word	0x08007260
 8004014:	4631      	mov	r1, r6
 8004016:	4628      	mov	r0, r5
 8004018:	f002 f82e 	bl	8006078 <__ratio>
 800401c:	ec59 8b10 	vmov	r8, r9, d0
 8004020:	ee10 0a10 	vmov	r0, s0
 8004024:	2200      	movs	r2, #0
 8004026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800402a:	4649      	mov	r1, r9
 800402c:	f7fc fd60 	bl	8000af0 <__aeabi_dcmple>
 8004030:	2800      	cmp	r0, #0
 8004032:	d07c      	beq.n	800412e <_strtod_l+0xa96>
 8004034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d04c      	beq.n	80040d4 <_strtod_l+0xa3c>
 800403a:	4b95      	ldr	r3, [pc, #596]	; (8004290 <_strtod_l+0xbf8>)
 800403c:	2200      	movs	r2, #0
 800403e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004042:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004290 <_strtod_l+0xbf8>
 8004046:	f04f 0800 	mov.w	r8, #0
 800404a:	4b92      	ldr	r3, [pc, #584]	; (8004294 <_strtod_l+0xbfc>)
 800404c:	403b      	ands	r3, r7
 800404e:	9311      	str	r3, [sp, #68]	; 0x44
 8004050:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004052:	4b91      	ldr	r3, [pc, #580]	; (8004298 <_strtod_l+0xc00>)
 8004054:	429a      	cmp	r2, r3
 8004056:	f040 80b2 	bne.w	80041be <_strtod_l+0xb26>
 800405a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800405e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004062:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004066:	ec4b ab10 	vmov	d0, sl, fp
 800406a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800406e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004072:	f001 ff29 	bl	8005ec8 <__ulp>
 8004076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800407a:	ec53 2b10 	vmov	r2, r3, d0
 800407e:	f7fc fabb 	bl	80005f8 <__aeabi_dmul>
 8004082:	4652      	mov	r2, sl
 8004084:	465b      	mov	r3, fp
 8004086:	f7fc f901 	bl	800028c <__adddf3>
 800408a:	460b      	mov	r3, r1
 800408c:	4981      	ldr	r1, [pc, #516]	; (8004294 <_strtod_l+0xbfc>)
 800408e:	4a83      	ldr	r2, [pc, #524]	; (800429c <_strtod_l+0xc04>)
 8004090:	4019      	ands	r1, r3
 8004092:	4291      	cmp	r1, r2
 8004094:	4682      	mov	sl, r0
 8004096:	d95e      	bls.n	8004156 <_strtod_l+0xabe>
 8004098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800409a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800409e:	4293      	cmp	r3, r2
 80040a0:	d103      	bne.n	80040aa <_strtod_l+0xa12>
 80040a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040a4:	3301      	adds	r3, #1
 80040a6:	f43f ad43 	beq.w	8003b30 <_strtod_l+0x498>
 80040aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80042a8 <_strtod_l+0xc10>
 80040ae:	f04f 3aff 	mov.w	sl, #4294967295
 80040b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80040b4:	4620      	mov	r0, r4
 80040b6:	f001 fbdb 	bl	8005870 <_Bfree>
 80040ba:	9907      	ldr	r1, [sp, #28]
 80040bc:	4620      	mov	r0, r4
 80040be:	f001 fbd7 	bl	8005870 <_Bfree>
 80040c2:	4631      	mov	r1, r6
 80040c4:	4620      	mov	r0, r4
 80040c6:	f001 fbd3 	bl	8005870 <_Bfree>
 80040ca:	4629      	mov	r1, r5
 80040cc:	4620      	mov	r0, r4
 80040ce:	f001 fbcf 	bl	8005870 <_Bfree>
 80040d2:	e613      	b.n	8003cfc <_strtod_l+0x664>
 80040d4:	f1ba 0f00 	cmp.w	sl, #0
 80040d8:	d11b      	bne.n	8004112 <_strtod_l+0xa7a>
 80040da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040de:	b9f3      	cbnz	r3, 800411e <_strtod_l+0xa86>
 80040e0:	4b6b      	ldr	r3, [pc, #428]	; (8004290 <_strtod_l+0xbf8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	4640      	mov	r0, r8
 80040e6:	4649      	mov	r1, r9
 80040e8:	f7fc fcf8 	bl	8000adc <__aeabi_dcmplt>
 80040ec:	b9d0      	cbnz	r0, 8004124 <_strtod_l+0xa8c>
 80040ee:	4640      	mov	r0, r8
 80040f0:	4649      	mov	r1, r9
 80040f2:	4b6b      	ldr	r3, [pc, #428]	; (80042a0 <_strtod_l+0xc08>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	f7fc fa7f 	bl	80005f8 <__aeabi_dmul>
 80040fa:	4680      	mov	r8, r0
 80040fc:	4689      	mov	r9, r1
 80040fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004102:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8004106:	931b      	str	r3, [sp, #108]	; 0x6c
 8004108:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800410c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004110:	e79b      	b.n	800404a <_strtod_l+0x9b2>
 8004112:	f1ba 0f01 	cmp.w	sl, #1
 8004116:	d102      	bne.n	800411e <_strtod_l+0xa86>
 8004118:	2f00      	cmp	r7, #0
 800411a:	f43f ad7e 	beq.w	8003c1a <_strtod_l+0x582>
 800411e:	4b61      	ldr	r3, [pc, #388]	; (80042a4 <_strtod_l+0xc0c>)
 8004120:	2200      	movs	r2, #0
 8004122:	e78c      	b.n	800403e <_strtod_l+0x9a6>
 8004124:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80042a0 <_strtod_l+0xc08>
 8004128:	f04f 0800 	mov.w	r8, #0
 800412c:	e7e7      	b.n	80040fe <_strtod_l+0xa66>
 800412e:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <_strtod_l+0xc08>)
 8004130:	4640      	mov	r0, r8
 8004132:	4649      	mov	r1, r9
 8004134:	2200      	movs	r2, #0
 8004136:	f7fc fa5f 	bl	80005f8 <__aeabi_dmul>
 800413a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800413c:	4680      	mov	r8, r0
 800413e:	4689      	mov	r9, r1
 8004140:	b933      	cbnz	r3, 8004150 <_strtod_l+0xab8>
 8004142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004146:	9012      	str	r0, [sp, #72]	; 0x48
 8004148:	9313      	str	r3, [sp, #76]	; 0x4c
 800414a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800414e:	e7dd      	b.n	800410c <_strtod_l+0xa74>
 8004150:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004154:	e7f9      	b.n	800414a <_strtod_l+0xab2>
 8004156:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800415a:	9b04      	ldr	r3, [sp, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1a8      	bne.n	80040b2 <_strtod_l+0xa1a>
 8004160:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004164:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004166:	0d1b      	lsrs	r3, r3, #20
 8004168:	051b      	lsls	r3, r3, #20
 800416a:	429a      	cmp	r2, r3
 800416c:	d1a1      	bne.n	80040b2 <_strtod_l+0xa1a>
 800416e:	4640      	mov	r0, r8
 8004170:	4649      	mov	r1, r9
 8004172:	f7fc fd89 	bl	8000c88 <__aeabi_d2lz>
 8004176:	f7fc fa11 	bl	800059c <__aeabi_l2d>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4640      	mov	r0, r8
 8004180:	4649      	mov	r1, r9
 8004182:	f7fc f881 	bl	8000288 <__aeabi_dsub>
 8004186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800418c:	ea43 030a 	orr.w	r3, r3, sl
 8004190:	4313      	orrs	r3, r2
 8004192:	4680      	mov	r8, r0
 8004194:	4689      	mov	r9, r1
 8004196:	d053      	beq.n	8004240 <_strtod_l+0xba8>
 8004198:	a335      	add	r3, pc, #212	; (adr r3, 8004270 <_strtod_l+0xbd8>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f7fc fc9d 	bl	8000adc <__aeabi_dcmplt>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	f47f acce 	bne.w	8003b44 <_strtod_l+0x4ac>
 80041a8:	a333      	add	r3, pc, #204	; (adr r3, 8004278 <_strtod_l+0xbe0>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	4640      	mov	r0, r8
 80041b0:	4649      	mov	r1, r9
 80041b2:	f7fc fcb1 	bl	8000b18 <__aeabi_dcmpgt>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	f43f af7b 	beq.w	80040b2 <_strtod_l+0xa1a>
 80041bc:	e4c2      	b.n	8003b44 <_strtod_l+0x4ac>
 80041be:	9b04      	ldr	r3, [sp, #16]
 80041c0:	b333      	cbz	r3, 8004210 <_strtod_l+0xb78>
 80041c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80041c8:	d822      	bhi.n	8004210 <_strtod_l+0xb78>
 80041ca:	a32d      	add	r3, pc, #180	; (adr r3, 8004280 <_strtod_l+0xbe8>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	4640      	mov	r0, r8
 80041d2:	4649      	mov	r1, r9
 80041d4:	f7fc fc8c 	bl	8000af0 <__aeabi_dcmple>
 80041d8:	b1a0      	cbz	r0, 8004204 <_strtod_l+0xb6c>
 80041da:	4649      	mov	r1, r9
 80041dc:	4640      	mov	r0, r8
 80041de:	f7fc fce3 	bl	8000ba8 <__aeabi_d2uiz>
 80041e2:	2801      	cmp	r0, #1
 80041e4:	bf38      	it	cc
 80041e6:	2001      	movcc	r0, #1
 80041e8:	f7fc f98c 	bl	8000504 <__aeabi_ui2d>
 80041ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ee:	4680      	mov	r8, r0
 80041f0:	4689      	mov	r9, r1
 80041f2:	bb13      	cbnz	r3, 800423a <_strtod_l+0xba2>
 80041f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041f8:	9014      	str	r0, [sp, #80]	; 0x50
 80041fa:	9315      	str	r3, [sp, #84]	; 0x54
 80041fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004200:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004206:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004208:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	930d      	str	r3, [sp, #52]	; 0x34
 8004210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004214:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800421c:	f001 fe54 	bl	8005ec8 <__ulp>
 8004220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004224:	ec53 2b10 	vmov	r2, r3, d0
 8004228:	f7fc f9e6 	bl	80005f8 <__aeabi_dmul>
 800422c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004230:	f7fc f82c 	bl	800028c <__adddf3>
 8004234:	4682      	mov	sl, r0
 8004236:	468b      	mov	fp, r1
 8004238:	e78f      	b.n	800415a <_strtod_l+0xac2>
 800423a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800423e:	e7dd      	b.n	80041fc <_strtod_l+0xb64>
 8004240:	a311      	add	r3, pc, #68	; (adr r3, 8004288 <_strtod_l+0xbf0>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fc fc49 	bl	8000adc <__aeabi_dcmplt>
 800424a:	e7b4      	b.n	80041b6 <_strtod_l+0xb1e>
 800424c:	2300      	movs	r3, #0
 800424e:	930e      	str	r3, [sp, #56]	; 0x38
 8004250:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004252:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	f7ff ba65 	b.w	8003724 <_strtod_l+0x8c>
 800425a:	2b65      	cmp	r3, #101	; 0x65
 800425c:	f43f ab5d 	beq.w	800391a <_strtod_l+0x282>
 8004260:	2b45      	cmp	r3, #69	; 0x45
 8004262:	f43f ab5a 	beq.w	800391a <_strtod_l+0x282>
 8004266:	2201      	movs	r2, #1
 8004268:	f7ff bb92 	b.w	8003990 <_strtod_l+0x2f8>
 800426c:	f3af 8000 	nop.w
 8004270:	94a03595 	.word	0x94a03595
 8004274:	3fdfffff 	.word	0x3fdfffff
 8004278:	35afe535 	.word	0x35afe535
 800427c:	3fe00000 	.word	0x3fe00000
 8004280:	ffc00000 	.word	0xffc00000
 8004284:	41dfffff 	.word	0x41dfffff
 8004288:	94a03595 	.word	0x94a03595
 800428c:	3fcfffff 	.word	0x3fcfffff
 8004290:	3ff00000 	.word	0x3ff00000
 8004294:	7ff00000 	.word	0x7ff00000
 8004298:	7fe00000 	.word	0x7fe00000
 800429c:	7c9fffff 	.word	0x7c9fffff
 80042a0:	3fe00000 	.word	0x3fe00000
 80042a4:	bff00000 	.word	0xbff00000
 80042a8:	7fefffff 	.word	0x7fefffff

080042ac <_strtod_r>:
 80042ac:	4b01      	ldr	r3, [pc, #4]	; (80042b4 <_strtod_r+0x8>)
 80042ae:	f7ff b9f3 	b.w	8003698 <_strtod_l>
 80042b2:	bf00      	nop
 80042b4:	2000006c 	.word	0x2000006c

080042b8 <_strtol_l.isra.0>:
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042be:	d001      	beq.n	80042c4 <_strtol_l.isra.0+0xc>
 80042c0:	2b24      	cmp	r3, #36	; 0x24
 80042c2:	d906      	bls.n	80042d2 <_strtol_l.isra.0+0x1a>
 80042c4:	f7fe fae8 	bl	8002898 <__errno>
 80042c8:	2316      	movs	r3, #22
 80042ca:	6003      	str	r3, [r0, #0]
 80042cc:	2000      	movs	r0, #0
 80042ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d2:	4f3a      	ldr	r7, [pc, #232]	; (80043bc <_strtol_l.isra.0+0x104>)
 80042d4:	468e      	mov	lr, r1
 80042d6:	4676      	mov	r6, lr
 80042d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80042dc:	5de5      	ldrb	r5, [r4, r7]
 80042de:	f015 0508 	ands.w	r5, r5, #8
 80042e2:	d1f8      	bne.n	80042d6 <_strtol_l.isra.0+0x1e>
 80042e4:	2c2d      	cmp	r4, #45	; 0x2d
 80042e6:	d134      	bne.n	8004352 <_strtol_l.isra.0+0x9a>
 80042e8:	f89e 4000 	ldrb.w	r4, [lr]
 80042ec:	f04f 0801 	mov.w	r8, #1
 80042f0:	f106 0e02 	add.w	lr, r6, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05c      	beq.n	80043b2 <_strtol_l.isra.0+0xfa>
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d10c      	bne.n	8004316 <_strtol_l.isra.0+0x5e>
 80042fc:	2c30      	cmp	r4, #48	; 0x30
 80042fe:	d10a      	bne.n	8004316 <_strtol_l.isra.0+0x5e>
 8004300:	f89e 4000 	ldrb.w	r4, [lr]
 8004304:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004308:	2c58      	cmp	r4, #88	; 0x58
 800430a:	d14d      	bne.n	80043a8 <_strtol_l.isra.0+0xf0>
 800430c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004310:	2310      	movs	r3, #16
 8004312:	f10e 0e02 	add.w	lr, lr, #2
 8004316:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800431a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800431e:	2600      	movs	r6, #0
 8004320:	fbbc f9f3 	udiv	r9, ip, r3
 8004324:	4635      	mov	r5, r6
 8004326:	fb03 ca19 	mls	sl, r3, r9, ip
 800432a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800432e:	2f09      	cmp	r7, #9
 8004330:	d818      	bhi.n	8004364 <_strtol_l.isra.0+0xac>
 8004332:	463c      	mov	r4, r7
 8004334:	42a3      	cmp	r3, r4
 8004336:	dd24      	ble.n	8004382 <_strtol_l.isra.0+0xca>
 8004338:	2e00      	cmp	r6, #0
 800433a:	db1f      	blt.n	800437c <_strtol_l.isra.0+0xc4>
 800433c:	45a9      	cmp	r9, r5
 800433e:	d31d      	bcc.n	800437c <_strtol_l.isra.0+0xc4>
 8004340:	d101      	bne.n	8004346 <_strtol_l.isra.0+0x8e>
 8004342:	45a2      	cmp	sl, r4
 8004344:	db1a      	blt.n	800437c <_strtol_l.isra.0+0xc4>
 8004346:	fb05 4503 	mla	r5, r5, r3, r4
 800434a:	2601      	movs	r6, #1
 800434c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004350:	e7eb      	b.n	800432a <_strtol_l.isra.0+0x72>
 8004352:	2c2b      	cmp	r4, #43	; 0x2b
 8004354:	bf08      	it	eq
 8004356:	f89e 4000 	ldrbeq.w	r4, [lr]
 800435a:	46a8      	mov	r8, r5
 800435c:	bf08      	it	eq
 800435e:	f106 0e02 	addeq.w	lr, r6, #2
 8004362:	e7c7      	b.n	80042f4 <_strtol_l.isra.0+0x3c>
 8004364:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004368:	2f19      	cmp	r7, #25
 800436a:	d801      	bhi.n	8004370 <_strtol_l.isra.0+0xb8>
 800436c:	3c37      	subs	r4, #55	; 0x37
 800436e:	e7e1      	b.n	8004334 <_strtol_l.isra.0+0x7c>
 8004370:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004374:	2f19      	cmp	r7, #25
 8004376:	d804      	bhi.n	8004382 <_strtol_l.isra.0+0xca>
 8004378:	3c57      	subs	r4, #87	; 0x57
 800437a:	e7db      	b.n	8004334 <_strtol_l.isra.0+0x7c>
 800437c:	f04f 36ff 	mov.w	r6, #4294967295
 8004380:	e7e4      	b.n	800434c <_strtol_l.isra.0+0x94>
 8004382:	2e00      	cmp	r6, #0
 8004384:	da05      	bge.n	8004392 <_strtol_l.isra.0+0xda>
 8004386:	2322      	movs	r3, #34	; 0x22
 8004388:	6003      	str	r3, [r0, #0]
 800438a:	4665      	mov	r5, ip
 800438c:	b942      	cbnz	r2, 80043a0 <_strtol_l.isra.0+0xe8>
 800438e:	4628      	mov	r0, r5
 8004390:	e79d      	b.n	80042ce <_strtol_l.isra.0+0x16>
 8004392:	f1b8 0f00 	cmp.w	r8, #0
 8004396:	d000      	beq.n	800439a <_strtol_l.isra.0+0xe2>
 8004398:	426d      	negs	r5, r5
 800439a:	2a00      	cmp	r2, #0
 800439c:	d0f7      	beq.n	800438e <_strtol_l.isra.0+0xd6>
 800439e:	b10e      	cbz	r6, 80043a4 <_strtol_l.isra.0+0xec>
 80043a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80043a4:	6011      	str	r1, [r2, #0]
 80043a6:	e7f2      	b.n	800438e <_strtol_l.isra.0+0xd6>
 80043a8:	2430      	movs	r4, #48	; 0x30
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1b3      	bne.n	8004316 <_strtol_l.isra.0+0x5e>
 80043ae:	2308      	movs	r3, #8
 80043b0:	e7b1      	b.n	8004316 <_strtol_l.isra.0+0x5e>
 80043b2:	2c30      	cmp	r4, #48	; 0x30
 80043b4:	d0a4      	beq.n	8004300 <_strtol_l.isra.0+0x48>
 80043b6:	230a      	movs	r3, #10
 80043b8:	e7ad      	b.n	8004316 <_strtol_l.isra.0+0x5e>
 80043ba:	bf00      	nop
 80043bc:	08007289 	.word	0x08007289

080043c0 <_strtol_r>:
 80043c0:	f7ff bf7a 	b.w	80042b8 <_strtol_l.isra.0>

080043c4 <quorem>:
 80043c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c8:	6903      	ldr	r3, [r0, #16]
 80043ca:	690c      	ldr	r4, [r1, #16]
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	4607      	mov	r7, r0
 80043d0:	f2c0 8081 	blt.w	80044d6 <quorem+0x112>
 80043d4:	3c01      	subs	r4, #1
 80043d6:	f101 0814 	add.w	r8, r1, #20
 80043da:	f100 0514 	add.w	r5, r0, #20
 80043de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043ec:	3301      	adds	r3, #1
 80043ee:	429a      	cmp	r2, r3
 80043f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80043fc:	d331      	bcc.n	8004462 <quorem+0x9e>
 80043fe:	f04f 0e00 	mov.w	lr, #0
 8004402:	4640      	mov	r0, r8
 8004404:	46ac      	mov	ip, r5
 8004406:	46f2      	mov	sl, lr
 8004408:	f850 2b04 	ldr.w	r2, [r0], #4
 800440c:	b293      	uxth	r3, r2
 800440e:	fb06 e303 	mla	r3, r6, r3, lr
 8004412:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004416:	b29b      	uxth	r3, r3
 8004418:	ebaa 0303 	sub.w	r3, sl, r3
 800441c:	0c12      	lsrs	r2, r2, #16
 800441e:	f8dc a000 	ldr.w	sl, [ip]
 8004422:	fb06 e202 	mla	r2, r6, r2, lr
 8004426:	fa13 f38a 	uxtah	r3, r3, sl
 800442a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800442e:	fa1f fa82 	uxth.w	sl, r2
 8004432:	f8dc 2000 	ldr.w	r2, [ip]
 8004436:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800443a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800443e:	b29b      	uxth	r3, r3
 8004440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004444:	4581      	cmp	r9, r0
 8004446:	f84c 3b04 	str.w	r3, [ip], #4
 800444a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800444e:	d2db      	bcs.n	8004408 <quorem+0x44>
 8004450:	f855 300b 	ldr.w	r3, [r5, fp]
 8004454:	b92b      	cbnz	r3, 8004462 <quorem+0x9e>
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	3b04      	subs	r3, #4
 800445a:	429d      	cmp	r5, r3
 800445c:	461a      	mov	r2, r3
 800445e:	d32e      	bcc.n	80044be <quorem+0xfa>
 8004460:	613c      	str	r4, [r7, #16]
 8004462:	4638      	mov	r0, r7
 8004464:	f001 fc8c 	bl	8005d80 <__mcmp>
 8004468:	2800      	cmp	r0, #0
 800446a:	db24      	blt.n	80044b6 <quorem+0xf2>
 800446c:	3601      	adds	r6, #1
 800446e:	4628      	mov	r0, r5
 8004470:	f04f 0c00 	mov.w	ip, #0
 8004474:	f858 2b04 	ldr.w	r2, [r8], #4
 8004478:	f8d0 e000 	ldr.w	lr, [r0]
 800447c:	b293      	uxth	r3, r2
 800447e:	ebac 0303 	sub.w	r3, ip, r3
 8004482:	0c12      	lsrs	r2, r2, #16
 8004484:	fa13 f38e 	uxtah	r3, r3, lr
 8004488:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800448c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004490:	b29b      	uxth	r3, r3
 8004492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004496:	45c1      	cmp	r9, r8
 8004498:	f840 3b04 	str.w	r3, [r0], #4
 800449c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044a0:	d2e8      	bcs.n	8004474 <quorem+0xb0>
 80044a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044aa:	b922      	cbnz	r2, 80044b6 <quorem+0xf2>
 80044ac:	3b04      	subs	r3, #4
 80044ae:	429d      	cmp	r5, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	d30a      	bcc.n	80044ca <quorem+0x106>
 80044b4:	613c      	str	r4, [r7, #16]
 80044b6:	4630      	mov	r0, r6
 80044b8:	b003      	add	sp, #12
 80044ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	2a00      	cmp	r2, #0
 80044c4:	d1cc      	bne.n	8004460 <quorem+0x9c>
 80044c6:	3c01      	subs	r4, #1
 80044c8:	e7c7      	b.n	800445a <quorem+0x96>
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	3b04      	subs	r3, #4
 80044ce:	2a00      	cmp	r2, #0
 80044d0:	d1f0      	bne.n	80044b4 <quorem+0xf0>
 80044d2:	3c01      	subs	r4, #1
 80044d4:	e7eb      	b.n	80044ae <quorem+0xea>
 80044d6:	2000      	movs	r0, #0
 80044d8:	e7ee      	b.n	80044b8 <quorem+0xf4>
 80044da:	0000      	movs	r0, r0
 80044dc:	0000      	movs	r0, r0
	...

080044e0 <_dtoa_r>:
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	ed2d 8b02 	vpush	{d8}
 80044e8:	ec57 6b10 	vmov	r6, r7, d0
 80044ec:	b095      	sub	sp, #84	; 0x54
 80044ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80044f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80044f4:	9105      	str	r1, [sp, #20]
 80044f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80044fa:	4604      	mov	r4, r0
 80044fc:	9209      	str	r2, [sp, #36]	; 0x24
 80044fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004500:	b975      	cbnz	r5, 8004520 <_dtoa_r+0x40>
 8004502:	2010      	movs	r0, #16
 8004504:	f001 f94c 	bl	80057a0 <malloc>
 8004508:	4602      	mov	r2, r0
 800450a:	6260      	str	r0, [r4, #36]	; 0x24
 800450c:	b920      	cbnz	r0, 8004518 <_dtoa_r+0x38>
 800450e:	4bb2      	ldr	r3, [pc, #712]	; (80047d8 <_dtoa_r+0x2f8>)
 8004510:	21ea      	movs	r1, #234	; 0xea
 8004512:	48b2      	ldr	r0, [pc, #712]	; (80047dc <_dtoa_r+0x2fc>)
 8004514:	f002 f874 	bl	8006600 <__assert_func>
 8004518:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800451c:	6005      	str	r5, [r0, #0]
 800451e:	60c5      	str	r5, [r0, #12]
 8004520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	b151      	cbz	r1, 800453c <_dtoa_r+0x5c>
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	604a      	str	r2, [r1, #4]
 800452a:	2301      	movs	r3, #1
 800452c:	4093      	lsls	r3, r2
 800452e:	608b      	str	r3, [r1, #8]
 8004530:	4620      	mov	r0, r4
 8004532:	f001 f99d 	bl	8005870 <_Bfree>
 8004536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	1e3b      	subs	r3, r7, #0
 800453e:	bfb9      	ittee	lt
 8004540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004544:	9303      	strlt	r3, [sp, #12]
 8004546:	2300      	movge	r3, #0
 8004548:	f8c8 3000 	strge.w	r3, [r8]
 800454c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004550:	4ba3      	ldr	r3, [pc, #652]	; (80047e0 <_dtoa_r+0x300>)
 8004552:	bfbc      	itt	lt
 8004554:	2201      	movlt	r2, #1
 8004556:	f8c8 2000 	strlt.w	r2, [r8]
 800455a:	ea33 0309 	bics.w	r3, r3, r9
 800455e:	d11b      	bne.n	8004598 <_dtoa_r+0xb8>
 8004560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004562:	f242 730f 	movw	r3, #9999	; 0x270f
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800456c:	4333      	orrs	r3, r6
 800456e:	f000 857a 	beq.w	8005066 <_dtoa_r+0xb86>
 8004572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004574:	b963      	cbnz	r3, 8004590 <_dtoa_r+0xb0>
 8004576:	4b9b      	ldr	r3, [pc, #620]	; (80047e4 <_dtoa_r+0x304>)
 8004578:	e024      	b.n	80045c4 <_dtoa_r+0xe4>
 800457a:	4b9b      	ldr	r3, [pc, #620]	; (80047e8 <_dtoa_r+0x308>)
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	3308      	adds	r3, #8
 8004580:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	9800      	ldr	r0, [sp, #0]
 8004586:	b015      	add	sp, #84	; 0x54
 8004588:	ecbd 8b02 	vpop	{d8}
 800458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004590:	4b94      	ldr	r3, [pc, #592]	; (80047e4 <_dtoa_r+0x304>)
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	3303      	adds	r3, #3
 8004596:	e7f3      	b.n	8004580 <_dtoa_r+0xa0>
 8004598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	ec51 0b17 	vmov	r0, r1, d7
 80045a2:	2300      	movs	r3, #0
 80045a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80045a8:	f7fc fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ac:	4680      	mov	r8, r0
 80045ae:	b158      	cbz	r0, 80045c8 <_dtoa_r+0xe8>
 80045b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045b2:	2301      	movs	r3, #1
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8551 	beq.w	8005060 <_dtoa_r+0xb80>
 80045be:	488b      	ldr	r0, [pc, #556]	; (80047ec <_dtoa_r+0x30c>)
 80045c0:	6018      	str	r0, [r3, #0]
 80045c2:	1e43      	subs	r3, r0, #1
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	e7dd      	b.n	8004584 <_dtoa_r+0xa4>
 80045c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80045cc:	aa12      	add	r2, sp, #72	; 0x48
 80045ce:	a913      	add	r1, sp, #76	; 0x4c
 80045d0:	4620      	mov	r0, r4
 80045d2:	f001 fcf5 	bl	8005fc0 <__d2b>
 80045d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80045da:	4683      	mov	fp, r0
 80045dc:	2d00      	cmp	r5, #0
 80045de:	d07c      	beq.n	80046da <_dtoa_r+0x1fa>
 80045e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80045e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80045ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80045f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80045f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80045fa:	4b7d      	ldr	r3, [pc, #500]	; (80047f0 <_dtoa_r+0x310>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	4630      	mov	r0, r6
 8004600:	4639      	mov	r1, r7
 8004602:	f7fb fe41 	bl	8000288 <__aeabi_dsub>
 8004606:	a36e      	add	r3, pc, #440	; (adr r3, 80047c0 <_dtoa_r+0x2e0>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fb fff4 	bl	80005f8 <__aeabi_dmul>
 8004610:	a36d      	add	r3, pc, #436	; (adr r3, 80047c8 <_dtoa_r+0x2e8>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb fe39 	bl	800028c <__adddf3>
 800461a:	4606      	mov	r6, r0
 800461c:	4628      	mov	r0, r5
 800461e:	460f      	mov	r7, r1
 8004620:	f7fb ff80 	bl	8000524 <__aeabi_i2d>
 8004624:	a36a      	add	r3, pc, #424	; (adr r3, 80047d0 <_dtoa_r+0x2f0>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fb ffe5 	bl	80005f8 <__aeabi_dmul>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4630      	mov	r0, r6
 8004634:	4639      	mov	r1, r7
 8004636:	f7fb fe29 	bl	800028c <__adddf3>
 800463a:	4606      	mov	r6, r0
 800463c:	460f      	mov	r7, r1
 800463e:	f7fc fa8b 	bl	8000b58 <__aeabi_d2iz>
 8004642:	2200      	movs	r2, #0
 8004644:	4682      	mov	sl, r0
 8004646:	2300      	movs	r3, #0
 8004648:	4630      	mov	r0, r6
 800464a:	4639      	mov	r1, r7
 800464c:	f7fc fa46 	bl	8000adc <__aeabi_dcmplt>
 8004650:	b148      	cbz	r0, 8004666 <_dtoa_r+0x186>
 8004652:	4650      	mov	r0, sl
 8004654:	f7fb ff66 	bl	8000524 <__aeabi_i2d>
 8004658:	4632      	mov	r2, r6
 800465a:	463b      	mov	r3, r7
 800465c:	f7fc fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8004660:	b908      	cbnz	r0, 8004666 <_dtoa_r+0x186>
 8004662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004666:	f1ba 0f16 	cmp.w	sl, #22
 800466a:	d854      	bhi.n	8004716 <_dtoa_r+0x236>
 800466c:	4b61      	ldr	r3, [pc, #388]	; (80047f4 <_dtoa_r+0x314>)
 800466e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800467a:	f7fc fa2f 	bl	8000adc <__aeabi_dcmplt>
 800467e:	2800      	cmp	r0, #0
 8004680:	d04b      	beq.n	800471a <_dtoa_r+0x23a>
 8004682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004686:	2300      	movs	r3, #0
 8004688:	930e      	str	r3, [sp, #56]	; 0x38
 800468a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800468c:	1b5d      	subs	r5, r3, r5
 800468e:	1e6b      	subs	r3, r5, #1
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	bf43      	ittte	mi
 8004694:	2300      	movmi	r3, #0
 8004696:	f1c5 0801 	rsbmi	r8, r5, #1
 800469a:	9304      	strmi	r3, [sp, #16]
 800469c:	f04f 0800 	movpl.w	r8, #0
 80046a0:	f1ba 0f00 	cmp.w	sl, #0
 80046a4:	db3b      	blt.n	800471e <_dtoa_r+0x23e>
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80046ac:	4453      	add	r3, sl
 80046ae:	9304      	str	r3, [sp, #16]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9306      	str	r3, [sp, #24]
 80046b4:	9b05      	ldr	r3, [sp, #20]
 80046b6:	2b09      	cmp	r3, #9
 80046b8:	d869      	bhi.n	800478e <_dtoa_r+0x2ae>
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	bfc4      	itt	gt
 80046be:	3b04      	subgt	r3, #4
 80046c0:	9305      	strgt	r3, [sp, #20]
 80046c2:	9b05      	ldr	r3, [sp, #20]
 80046c4:	f1a3 0302 	sub.w	r3, r3, #2
 80046c8:	bfcc      	ite	gt
 80046ca:	2500      	movgt	r5, #0
 80046cc:	2501      	movle	r5, #1
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d869      	bhi.n	80047a6 <_dtoa_r+0x2c6>
 80046d2:	e8df f003 	tbb	[pc, r3]
 80046d6:	4e2c      	.short	0x4e2c
 80046d8:	5a4c      	.short	0x5a4c
 80046da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80046de:	441d      	add	r5, r3
 80046e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	bfc1      	itttt	gt
 80046e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80046f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80046f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80046f8:	bfda      	itte	le
 80046fa:	f1c3 0320 	rsble	r3, r3, #32
 80046fe:	fa06 f003 	lslle.w	r0, r6, r3
 8004702:	4318      	orrgt	r0, r3
 8004704:	f7fb fefe 	bl	8000504 <__aeabi_ui2d>
 8004708:	2301      	movs	r3, #1
 800470a:	4606      	mov	r6, r0
 800470c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004710:	3d01      	subs	r5, #1
 8004712:	9310      	str	r3, [sp, #64]	; 0x40
 8004714:	e771      	b.n	80045fa <_dtoa_r+0x11a>
 8004716:	2301      	movs	r3, #1
 8004718:	e7b6      	b.n	8004688 <_dtoa_r+0x1a8>
 800471a:	900e      	str	r0, [sp, #56]	; 0x38
 800471c:	e7b5      	b.n	800468a <_dtoa_r+0x1aa>
 800471e:	f1ca 0300 	rsb	r3, sl, #0
 8004722:	9306      	str	r3, [sp, #24]
 8004724:	2300      	movs	r3, #0
 8004726:	eba8 080a 	sub.w	r8, r8, sl
 800472a:	930d      	str	r3, [sp, #52]	; 0x34
 800472c:	e7c2      	b.n	80046b4 <_dtoa_r+0x1d4>
 800472e:	2300      	movs	r3, #0
 8004730:	9308      	str	r3, [sp, #32]
 8004732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	dc39      	bgt.n	80047ac <_dtoa_r+0x2cc>
 8004738:	f04f 0901 	mov.w	r9, #1
 800473c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004740:	464b      	mov	r3, r9
 8004742:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004746:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004748:	2200      	movs	r2, #0
 800474a:	6042      	str	r2, [r0, #4]
 800474c:	2204      	movs	r2, #4
 800474e:	f102 0614 	add.w	r6, r2, #20
 8004752:	429e      	cmp	r6, r3
 8004754:	6841      	ldr	r1, [r0, #4]
 8004756:	d92f      	bls.n	80047b8 <_dtoa_r+0x2d8>
 8004758:	4620      	mov	r0, r4
 800475a:	f001 f849 	bl	80057f0 <_Balloc>
 800475e:	9000      	str	r0, [sp, #0]
 8004760:	2800      	cmp	r0, #0
 8004762:	d14b      	bne.n	80047fc <_dtoa_r+0x31c>
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <_dtoa_r+0x318>)
 8004766:	4602      	mov	r2, r0
 8004768:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800476c:	e6d1      	b.n	8004512 <_dtoa_r+0x32>
 800476e:	2301      	movs	r3, #1
 8004770:	e7de      	b.n	8004730 <_dtoa_r+0x250>
 8004772:	2300      	movs	r3, #0
 8004774:	9308      	str	r3, [sp, #32]
 8004776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004778:	eb0a 0903 	add.w	r9, sl, r3
 800477c:	f109 0301 	add.w	r3, r9, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	bfb8      	it	lt
 8004786:	2301      	movlt	r3, #1
 8004788:	e7dd      	b.n	8004746 <_dtoa_r+0x266>
 800478a:	2301      	movs	r3, #1
 800478c:	e7f2      	b.n	8004774 <_dtoa_r+0x294>
 800478e:	2501      	movs	r5, #1
 8004790:	2300      	movs	r3, #0
 8004792:	9305      	str	r3, [sp, #20]
 8004794:	9508      	str	r5, [sp, #32]
 8004796:	f04f 39ff 	mov.w	r9, #4294967295
 800479a:	2200      	movs	r2, #0
 800479c:	f8cd 9004 	str.w	r9, [sp, #4]
 80047a0:	2312      	movs	r3, #18
 80047a2:	9209      	str	r2, [sp, #36]	; 0x24
 80047a4:	e7cf      	b.n	8004746 <_dtoa_r+0x266>
 80047a6:	2301      	movs	r3, #1
 80047a8:	9308      	str	r3, [sp, #32]
 80047aa:	e7f4      	b.n	8004796 <_dtoa_r+0x2b6>
 80047ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80047b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80047b4:	464b      	mov	r3, r9
 80047b6:	e7c6      	b.n	8004746 <_dtoa_r+0x266>
 80047b8:	3101      	adds	r1, #1
 80047ba:	6041      	str	r1, [r0, #4]
 80047bc:	0052      	lsls	r2, r2, #1
 80047be:	e7c6      	b.n	800474e <_dtoa_r+0x26e>
 80047c0:	636f4361 	.word	0x636f4361
 80047c4:	3fd287a7 	.word	0x3fd287a7
 80047c8:	8b60c8b3 	.word	0x8b60c8b3
 80047cc:	3fc68a28 	.word	0x3fc68a28
 80047d0:	509f79fb 	.word	0x509f79fb
 80047d4:	3fd34413 	.word	0x3fd34413
 80047d8:	08007396 	.word	0x08007396
 80047dc:	080073ad 	.word	0x080073ad
 80047e0:	7ff00000 	.word	0x7ff00000
 80047e4:	08007392 	.word	0x08007392
 80047e8:	08007389 	.word	0x08007389
 80047ec:	08007209 	.word	0x08007209
 80047f0:	3ff80000 	.word	0x3ff80000
 80047f4:	08007528 	.word	0x08007528
 80047f8:	0800740c 	.word	0x0800740c
 80047fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047fe:	9a00      	ldr	r2, [sp, #0]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	2b0e      	cmp	r3, #14
 8004806:	f200 80ad 	bhi.w	8004964 <_dtoa_r+0x484>
 800480a:	2d00      	cmp	r5, #0
 800480c:	f000 80aa 	beq.w	8004964 <_dtoa_r+0x484>
 8004810:	f1ba 0f00 	cmp.w	sl, #0
 8004814:	dd36      	ble.n	8004884 <_dtoa_r+0x3a4>
 8004816:	4ac3      	ldr	r2, [pc, #780]	; (8004b24 <_dtoa_r+0x644>)
 8004818:	f00a 030f 	and.w	r3, sl, #15
 800481c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004820:	ed93 7b00 	vldr	d7, [r3]
 8004824:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004828:	ea4f 172a 	mov.w	r7, sl, asr #4
 800482c:	eeb0 8a47 	vmov.f32	s16, s14
 8004830:	eef0 8a67 	vmov.f32	s17, s15
 8004834:	d016      	beq.n	8004864 <_dtoa_r+0x384>
 8004836:	4bbc      	ldr	r3, [pc, #752]	; (8004b28 <_dtoa_r+0x648>)
 8004838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800483c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004840:	f7fc f804 	bl	800084c <__aeabi_ddiv>
 8004844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004848:	f007 070f 	and.w	r7, r7, #15
 800484c:	2503      	movs	r5, #3
 800484e:	4eb6      	ldr	r6, [pc, #728]	; (8004b28 <_dtoa_r+0x648>)
 8004850:	b957      	cbnz	r7, 8004868 <_dtoa_r+0x388>
 8004852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004856:	ec53 2b18 	vmov	r2, r3, d8
 800485a:	f7fb fff7 	bl	800084c <__aeabi_ddiv>
 800485e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004862:	e029      	b.n	80048b8 <_dtoa_r+0x3d8>
 8004864:	2502      	movs	r5, #2
 8004866:	e7f2      	b.n	800484e <_dtoa_r+0x36e>
 8004868:	07f9      	lsls	r1, r7, #31
 800486a:	d508      	bpl.n	800487e <_dtoa_r+0x39e>
 800486c:	ec51 0b18 	vmov	r0, r1, d8
 8004870:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004874:	f7fb fec0 	bl	80005f8 <__aeabi_dmul>
 8004878:	ec41 0b18 	vmov	d8, r0, r1
 800487c:	3501      	adds	r5, #1
 800487e:	107f      	asrs	r7, r7, #1
 8004880:	3608      	adds	r6, #8
 8004882:	e7e5      	b.n	8004850 <_dtoa_r+0x370>
 8004884:	f000 80a6 	beq.w	80049d4 <_dtoa_r+0x4f4>
 8004888:	f1ca 0600 	rsb	r6, sl, #0
 800488c:	4ba5      	ldr	r3, [pc, #660]	; (8004b24 <_dtoa_r+0x644>)
 800488e:	4fa6      	ldr	r7, [pc, #664]	; (8004b28 <_dtoa_r+0x648>)
 8004890:	f006 020f 	and.w	r2, r6, #15
 8004894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048a0:	f7fb feaa 	bl	80005f8 <__aeabi_dmul>
 80048a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048a8:	1136      	asrs	r6, r6, #4
 80048aa:	2300      	movs	r3, #0
 80048ac:	2502      	movs	r5, #2
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	f040 8085 	bne.w	80049be <_dtoa_r+0x4de>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1d2      	bne.n	800485e <_dtoa_r+0x37e>
 80048b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 808c 	beq.w	80049d8 <_dtoa_r+0x4f8>
 80048c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048c4:	4b99      	ldr	r3, [pc, #612]	; (8004b2c <_dtoa_r+0x64c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fc f906 	bl	8000adc <__aeabi_dcmplt>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f000 8081 	beq.w	80049d8 <_dtoa_r+0x4f8>
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d07d      	beq.n	80049d8 <_dtoa_r+0x4f8>
 80048dc:	f1b9 0f00 	cmp.w	r9, #0
 80048e0:	dd3c      	ble.n	800495c <_dtoa_r+0x47c>
 80048e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80048e6:	9307      	str	r3, [sp, #28]
 80048e8:	2200      	movs	r2, #0
 80048ea:	4b91      	ldr	r3, [pc, #580]	; (8004b30 <_dtoa_r+0x650>)
 80048ec:	4630      	mov	r0, r6
 80048ee:	4639      	mov	r1, r7
 80048f0:	f7fb fe82 	bl	80005f8 <__aeabi_dmul>
 80048f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048f8:	3501      	adds	r5, #1
 80048fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80048fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004902:	4628      	mov	r0, r5
 8004904:	f7fb fe0e 	bl	8000524 <__aeabi_i2d>
 8004908:	4632      	mov	r2, r6
 800490a:	463b      	mov	r3, r7
 800490c:	f7fb fe74 	bl	80005f8 <__aeabi_dmul>
 8004910:	4b88      	ldr	r3, [pc, #544]	; (8004b34 <_dtoa_r+0x654>)
 8004912:	2200      	movs	r2, #0
 8004914:	f7fb fcba 	bl	800028c <__adddf3>
 8004918:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800491c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004924:	2b00      	cmp	r3, #0
 8004926:	d15c      	bne.n	80049e2 <_dtoa_r+0x502>
 8004928:	4b83      	ldr	r3, [pc, #524]	; (8004b38 <_dtoa_r+0x658>)
 800492a:	2200      	movs	r2, #0
 800492c:	4630      	mov	r0, r6
 800492e:	4639      	mov	r1, r7
 8004930:	f7fb fcaa 	bl	8000288 <__aeabi_dsub>
 8004934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004938:	4606      	mov	r6, r0
 800493a:	460f      	mov	r7, r1
 800493c:	f7fc f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 8004940:	2800      	cmp	r0, #0
 8004942:	f040 8296 	bne.w	8004e72 <_dtoa_r+0x992>
 8004946:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800494a:	4630      	mov	r0, r6
 800494c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004950:	4639      	mov	r1, r7
 8004952:	f7fc f8c3 	bl	8000adc <__aeabi_dcmplt>
 8004956:	2800      	cmp	r0, #0
 8004958:	f040 8288 	bne.w	8004e6c <_dtoa_r+0x98c>
 800495c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004960:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004966:	2b00      	cmp	r3, #0
 8004968:	f2c0 8158 	blt.w	8004c1c <_dtoa_r+0x73c>
 800496c:	f1ba 0f0e 	cmp.w	sl, #14
 8004970:	f300 8154 	bgt.w	8004c1c <_dtoa_r+0x73c>
 8004974:	4b6b      	ldr	r3, [pc, #428]	; (8004b24 <_dtoa_r+0x644>)
 8004976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800497a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800497e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	f280 80e3 	bge.w	8004b4c <_dtoa_r+0x66c>
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f300 80df 	bgt.w	8004b4c <_dtoa_r+0x66c>
 800498e:	f040 826d 	bne.w	8004e6c <_dtoa_r+0x98c>
 8004992:	4b69      	ldr	r3, [pc, #420]	; (8004b38 <_dtoa_r+0x658>)
 8004994:	2200      	movs	r2, #0
 8004996:	4640      	mov	r0, r8
 8004998:	4649      	mov	r1, r9
 800499a:	f7fb fe2d 	bl	80005f8 <__aeabi_dmul>
 800499e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049a2:	f7fc f8af 	bl	8000b04 <__aeabi_dcmpge>
 80049a6:	9e01      	ldr	r6, [sp, #4]
 80049a8:	4637      	mov	r7, r6
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f040 8243 	bne.w	8004e36 <_dtoa_r+0x956>
 80049b0:	9d00      	ldr	r5, [sp, #0]
 80049b2:	2331      	movs	r3, #49	; 0x31
 80049b4:	f805 3b01 	strb.w	r3, [r5], #1
 80049b8:	f10a 0a01 	add.w	sl, sl, #1
 80049bc:	e23f      	b.n	8004e3e <_dtoa_r+0x95e>
 80049be:	07f2      	lsls	r2, r6, #31
 80049c0:	d505      	bpl.n	80049ce <_dtoa_r+0x4ee>
 80049c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c6:	f7fb fe17 	bl	80005f8 <__aeabi_dmul>
 80049ca:	3501      	adds	r5, #1
 80049cc:	2301      	movs	r3, #1
 80049ce:	1076      	asrs	r6, r6, #1
 80049d0:	3708      	adds	r7, #8
 80049d2:	e76c      	b.n	80048ae <_dtoa_r+0x3ce>
 80049d4:	2502      	movs	r5, #2
 80049d6:	e76f      	b.n	80048b8 <_dtoa_r+0x3d8>
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	f8cd a01c 	str.w	sl, [sp, #28]
 80049de:	930c      	str	r3, [sp, #48]	; 0x30
 80049e0:	e78d      	b.n	80048fe <_dtoa_r+0x41e>
 80049e2:	9900      	ldr	r1, [sp, #0]
 80049e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049e8:	4b4e      	ldr	r3, [pc, #312]	; (8004b24 <_dtoa_r+0x644>)
 80049ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049ee:	4401      	add	r1, r0
 80049f0:	9102      	str	r1, [sp, #8]
 80049f2:	9908      	ldr	r1, [sp, #32]
 80049f4:	eeb0 8a47 	vmov.f32	s16, s14
 80049f8:	eef0 8a67 	vmov.f32	s17, s15
 80049fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d045      	beq.n	8004a94 <_dtoa_r+0x5b4>
 8004a08:	494c      	ldr	r1, [pc, #304]	; (8004b3c <_dtoa_r+0x65c>)
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f7fb ff1e 	bl	800084c <__aeabi_ddiv>
 8004a10:	ec53 2b18 	vmov	r2, r3, d8
 8004a14:	f7fb fc38 	bl	8000288 <__aeabi_dsub>
 8004a18:	9d00      	ldr	r5, [sp, #0]
 8004a1a:	ec41 0b18 	vmov	d8, r0, r1
 8004a1e:	4639      	mov	r1, r7
 8004a20:	4630      	mov	r0, r6
 8004a22:	f7fc f899 	bl	8000b58 <__aeabi_d2iz>
 8004a26:	900c      	str	r0, [sp, #48]	; 0x30
 8004a28:	f7fb fd7c 	bl	8000524 <__aeabi_i2d>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4630      	mov	r0, r6
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb fc28 	bl	8000288 <__aeabi_dsub>
 8004a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a3a:	3330      	adds	r3, #48	; 0x30
 8004a3c:	f805 3b01 	strb.w	r3, [r5], #1
 8004a40:	ec53 2b18 	vmov	r2, r3, d8
 8004a44:	4606      	mov	r6, r0
 8004a46:	460f      	mov	r7, r1
 8004a48:	f7fc f848 	bl	8000adc <__aeabi_dcmplt>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d165      	bne.n	8004b1c <_dtoa_r+0x63c>
 8004a50:	4632      	mov	r2, r6
 8004a52:	463b      	mov	r3, r7
 8004a54:	4935      	ldr	r1, [pc, #212]	; (8004b2c <_dtoa_r+0x64c>)
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7fb fc16 	bl	8000288 <__aeabi_dsub>
 8004a5c:	ec53 2b18 	vmov	r2, r3, d8
 8004a60:	f7fc f83c 	bl	8000adc <__aeabi_dcmplt>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	f040 80b9 	bne.w	8004bdc <_dtoa_r+0x6fc>
 8004a6a:	9b02      	ldr	r3, [sp, #8]
 8004a6c:	429d      	cmp	r5, r3
 8004a6e:	f43f af75 	beq.w	800495c <_dtoa_r+0x47c>
 8004a72:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <_dtoa_r+0x650>)
 8004a74:	ec51 0b18 	vmov	r0, r1, d8
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f7fb fdbd 	bl	80005f8 <__aeabi_dmul>
 8004a7e:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <_dtoa_r+0x650>)
 8004a80:	ec41 0b18 	vmov	d8, r0, r1
 8004a84:	2200      	movs	r2, #0
 8004a86:	4630      	mov	r0, r6
 8004a88:	4639      	mov	r1, r7
 8004a8a:	f7fb fdb5 	bl	80005f8 <__aeabi_dmul>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460f      	mov	r7, r1
 8004a92:	e7c4      	b.n	8004a1e <_dtoa_r+0x53e>
 8004a94:	ec51 0b17 	vmov	r0, r1, d7
 8004a98:	f7fb fdae 	bl	80005f8 <__aeabi_dmul>
 8004a9c:	9b02      	ldr	r3, [sp, #8]
 8004a9e:	9d00      	ldr	r5, [sp, #0]
 8004aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8004aa2:	ec41 0b18 	vmov	d8, r0, r1
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f7fc f855 	bl	8000b58 <__aeabi_d2iz>
 8004aae:	9011      	str	r0, [sp, #68]	; 0x44
 8004ab0:	f7fb fd38 	bl	8000524 <__aeabi_i2d>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4630      	mov	r0, r6
 8004aba:	4639      	mov	r1, r7
 8004abc:	f7fb fbe4 	bl	8000288 <__aeabi_dsub>
 8004ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ac2:	3330      	adds	r3, #48	; 0x30
 8004ac4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	429d      	cmp	r5, r3
 8004acc:	4606      	mov	r6, r0
 8004ace:	460f      	mov	r7, r1
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	d134      	bne.n	8004b40 <_dtoa_r+0x660>
 8004ad6:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <_dtoa_r+0x65c>)
 8004ad8:	ec51 0b18 	vmov	r0, r1, d8
 8004adc:	f7fb fbd6 	bl	800028c <__adddf3>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f7fc f816 	bl	8000b18 <__aeabi_dcmpgt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d175      	bne.n	8004bdc <_dtoa_r+0x6fc>
 8004af0:	ec53 2b18 	vmov	r2, r3, d8
 8004af4:	4911      	ldr	r1, [pc, #68]	; (8004b3c <_dtoa_r+0x65c>)
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fb fbc6 	bl	8000288 <__aeabi_dsub>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb ffea 	bl	8000adc <__aeabi_dcmplt>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	f43f af27 	beq.w	800495c <_dtoa_r+0x47c>
 8004b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b10:	1e6b      	subs	r3, r5, #1
 8004b12:	930c      	str	r3, [sp, #48]	; 0x30
 8004b14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b18:	2b30      	cmp	r3, #48	; 0x30
 8004b1a:	d0f8      	beq.n	8004b0e <_dtoa_r+0x62e>
 8004b1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004b20:	e04a      	b.n	8004bb8 <_dtoa_r+0x6d8>
 8004b22:	bf00      	nop
 8004b24:	08007528 	.word	0x08007528
 8004b28:	08007500 	.word	0x08007500
 8004b2c:	3ff00000 	.word	0x3ff00000
 8004b30:	40240000 	.word	0x40240000
 8004b34:	401c0000 	.word	0x401c0000
 8004b38:	40140000 	.word	0x40140000
 8004b3c:	3fe00000 	.word	0x3fe00000
 8004b40:	4baf      	ldr	r3, [pc, #700]	; (8004e00 <_dtoa_r+0x920>)
 8004b42:	f7fb fd59 	bl	80005f8 <__aeabi_dmul>
 8004b46:	4606      	mov	r6, r0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	e7ac      	b.n	8004aa6 <_dtoa_r+0x5c6>
 8004b4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b50:	9d00      	ldr	r5, [sp, #0]
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	4630      	mov	r0, r6
 8004b58:	4639      	mov	r1, r7
 8004b5a:	f7fb fe77 	bl	800084c <__aeabi_ddiv>
 8004b5e:	f7fb fffb 	bl	8000b58 <__aeabi_d2iz>
 8004b62:	9002      	str	r0, [sp, #8]
 8004b64:	f7fb fcde 	bl	8000524 <__aeabi_i2d>
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	f7fb fd44 	bl	80005f8 <__aeabi_dmul>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4630      	mov	r0, r6
 8004b76:	4639      	mov	r1, r7
 8004b78:	f7fb fb86 	bl	8000288 <__aeabi_dsub>
 8004b7c:	9e02      	ldr	r6, [sp, #8]
 8004b7e:	9f01      	ldr	r7, [sp, #4]
 8004b80:	3630      	adds	r6, #48	; 0x30
 8004b82:	f805 6b01 	strb.w	r6, [r5], #1
 8004b86:	9e00      	ldr	r6, [sp, #0]
 8004b88:	1bae      	subs	r6, r5, r6
 8004b8a:	42b7      	cmp	r7, r6
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	d137      	bne.n	8004c02 <_dtoa_r+0x722>
 8004b92:	f7fb fb7b 	bl	800028c <__adddf3>
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	460f      	mov	r7, r1
 8004b9e:	f7fb ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 8004ba2:	b9c8      	cbnz	r0, 8004bd8 <_dtoa_r+0x6f8>
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	4630      	mov	r0, r6
 8004baa:	4639      	mov	r1, r7
 8004bac:	f7fb ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bb0:	b110      	cbz	r0, 8004bb8 <_dtoa_r+0x6d8>
 8004bb2:	9b02      	ldr	r3, [sp, #8]
 8004bb4:	07d9      	lsls	r1, r3, #31
 8004bb6:	d40f      	bmi.n	8004bd8 <_dtoa_r+0x6f8>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	4659      	mov	r1, fp
 8004bbc:	f000 fe58 	bl	8005870 <_Bfree>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	702b      	strb	r3, [r5, #0]
 8004bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bc6:	f10a 0001 	add.w	r0, sl, #1
 8004bca:	6018      	str	r0, [r3, #0]
 8004bcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f43f acd8 	beq.w	8004584 <_dtoa_r+0xa4>
 8004bd4:	601d      	str	r5, [r3, #0]
 8004bd6:	e4d5      	b.n	8004584 <_dtoa_r+0xa4>
 8004bd8:	f8cd a01c 	str.w	sl, [sp, #28]
 8004bdc:	462b      	mov	r3, r5
 8004bde:	461d      	mov	r5, r3
 8004be0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004be4:	2a39      	cmp	r2, #57	; 0x39
 8004be6:	d108      	bne.n	8004bfa <_dtoa_r+0x71a>
 8004be8:	9a00      	ldr	r2, [sp, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d1f7      	bne.n	8004bde <_dtoa_r+0x6fe>
 8004bee:	9a07      	ldr	r2, [sp, #28]
 8004bf0:	9900      	ldr	r1, [sp, #0]
 8004bf2:	3201      	adds	r2, #1
 8004bf4:	9207      	str	r2, [sp, #28]
 8004bf6:	2230      	movs	r2, #48	; 0x30
 8004bf8:	700a      	strb	r2, [r1, #0]
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	3201      	adds	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e78c      	b.n	8004b1c <_dtoa_r+0x63c>
 8004c02:	4b7f      	ldr	r3, [pc, #508]	; (8004e00 <_dtoa_r+0x920>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	f7fb fcf7 	bl	80005f8 <__aeabi_dmul>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	f7fb ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d09b      	beq.n	8004b52 <_dtoa_r+0x672>
 8004c1a:	e7cd      	b.n	8004bb8 <_dtoa_r+0x6d8>
 8004c1c:	9a08      	ldr	r2, [sp, #32]
 8004c1e:	2a00      	cmp	r2, #0
 8004c20:	f000 80c4 	beq.w	8004dac <_dtoa_r+0x8cc>
 8004c24:	9a05      	ldr	r2, [sp, #20]
 8004c26:	2a01      	cmp	r2, #1
 8004c28:	f300 80a8 	bgt.w	8004d7c <_dtoa_r+0x89c>
 8004c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c2e:	2a00      	cmp	r2, #0
 8004c30:	f000 80a0 	beq.w	8004d74 <_dtoa_r+0x894>
 8004c34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c38:	9e06      	ldr	r6, [sp, #24]
 8004c3a:	4645      	mov	r5, r8
 8004c3c:	9a04      	ldr	r2, [sp, #16]
 8004c3e:	2101      	movs	r1, #1
 8004c40:	441a      	add	r2, r3
 8004c42:	4620      	mov	r0, r4
 8004c44:	4498      	add	r8, r3
 8004c46:	9204      	str	r2, [sp, #16]
 8004c48:	f000 ff18 	bl	8005a7c <__i2b>
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	2d00      	cmp	r5, #0
 8004c50:	dd0b      	ble.n	8004c6a <_dtoa_r+0x78a>
 8004c52:	9b04      	ldr	r3, [sp, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	dd08      	ble.n	8004c6a <_dtoa_r+0x78a>
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	9a04      	ldr	r2, [sp, #16]
 8004c5c:	bfa8      	it	ge
 8004c5e:	462b      	movge	r3, r5
 8004c60:	eba8 0803 	sub.w	r8, r8, r3
 8004c64:	1aed      	subs	r5, r5, r3
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	9b06      	ldr	r3, [sp, #24]
 8004c6c:	b1fb      	cbz	r3, 8004cae <_dtoa_r+0x7ce>
 8004c6e:	9b08      	ldr	r3, [sp, #32]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 809f 	beq.w	8004db4 <_dtoa_r+0x8d4>
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	dd11      	ble.n	8004c9e <_dtoa_r+0x7be>
 8004c7a:	4639      	mov	r1, r7
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 ffb8 	bl	8005bf4 <__pow5mult>
 8004c84:	465a      	mov	r2, fp
 8004c86:	4601      	mov	r1, r0
 8004c88:	4607      	mov	r7, r0
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 ff0c 	bl	8005aa8 <__multiply>
 8004c90:	4659      	mov	r1, fp
 8004c92:	9007      	str	r0, [sp, #28]
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 fdeb 	bl	8005870 <_Bfree>
 8004c9a:	9b07      	ldr	r3, [sp, #28]
 8004c9c:	469b      	mov	fp, r3
 8004c9e:	9b06      	ldr	r3, [sp, #24]
 8004ca0:	1b9a      	subs	r2, r3, r6
 8004ca2:	d004      	beq.n	8004cae <_dtoa_r+0x7ce>
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 ffa4 	bl	8005bf4 <__pow5mult>
 8004cac:	4683      	mov	fp, r0
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f000 fee3 	bl	8005a7c <__i2b>
 8004cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	4606      	mov	r6, r0
 8004cbc:	dd7c      	ble.n	8004db8 <_dtoa_r+0x8d8>
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4601      	mov	r1, r0
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 ff96 	bl	8005bf4 <__pow5mult>
 8004cc8:	9b05      	ldr	r3, [sp, #20]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	4606      	mov	r6, r0
 8004cce:	dd76      	ble.n	8004dbe <_dtoa_r+0x8de>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9306      	str	r3, [sp, #24]
 8004cd4:	6933      	ldr	r3, [r6, #16]
 8004cd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004cda:	6918      	ldr	r0, [r3, #16]
 8004cdc:	f000 fe7e 	bl	80059dc <__hi0bits>
 8004ce0:	f1c0 0020 	rsb	r0, r0, #32
 8004ce4:	9b04      	ldr	r3, [sp, #16]
 8004ce6:	4418      	add	r0, r3
 8004ce8:	f010 001f 	ands.w	r0, r0, #31
 8004cec:	f000 8086 	beq.w	8004dfc <_dtoa_r+0x91c>
 8004cf0:	f1c0 0320 	rsb	r3, r0, #32
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	dd7f      	ble.n	8004df8 <_dtoa_r+0x918>
 8004cf8:	f1c0 001c 	rsb	r0, r0, #28
 8004cfc:	9b04      	ldr	r3, [sp, #16]
 8004cfe:	4403      	add	r3, r0
 8004d00:	4480      	add	r8, r0
 8004d02:	4405      	add	r5, r0
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	f1b8 0f00 	cmp.w	r8, #0
 8004d0a:	dd05      	ble.n	8004d18 <_dtoa_r+0x838>
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	4642      	mov	r2, r8
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 ffc9 	bl	8005ca8 <__lshift>
 8004d16:	4683      	mov	fp, r0
 8004d18:	9b04      	ldr	r3, [sp, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dd05      	ble.n	8004d2a <_dtoa_r+0x84a>
 8004d1e:	4631      	mov	r1, r6
 8004d20:	461a      	mov	r2, r3
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 ffc0 	bl	8005ca8 <__lshift>
 8004d28:	4606      	mov	r6, r0
 8004d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d069      	beq.n	8004e04 <_dtoa_r+0x924>
 8004d30:	4631      	mov	r1, r6
 8004d32:	4658      	mov	r0, fp
 8004d34:	f001 f824 	bl	8005d80 <__mcmp>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	da63      	bge.n	8004e04 <_dtoa_r+0x924>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4659      	mov	r1, fp
 8004d40:	220a      	movs	r2, #10
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 fdb6 	bl	80058b4 <__multadd>
 8004d48:	9b08      	ldr	r3, [sp, #32]
 8004d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d4e:	4683      	mov	fp, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 818f 	beq.w	8005074 <_dtoa_r+0xb94>
 8004d56:	4639      	mov	r1, r7
 8004d58:	2300      	movs	r3, #0
 8004d5a:	220a      	movs	r2, #10
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 fda9 	bl	80058b4 <__multadd>
 8004d62:	f1b9 0f00 	cmp.w	r9, #0
 8004d66:	4607      	mov	r7, r0
 8004d68:	f300 808e 	bgt.w	8004e88 <_dtoa_r+0x9a8>
 8004d6c:	9b05      	ldr	r3, [sp, #20]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	dc50      	bgt.n	8004e14 <_dtoa_r+0x934>
 8004d72:	e089      	b.n	8004e88 <_dtoa_r+0x9a8>
 8004d74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d7a:	e75d      	b.n	8004c38 <_dtoa_r+0x758>
 8004d7c:	9b01      	ldr	r3, [sp, #4]
 8004d7e:	1e5e      	subs	r6, r3, #1
 8004d80:	9b06      	ldr	r3, [sp, #24]
 8004d82:	42b3      	cmp	r3, r6
 8004d84:	bfbf      	itttt	lt
 8004d86:	9b06      	ldrlt	r3, [sp, #24]
 8004d88:	9606      	strlt	r6, [sp, #24]
 8004d8a:	1af2      	sublt	r2, r6, r3
 8004d8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004d8e:	bfb6      	itet	lt
 8004d90:	189b      	addlt	r3, r3, r2
 8004d92:	1b9e      	subge	r6, r3, r6
 8004d94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004d96:	9b01      	ldr	r3, [sp, #4]
 8004d98:	bfb8      	it	lt
 8004d9a:	2600      	movlt	r6, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bfb5      	itete	lt
 8004da0:	eba8 0503 	sublt.w	r5, r8, r3
 8004da4:	9b01      	ldrge	r3, [sp, #4]
 8004da6:	2300      	movlt	r3, #0
 8004da8:	4645      	movge	r5, r8
 8004daa:	e747      	b.n	8004c3c <_dtoa_r+0x75c>
 8004dac:	9e06      	ldr	r6, [sp, #24]
 8004dae:	9f08      	ldr	r7, [sp, #32]
 8004db0:	4645      	mov	r5, r8
 8004db2:	e74c      	b.n	8004c4e <_dtoa_r+0x76e>
 8004db4:	9a06      	ldr	r2, [sp, #24]
 8004db6:	e775      	b.n	8004ca4 <_dtoa_r+0x7c4>
 8004db8:	9b05      	ldr	r3, [sp, #20]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	dc18      	bgt.n	8004df0 <_dtoa_r+0x910>
 8004dbe:	9b02      	ldr	r3, [sp, #8]
 8004dc0:	b9b3      	cbnz	r3, 8004df0 <_dtoa_r+0x910>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc8:	b9a3      	cbnz	r3, 8004df4 <_dtoa_r+0x914>
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	0d1b      	lsrs	r3, r3, #20
 8004dd2:	051b      	lsls	r3, r3, #20
 8004dd4:	b12b      	cbz	r3, 8004de2 <_dtoa_r+0x902>
 8004dd6:	9b04      	ldr	r3, [sp, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	f108 0801 	add.w	r8, r8, #1
 8004de0:	2301      	movs	r3, #1
 8004de2:	9306      	str	r3, [sp, #24]
 8004de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f47f af74 	bne.w	8004cd4 <_dtoa_r+0x7f4>
 8004dec:	2001      	movs	r0, #1
 8004dee:	e779      	b.n	8004ce4 <_dtoa_r+0x804>
 8004df0:	2300      	movs	r3, #0
 8004df2:	e7f6      	b.n	8004de2 <_dtoa_r+0x902>
 8004df4:	9b02      	ldr	r3, [sp, #8]
 8004df6:	e7f4      	b.n	8004de2 <_dtoa_r+0x902>
 8004df8:	d085      	beq.n	8004d06 <_dtoa_r+0x826>
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	301c      	adds	r0, #28
 8004dfe:	e77d      	b.n	8004cfc <_dtoa_r+0x81c>
 8004e00:	40240000 	.word	0x40240000
 8004e04:	9b01      	ldr	r3, [sp, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dc38      	bgt.n	8004e7c <_dtoa_r+0x99c>
 8004e0a:	9b05      	ldr	r3, [sp, #20]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	dd35      	ble.n	8004e7c <_dtoa_r+0x99c>
 8004e10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004e14:	f1b9 0f00 	cmp.w	r9, #0
 8004e18:	d10d      	bne.n	8004e36 <_dtoa_r+0x956>
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	2205      	movs	r2, #5
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fd47 	bl	80058b4 <__multadd>
 8004e26:	4601      	mov	r1, r0
 8004e28:	4606      	mov	r6, r0
 8004e2a:	4658      	mov	r0, fp
 8004e2c:	f000 ffa8 	bl	8005d80 <__mcmp>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f73f adbd 	bgt.w	80049b0 <_dtoa_r+0x4d0>
 8004e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e38:	9d00      	ldr	r5, [sp, #0]
 8004e3a:	ea6f 0a03 	mvn.w	sl, r3
 8004e3e:	f04f 0800 	mov.w	r8, #0
 8004e42:	4631      	mov	r1, r6
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 fd13 	bl	8005870 <_Bfree>
 8004e4a:	2f00      	cmp	r7, #0
 8004e4c:	f43f aeb4 	beq.w	8004bb8 <_dtoa_r+0x6d8>
 8004e50:	f1b8 0f00 	cmp.w	r8, #0
 8004e54:	d005      	beq.n	8004e62 <_dtoa_r+0x982>
 8004e56:	45b8      	cmp	r8, r7
 8004e58:	d003      	beq.n	8004e62 <_dtoa_r+0x982>
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 fd07 	bl	8005870 <_Bfree>
 8004e62:	4639      	mov	r1, r7
 8004e64:	4620      	mov	r0, r4
 8004e66:	f000 fd03 	bl	8005870 <_Bfree>
 8004e6a:	e6a5      	b.n	8004bb8 <_dtoa_r+0x6d8>
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	4637      	mov	r7, r6
 8004e70:	e7e1      	b.n	8004e36 <_dtoa_r+0x956>
 8004e72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004e74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004e78:	4637      	mov	r7, r6
 8004e7a:	e599      	b.n	80049b0 <_dtoa_r+0x4d0>
 8004e7c:	9b08      	ldr	r3, [sp, #32]
 8004e7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80fd 	beq.w	8005082 <_dtoa_r+0xba2>
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	dd05      	ble.n	8004e98 <_dtoa_r+0x9b8>
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	462a      	mov	r2, r5
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 ff09 	bl	8005ca8 <__lshift>
 8004e96:	4607      	mov	r7, r0
 8004e98:	9b06      	ldr	r3, [sp, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d05c      	beq.n	8004f58 <_dtoa_r+0xa78>
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 fca5 	bl	80057f0 <_Balloc>
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	b928      	cbnz	r0, 8004eb6 <_dtoa_r+0x9d6>
 8004eaa:	4b80      	ldr	r3, [pc, #512]	; (80050ac <_dtoa_r+0xbcc>)
 8004eac:	4602      	mov	r2, r0
 8004eae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004eb2:	f7ff bb2e 	b.w	8004512 <_dtoa_r+0x32>
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	3202      	adds	r2, #2
 8004eba:	0092      	lsls	r2, r2, #2
 8004ebc:	f107 010c 	add.w	r1, r7, #12
 8004ec0:	300c      	adds	r0, #12
 8004ec2:	f000 fc87 	bl	80057d4 <memcpy>
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 feec 	bl	8005ca8 <__lshift>
 8004ed0:	9b00      	ldr	r3, [sp, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	9b00      	ldr	r3, [sp, #0]
 8004ed8:	444b      	add	r3, r9
 8004eda:	9307      	str	r3, [sp, #28]
 8004edc:	9b02      	ldr	r3, [sp, #8]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	46b8      	mov	r8, r7
 8004ee4:	9306      	str	r3, [sp, #24]
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	4631      	mov	r1, r6
 8004eec:	3b01      	subs	r3, #1
 8004eee:	4658      	mov	r0, fp
 8004ef0:	9302      	str	r3, [sp, #8]
 8004ef2:	f7ff fa67 	bl	80043c4 <quorem>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	3330      	adds	r3, #48	; 0x30
 8004efa:	9004      	str	r0, [sp, #16]
 8004efc:	4641      	mov	r1, r8
 8004efe:	4658      	mov	r0, fp
 8004f00:	9308      	str	r3, [sp, #32]
 8004f02:	f000 ff3d 	bl	8005d80 <__mcmp>
 8004f06:	463a      	mov	r2, r7
 8004f08:	4681      	mov	r9, r0
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 ff53 	bl	8005db8 <__mdiff>
 8004f12:	68c2      	ldr	r2, [r0, #12]
 8004f14:	9b08      	ldr	r3, [sp, #32]
 8004f16:	4605      	mov	r5, r0
 8004f18:	bb02      	cbnz	r2, 8004f5c <_dtoa_r+0xa7c>
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	4658      	mov	r0, fp
 8004f1e:	f000 ff2f 	bl	8005d80 <__mcmp>
 8004f22:	9b08      	ldr	r3, [sp, #32]
 8004f24:	4602      	mov	r2, r0
 8004f26:	4629      	mov	r1, r5
 8004f28:	4620      	mov	r0, r4
 8004f2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004f2e:	f000 fc9f 	bl	8005870 <_Bfree>
 8004f32:	9b05      	ldr	r3, [sp, #20]
 8004f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f36:	9d01      	ldr	r5, [sp, #4]
 8004f38:	ea43 0102 	orr.w	r1, r3, r2
 8004f3c:	9b06      	ldr	r3, [sp, #24]
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	9b08      	ldr	r3, [sp, #32]
 8004f42:	d10d      	bne.n	8004f60 <_dtoa_r+0xa80>
 8004f44:	2b39      	cmp	r3, #57	; 0x39
 8004f46:	d029      	beq.n	8004f9c <_dtoa_r+0xabc>
 8004f48:	f1b9 0f00 	cmp.w	r9, #0
 8004f4c:	dd01      	ble.n	8004f52 <_dtoa_r+0xa72>
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	3331      	adds	r3, #49	; 0x31
 8004f52:	9a02      	ldr	r2, [sp, #8]
 8004f54:	7013      	strb	r3, [r2, #0]
 8004f56:	e774      	b.n	8004e42 <_dtoa_r+0x962>
 8004f58:	4638      	mov	r0, r7
 8004f5a:	e7b9      	b.n	8004ed0 <_dtoa_r+0x9f0>
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	e7e2      	b.n	8004f26 <_dtoa_r+0xa46>
 8004f60:	f1b9 0f00 	cmp.w	r9, #0
 8004f64:	db06      	blt.n	8004f74 <_dtoa_r+0xa94>
 8004f66:	9905      	ldr	r1, [sp, #20]
 8004f68:	ea41 0909 	orr.w	r9, r1, r9
 8004f6c:	9906      	ldr	r1, [sp, #24]
 8004f6e:	ea59 0101 	orrs.w	r1, r9, r1
 8004f72:	d120      	bne.n	8004fb6 <_dtoa_r+0xad6>
 8004f74:	2a00      	cmp	r2, #0
 8004f76:	ddec      	ble.n	8004f52 <_dtoa_r+0xa72>
 8004f78:	4659      	mov	r1, fp
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	f000 fe92 	bl	8005ca8 <__lshift>
 8004f84:	4631      	mov	r1, r6
 8004f86:	4683      	mov	fp, r0
 8004f88:	f000 fefa 	bl	8005d80 <__mcmp>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	dc02      	bgt.n	8004f98 <_dtoa_r+0xab8>
 8004f92:	d1de      	bne.n	8004f52 <_dtoa_r+0xa72>
 8004f94:	07da      	lsls	r2, r3, #31
 8004f96:	d5dc      	bpl.n	8004f52 <_dtoa_r+0xa72>
 8004f98:	2b39      	cmp	r3, #57	; 0x39
 8004f9a:	d1d8      	bne.n	8004f4e <_dtoa_r+0xa6e>
 8004f9c:	9a02      	ldr	r2, [sp, #8]
 8004f9e:	2339      	movs	r3, #57	; 0x39
 8004fa0:	7013      	strb	r3, [r2, #0]
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	461d      	mov	r5, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fac:	2a39      	cmp	r2, #57	; 0x39
 8004fae:	d050      	beq.n	8005052 <_dtoa_r+0xb72>
 8004fb0:	3201      	adds	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	e745      	b.n	8004e42 <_dtoa_r+0x962>
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	dd03      	ble.n	8004fc2 <_dtoa_r+0xae2>
 8004fba:	2b39      	cmp	r3, #57	; 0x39
 8004fbc:	d0ee      	beq.n	8004f9c <_dtoa_r+0xabc>
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	e7c7      	b.n	8004f52 <_dtoa_r+0xa72>
 8004fc2:	9a01      	ldr	r2, [sp, #4]
 8004fc4:	9907      	ldr	r1, [sp, #28]
 8004fc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004fca:	428a      	cmp	r2, r1
 8004fcc:	d02a      	beq.n	8005024 <_dtoa_r+0xb44>
 8004fce:	4659      	mov	r1, fp
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	220a      	movs	r2, #10
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 fc6d 	bl	80058b4 <__multadd>
 8004fda:	45b8      	cmp	r8, r7
 8004fdc:	4683      	mov	fp, r0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	f04f 020a 	mov.w	r2, #10
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	4620      	mov	r0, r4
 8004fea:	d107      	bne.n	8004ffc <_dtoa_r+0xb1c>
 8004fec:	f000 fc62 	bl	80058b4 <__multadd>
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	e775      	b.n	8004ee8 <_dtoa_r+0xa08>
 8004ffc:	f000 fc5a 	bl	80058b4 <__multadd>
 8005000:	4639      	mov	r1, r7
 8005002:	4680      	mov	r8, r0
 8005004:	2300      	movs	r3, #0
 8005006:	220a      	movs	r2, #10
 8005008:	4620      	mov	r0, r4
 800500a:	f000 fc53 	bl	80058b4 <__multadd>
 800500e:	4607      	mov	r7, r0
 8005010:	e7f0      	b.n	8004ff4 <_dtoa_r+0xb14>
 8005012:	f1b9 0f00 	cmp.w	r9, #0
 8005016:	9a00      	ldr	r2, [sp, #0]
 8005018:	bfcc      	ite	gt
 800501a:	464d      	movgt	r5, r9
 800501c:	2501      	movle	r5, #1
 800501e:	4415      	add	r5, r2
 8005020:	f04f 0800 	mov.w	r8, #0
 8005024:	4659      	mov	r1, fp
 8005026:	2201      	movs	r2, #1
 8005028:	4620      	mov	r0, r4
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	f000 fe3c 	bl	8005ca8 <__lshift>
 8005030:	4631      	mov	r1, r6
 8005032:	4683      	mov	fp, r0
 8005034:	f000 fea4 	bl	8005d80 <__mcmp>
 8005038:	2800      	cmp	r0, #0
 800503a:	dcb2      	bgt.n	8004fa2 <_dtoa_r+0xac2>
 800503c:	d102      	bne.n	8005044 <_dtoa_r+0xb64>
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	07db      	lsls	r3, r3, #31
 8005042:	d4ae      	bmi.n	8004fa2 <_dtoa_r+0xac2>
 8005044:	462b      	mov	r3, r5
 8005046:	461d      	mov	r5, r3
 8005048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800504c:	2a30      	cmp	r2, #48	; 0x30
 800504e:	d0fa      	beq.n	8005046 <_dtoa_r+0xb66>
 8005050:	e6f7      	b.n	8004e42 <_dtoa_r+0x962>
 8005052:	9a00      	ldr	r2, [sp, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d1a5      	bne.n	8004fa4 <_dtoa_r+0xac4>
 8005058:	f10a 0a01 	add.w	sl, sl, #1
 800505c:	2331      	movs	r3, #49	; 0x31
 800505e:	e779      	b.n	8004f54 <_dtoa_r+0xa74>
 8005060:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <_dtoa_r+0xbd0>)
 8005062:	f7ff baaf 	b.w	80045c4 <_dtoa_r+0xe4>
 8005066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005068:	2b00      	cmp	r3, #0
 800506a:	f47f aa86 	bne.w	800457a <_dtoa_r+0x9a>
 800506e:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <_dtoa_r+0xbd4>)
 8005070:	f7ff baa8 	b.w	80045c4 <_dtoa_r+0xe4>
 8005074:	f1b9 0f00 	cmp.w	r9, #0
 8005078:	dc03      	bgt.n	8005082 <_dtoa_r+0xba2>
 800507a:	9b05      	ldr	r3, [sp, #20]
 800507c:	2b02      	cmp	r3, #2
 800507e:	f73f aec9 	bgt.w	8004e14 <_dtoa_r+0x934>
 8005082:	9d00      	ldr	r5, [sp, #0]
 8005084:	4631      	mov	r1, r6
 8005086:	4658      	mov	r0, fp
 8005088:	f7ff f99c 	bl	80043c4 <quorem>
 800508c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005090:	f805 3b01 	strb.w	r3, [r5], #1
 8005094:	9a00      	ldr	r2, [sp, #0]
 8005096:	1aaa      	subs	r2, r5, r2
 8005098:	4591      	cmp	r9, r2
 800509a:	ddba      	ble.n	8005012 <_dtoa_r+0xb32>
 800509c:	4659      	mov	r1, fp
 800509e:	2300      	movs	r3, #0
 80050a0:	220a      	movs	r2, #10
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 fc06 	bl	80058b4 <__multadd>
 80050a8:	4683      	mov	fp, r0
 80050aa:	e7eb      	b.n	8005084 <_dtoa_r+0xba4>
 80050ac:	0800740c 	.word	0x0800740c
 80050b0:	08007208 	.word	0x08007208
 80050b4:	08007389 	.word	0x08007389

080050b8 <rshift>:
 80050b8:	6903      	ldr	r3, [r0, #16]
 80050ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80050be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80050c6:	f100 0414 	add.w	r4, r0, #20
 80050ca:	dd45      	ble.n	8005158 <rshift+0xa0>
 80050cc:	f011 011f 	ands.w	r1, r1, #31
 80050d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80050d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80050d8:	d10c      	bne.n	80050f4 <rshift+0x3c>
 80050da:	f100 0710 	add.w	r7, r0, #16
 80050de:	4629      	mov	r1, r5
 80050e0:	42b1      	cmp	r1, r6
 80050e2:	d334      	bcc.n	800514e <rshift+0x96>
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	1eea      	subs	r2, r5, #3
 80050ea:	4296      	cmp	r6, r2
 80050ec:	bf38      	it	cc
 80050ee:	2300      	movcc	r3, #0
 80050f0:	4423      	add	r3, r4
 80050f2:	e015      	b.n	8005120 <rshift+0x68>
 80050f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80050f8:	f1c1 0820 	rsb	r8, r1, #32
 80050fc:	40cf      	lsrs	r7, r1
 80050fe:	f105 0e04 	add.w	lr, r5, #4
 8005102:	46a1      	mov	r9, r4
 8005104:	4576      	cmp	r6, lr
 8005106:	46f4      	mov	ip, lr
 8005108:	d815      	bhi.n	8005136 <rshift+0x7e>
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009a      	lsls	r2, r3, #2
 800510e:	3a04      	subs	r2, #4
 8005110:	3501      	adds	r5, #1
 8005112:	42ae      	cmp	r6, r5
 8005114:	bf38      	it	cc
 8005116:	2200      	movcc	r2, #0
 8005118:	18a3      	adds	r3, r4, r2
 800511a:	50a7      	str	r7, [r4, r2]
 800511c:	b107      	cbz	r7, 8005120 <rshift+0x68>
 800511e:	3304      	adds	r3, #4
 8005120:	1b1a      	subs	r2, r3, r4
 8005122:	42a3      	cmp	r3, r4
 8005124:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005128:	bf08      	it	eq
 800512a:	2300      	moveq	r3, #0
 800512c:	6102      	str	r2, [r0, #16]
 800512e:	bf08      	it	eq
 8005130:	6143      	streq	r3, [r0, #20]
 8005132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005136:	f8dc c000 	ldr.w	ip, [ip]
 800513a:	fa0c fc08 	lsl.w	ip, ip, r8
 800513e:	ea4c 0707 	orr.w	r7, ip, r7
 8005142:	f849 7b04 	str.w	r7, [r9], #4
 8005146:	f85e 7b04 	ldr.w	r7, [lr], #4
 800514a:	40cf      	lsrs	r7, r1
 800514c:	e7da      	b.n	8005104 <rshift+0x4c>
 800514e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005152:	f847 cf04 	str.w	ip, [r7, #4]!
 8005156:	e7c3      	b.n	80050e0 <rshift+0x28>
 8005158:	4623      	mov	r3, r4
 800515a:	e7e1      	b.n	8005120 <rshift+0x68>

0800515c <__hexdig_fun>:
 800515c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005160:	2b09      	cmp	r3, #9
 8005162:	d802      	bhi.n	800516a <__hexdig_fun+0xe>
 8005164:	3820      	subs	r0, #32
 8005166:	b2c0      	uxtb	r0, r0
 8005168:	4770      	bx	lr
 800516a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800516e:	2b05      	cmp	r3, #5
 8005170:	d801      	bhi.n	8005176 <__hexdig_fun+0x1a>
 8005172:	3847      	subs	r0, #71	; 0x47
 8005174:	e7f7      	b.n	8005166 <__hexdig_fun+0xa>
 8005176:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800517a:	2b05      	cmp	r3, #5
 800517c:	d801      	bhi.n	8005182 <__hexdig_fun+0x26>
 800517e:	3827      	subs	r0, #39	; 0x27
 8005180:	e7f1      	b.n	8005166 <__hexdig_fun+0xa>
 8005182:	2000      	movs	r0, #0
 8005184:	4770      	bx	lr
	...

08005188 <__gethex>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	ed2d 8b02 	vpush	{d8}
 8005190:	b089      	sub	sp, #36	; 0x24
 8005192:	ee08 0a10 	vmov	s16, r0
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	4bbc      	ldr	r3, [pc, #752]	; (800548c <__gethex+0x304>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	468b      	mov	fp, r1
 80051a2:	4690      	mov	r8, r2
 80051a4:	f7fb f814 	bl	80001d0 <strlen>
 80051a8:	9b01      	ldr	r3, [sp, #4]
 80051aa:	f8db 2000 	ldr.w	r2, [fp]
 80051ae:	4403      	add	r3, r0
 80051b0:	4682      	mov	sl, r0
 80051b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80051b6:	9305      	str	r3, [sp, #20]
 80051b8:	1c93      	adds	r3, r2, #2
 80051ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80051be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80051c2:	32fe      	adds	r2, #254	; 0xfe
 80051c4:	18d1      	adds	r1, r2, r3
 80051c6:	461f      	mov	r7, r3
 80051c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80051cc:	9100      	str	r1, [sp, #0]
 80051ce:	2830      	cmp	r0, #48	; 0x30
 80051d0:	d0f8      	beq.n	80051c4 <__gethex+0x3c>
 80051d2:	f7ff ffc3 	bl	800515c <__hexdig_fun>
 80051d6:	4604      	mov	r4, r0
 80051d8:	2800      	cmp	r0, #0
 80051da:	d13a      	bne.n	8005252 <__gethex+0xca>
 80051dc:	9901      	ldr	r1, [sp, #4]
 80051de:	4652      	mov	r2, sl
 80051e0:	4638      	mov	r0, r7
 80051e2:	f001 f9ed 	bl	80065c0 <strncmp>
 80051e6:	4605      	mov	r5, r0
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d168      	bne.n	80052be <__gethex+0x136>
 80051ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 80051f0:	eb07 060a 	add.w	r6, r7, sl
 80051f4:	f7ff ffb2 	bl	800515c <__hexdig_fun>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d062      	beq.n	80052c2 <__gethex+0x13a>
 80051fc:	4633      	mov	r3, r6
 80051fe:	7818      	ldrb	r0, [r3, #0]
 8005200:	2830      	cmp	r0, #48	; 0x30
 8005202:	461f      	mov	r7, r3
 8005204:	f103 0301 	add.w	r3, r3, #1
 8005208:	d0f9      	beq.n	80051fe <__gethex+0x76>
 800520a:	f7ff ffa7 	bl	800515c <__hexdig_fun>
 800520e:	2301      	movs	r3, #1
 8005210:	fab0 f480 	clz	r4, r0
 8005214:	0964      	lsrs	r4, r4, #5
 8005216:	4635      	mov	r5, r6
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	463a      	mov	r2, r7
 800521c:	4616      	mov	r6, r2
 800521e:	3201      	adds	r2, #1
 8005220:	7830      	ldrb	r0, [r6, #0]
 8005222:	f7ff ff9b 	bl	800515c <__hexdig_fun>
 8005226:	2800      	cmp	r0, #0
 8005228:	d1f8      	bne.n	800521c <__gethex+0x94>
 800522a:	9901      	ldr	r1, [sp, #4]
 800522c:	4652      	mov	r2, sl
 800522e:	4630      	mov	r0, r6
 8005230:	f001 f9c6 	bl	80065c0 <strncmp>
 8005234:	b980      	cbnz	r0, 8005258 <__gethex+0xd0>
 8005236:	b94d      	cbnz	r5, 800524c <__gethex+0xc4>
 8005238:	eb06 050a 	add.w	r5, r6, sl
 800523c:	462a      	mov	r2, r5
 800523e:	4616      	mov	r6, r2
 8005240:	3201      	adds	r2, #1
 8005242:	7830      	ldrb	r0, [r6, #0]
 8005244:	f7ff ff8a 	bl	800515c <__hexdig_fun>
 8005248:	2800      	cmp	r0, #0
 800524a:	d1f8      	bne.n	800523e <__gethex+0xb6>
 800524c:	1bad      	subs	r5, r5, r6
 800524e:	00ad      	lsls	r5, r5, #2
 8005250:	e004      	b.n	800525c <__gethex+0xd4>
 8005252:	2400      	movs	r4, #0
 8005254:	4625      	mov	r5, r4
 8005256:	e7e0      	b.n	800521a <__gethex+0x92>
 8005258:	2d00      	cmp	r5, #0
 800525a:	d1f7      	bne.n	800524c <__gethex+0xc4>
 800525c:	7833      	ldrb	r3, [r6, #0]
 800525e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005262:	2b50      	cmp	r3, #80	; 0x50
 8005264:	d13b      	bne.n	80052de <__gethex+0x156>
 8005266:	7873      	ldrb	r3, [r6, #1]
 8005268:	2b2b      	cmp	r3, #43	; 0x2b
 800526a:	d02c      	beq.n	80052c6 <__gethex+0x13e>
 800526c:	2b2d      	cmp	r3, #45	; 0x2d
 800526e:	d02e      	beq.n	80052ce <__gethex+0x146>
 8005270:	1c71      	adds	r1, r6, #1
 8005272:	f04f 0900 	mov.w	r9, #0
 8005276:	7808      	ldrb	r0, [r1, #0]
 8005278:	f7ff ff70 	bl	800515c <__hexdig_fun>
 800527c:	1e43      	subs	r3, r0, #1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b18      	cmp	r3, #24
 8005282:	d82c      	bhi.n	80052de <__gethex+0x156>
 8005284:	f1a0 0210 	sub.w	r2, r0, #16
 8005288:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800528c:	f7ff ff66 	bl	800515c <__hexdig_fun>
 8005290:	1e43      	subs	r3, r0, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b18      	cmp	r3, #24
 8005296:	d91d      	bls.n	80052d4 <__gethex+0x14c>
 8005298:	f1b9 0f00 	cmp.w	r9, #0
 800529c:	d000      	beq.n	80052a0 <__gethex+0x118>
 800529e:	4252      	negs	r2, r2
 80052a0:	4415      	add	r5, r2
 80052a2:	f8cb 1000 	str.w	r1, [fp]
 80052a6:	b1e4      	cbz	r4, 80052e2 <__gethex+0x15a>
 80052a8:	9b00      	ldr	r3, [sp, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bf14      	ite	ne
 80052ae:	2700      	movne	r7, #0
 80052b0:	2706      	moveq	r7, #6
 80052b2:	4638      	mov	r0, r7
 80052b4:	b009      	add	sp, #36	; 0x24
 80052b6:	ecbd 8b02 	vpop	{d8}
 80052ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052be:	463e      	mov	r6, r7
 80052c0:	4625      	mov	r5, r4
 80052c2:	2401      	movs	r4, #1
 80052c4:	e7ca      	b.n	800525c <__gethex+0xd4>
 80052c6:	f04f 0900 	mov.w	r9, #0
 80052ca:	1cb1      	adds	r1, r6, #2
 80052cc:	e7d3      	b.n	8005276 <__gethex+0xee>
 80052ce:	f04f 0901 	mov.w	r9, #1
 80052d2:	e7fa      	b.n	80052ca <__gethex+0x142>
 80052d4:	230a      	movs	r3, #10
 80052d6:	fb03 0202 	mla	r2, r3, r2, r0
 80052da:	3a10      	subs	r2, #16
 80052dc:	e7d4      	b.n	8005288 <__gethex+0x100>
 80052de:	4631      	mov	r1, r6
 80052e0:	e7df      	b.n	80052a2 <__gethex+0x11a>
 80052e2:	1bf3      	subs	r3, r6, r7
 80052e4:	3b01      	subs	r3, #1
 80052e6:	4621      	mov	r1, r4
 80052e8:	2b07      	cmp	r3, #7
 80052ea:	dc0b      	bgt.n	8005304 <__gethex+0x17c>
 80052ec:	ee18 0a10 	vmov	r0, s16
 80052f0:	f000 fa7e 	bl	80057f0 <_Balloc>
 80052f4:	4604      	mov	r4, r0
 80052f6:	b940      	cbnz	r0, 800530a <__gethex+0x182>
 80052f8:	4b65      	ldr	r3, [pc, #404]	; (8005490 <__gethex+0x308>)
 80052fa:	4602      	mov	r2, r0
 80052fc:	21de      	movs	r1, #222	; 0xde
 80052fe:	4865      	ldr	r0, [pc, #404]	; (8005494 <__gethex+0x30c>)
 8005300:	f001 f97e 	bl	8006600 <__assert_func>
 8005304:	3101      	adds	r1, #1
 8005306:	105b      	asrs	r3, r3, #1
 8005308:	e7ee      	b.n	80052e8 <__gethex+0x160>
 800530a:	f100 0914 	add.w	r9, r0, #20
 800530e:	f04f 0b00 	mov.w	fp, #0
 8005312:	f1ca 0301 	rsb	r3, sl, #1
 8005316:	f8cd 9008 	str.w	r9, [sp, #8]
 800531a:	f8cd b000 	str.w	fp, [sp]
 800531e:	9306      	str	r3, [sp, #24]
 8005320:	42b7      	cmp	r7, r6
 8005322:	d340      	bcc.n	80053a6 <__gethex+0x21e>
 8005324:	9802      	ldr	r0, [sp, #8]
 8005326:	9b00      	ldr	r3, [sp, #0]
 8005328:	f840 3b04 	str.w	r3, [r0], #4
 800532c:	eba0 0009 	sub.w	r0, r0, r9
 8005330:	1080      	asrs	r0, r0, #2
 8005332:	0146      	lsls	r6, r0, #5
 8005334:	6120      	str	r0, [r4, #16]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb50 	bl	80059dc <__hi0bits>
 800533c:	1a30      	subs	r0, r6, r0
 800533e:	f8d8 6000 	ldr.w	r6, [r8]
 8005342:	42b0      	cmp	r0, r6
 8005344:	dd63      	ble.n	800540e <__gethex+0x286>
 8005346:	1b87      	subs	r7, r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	4620      	mov	r0, r4
 800534c:	f000 feea 	bl	8006124 <__any_on>
 8005350:	4682      	mov	sl, r0
 8005352:	b1a8      	cbz	r0, 8005380 <__gethex+0x1f8>
 8005354:	1e7b      	subs	r3, r7, #1
 8005356:	1159      	asrs	r1, r3, #5
 8005358:	f003 021f 	and.w	r2, r3, #31
 800535c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005360:	f04f 0a01 	mov.w	sl, #1
 8005364:	fa0a f202 	lsl.w	r2, sl, r2
 8005368:	420a      	tst	r2, r1
 800536a:	d009      	beq.n	8005380 <__gethex+0x1f8>
 800536c:	4553      	cmp	r3, sl
 800536e:	dd05      	ble.n	800537c <__gethex+0x1f4>
 8005370:	1eb9      	subs	r1, r7, #2
 8005372:	4620      	mov	r0, r4
 8005374:	f000 fed6 	bl	8006124 <__any_on>
 8005378:	2800      	cmp	r0, #0
 800537a:	d145      	bne.n	8005408 <__gethex+0x280>
 800537c:	f04f 0a02 	mov.w	sl, #2
 8005380:	4639      	mov	r1, r7
 8005382:	4620      	mov	r0, r4
 8005384:	f7ff fe98 	bl	80050b8 <rshift>
 8005388:	443d      	add	r5, r7
 800538a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800538e:	42ab      	cmp	r3, r5
 8005390:	da4c      	bge.n	800542c <__gethex+0x2a4>
 8005392:	ee18 0a10 	vmov	r0, s16
 8005396:	4621      	mov	r1, r4
 8005398:	f000 fa6a 	bl	8005870 <_Bfree>
 800539c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800539e:	2300      	movs	r3, #0
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	27a3      	movs	r7, #163	; 0xa3
 80053a4:	e785      	b.n	80052b2 <__gethex+0x12a>
 80053a6:	1e73      	subs	r3, r6, #1
 80053a8:	9a05      	ldr	r2, [sp, #20]
 80053aa:	9303      	str	r3, [sp, #12]
 80053ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d019      	beq.n	80053e8 <__gethex+0x260>
 80053b4:	f1bb 0f20 	cmp.w	fp, #32
 80053b8:	d107      	bne.n	80053ca <__gethex+0x242>
 80053ba:	9b02      	ldr	r3, [sp, #8]
 80053bc:	9a00      	ldr	r2, [sp, #0]
 80053be:	f843 2b04 	str.w	r2, [r3], #4
 80053c2:	9302      	str	r3, [sp, #8]
 80053c4:	2300      	movs	r3, #0
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	469b      	mov	fp, r3
 80053ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80053ce:	f7ff fec5 	bl	800515c <__hexdig_fun>
 80053d2:	9b00      	ldr	r3, [sp, #0]
 80053d4:	f000 000f 	and.w	r0, r0, #15
 80053d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80053dc:	4303      	orrs	r3, r0
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	f10b 0b04 	add.w	fp, fp, #4
 80053e4:	9b03      	ldr	r3, [sp, #12]
 80053e6:	e00d      	b.n	8005404 <__gethex+0x27c>
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	9a06      	ldr	r2, [sp, #24]
 80053ec:	4413      	add	r3, r2
 80053ee:	42bb      	cmp	r3, r7
 80053f0:	d3e0      	bcc.n	80053b4 <__gethex+0x22c>
 80053f2:	4618      	mov	r0, r3
 80053f4:	9901      	ldr	r1, [sp, #4]
 80053f6:	9307      	str	r3, [sp, #28]
 80053f8:	4652      	mov	r2, sl
 80053fa:	f001 f8e1 	bl	80065c0 <strncmp>
 80053fe:	9b07      	ldr	r3, [sp, #28]
 8005400:	2800      	cmp	r0, #0
 8005402:	d1d7      	bne.n	80053b4 <__gethex+0x22c>
 8005404:	461e      	mov	r6, r3
 8005406:	e78b      	b.n	8005320 <__gethex+0x198>
 8005408:	f04f 0a03 	mov.w	sl, #3
 800540c:	e7b8      	b.n	8005380 <__gethex+0x1f8>
 800540e:	da0a      	bge.n	8005426 <__gethex+0x29e>
 8005410:	1a37      	subs	r7, r6, r0
 8005412:	4621      	mov	r1, r4
 8005414:	ee18 0a10 	vmov	r0, s16
 8005418:	463a      	mov	r2, r7
 800541a:	f000 fc45 	bl	8005ca8 <__lshift>
 800541e:	1bed      	subs	r5, r5, r7
 8005420:	4604      	mov	r4, r0
 8005422:	f100 0914 	add.w	r9, r0, #20
 8005426:	f04f 0a00 	mov.w	sl, #0
 800542a:	e7ae      	b.n	800538a <__gethex+0x202>
 800542c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005430:	42a8      	cmp	r0, r5
 8005432:	dd72      	ble.n	800551a <__gethex+0x392>
 8005434:	1b45      	subs	r5, r0, r5
 8005436:	42ae      	cmp	r6, r5
 8005438:	dc36      	bgt.n	80054a8 <__gethex+0x320>
 800543a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d02a      	beq.n	8005498 <__gethex+0x310>
 8005442:	2b03      	cmp	r3, #3
 8005444:	d02c      	beq.n	80054a0 <__gethex+0x318>
 8005446:	2b01      	cmp	r3, #1
 8005448:	d115      	bne.n	8005476 <__gethex+0x2ee>
 800544a:	42ae      	cmp	r6, r5
 800544c:	d113      	bne.n	8005476 <__gethex+0x2ee>
 800544e:	2e01      	cmp	r6, #1
 8005450:	d10b      	bne.n	800546a <__gethex+0x2e2>
 8005452:	9a04      	ldr	r2, [sp, #16]
 8005454:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	2301      	movs	r3, #1
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	f8c9 3000 	str.w	r3, [r9]
 8005462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005464:	2762      	movs	r7, #98	; 0x62
 8005466:	601c      	str	r4, [r3, #0]
 8005468:	e723      	b.n	80052b2 <__gethex+0x12a>
 800546a:	1e71      	subs	r1, r6, #1
 800546c:	4620      	mov	r0, r4
 800546e:	f000 fe59 	bl	8006124 <__any_on>
 8005472:	2800      	cmp	r0, #0
 8005474:	d1ed      	bne.n	8005452 <__gethex+0x2ca>
 8005476:	ee18 0a10 	vmov	r0, s16
 800547a:	4621      	mov	r1, r4
 800547c:	f000 f9f8 	bl	8005870 <_Bfree>
 8005480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005482:	2300      	movs	r3, #0
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	2750      	movs	r7, #80	; 0x50
 8005488:	e713      	b.n	80052b2 <__gethex+0x12a>
 800548a:	bf00      	nop
 800548c:	08007488 	.word	0x08007488
 8005490:	0800740c 	.word	0x0800740c
 8005494:	0800741d 	.word	0x0800741d
 8005498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1eb      	bne.n	8005476 <__gethex+0x2ee>
 800549e:	e7d8      	b.n	8005452 <__gethex+0x2ca>
 80054a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1d5      	bne.n	8005452 <__gethex+0x2ca>
 80054a6:	e7e6      	b.n	8005476 <__gethex+0x2ee>
 80054a8:	1e6f      	subs	r7, r5, #1
 80054aa:	f1ba 0f00 	cmp.w	sl, #0
 80054ae:	d131      	bne.n	8005514 <__gethex+0x38c>
 80054b0:	b127      	cbz	r7, 80054bc <__gethex+0x334>
 80054b2:	4639      	mov	r1, r7
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fe35 	bl	8006124 <__any_on>
 80054ba:	4682      	mov	sl, r0
 80054bc:	117b      	asrs	r3, r7, #5
 80054be:	2101      	movs	r1, #1
 80054c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80054c4:	f007 071f 	and.w	r7, r7, #31
 80054c8:	fa01 f707 	lsl.w	r7, r1, r7
 80054cc:	421f      	tst	r7, r3
 80054ce:	4629      	mov	r1, r5
 80054d0:	4620      	mov	r0, r4
 80054d2:	bf18      	it	ne
 80054d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80054d8:	1b76      	subs	r6, r6, r5
 80054da:	f7ff fded 	bl	80050b8 <rshift>
 80054de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80054e2:	2702      	movs	r7, #2
 80054e4:	f1ba 0f00 	cmp.w	sl, #0
 80054e8:	d048      	beq.n	800557c <__gethex+0x3f4>
 80054ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d015      	beq.n	800551e <__gethex+0x396>
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d017      	beq.n	8005526 <__gethex+0x39e>
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d109      	bne.n	800550e <__gethex+0x386>
 80054fa:	f01a 0f02 	tst.w	sl, #2
 80054fe:	d006      	beq.n	800550e <__gethex+0x386>
 8005500:	f8d9 0000 	ldr.w	r0, [r9]
 8005504:	ea4a 0a00 	orr.w	sl, sl, r0
 8005508:	f01a 0f01 	tst.w	sl, #1
 800550c:	d10e      	bne.n	800552c <__gethex+0x3a4>
 800550e:	f047 0710 	orr.w	r7, r7, #16
 8005512:	e033      	b.n	800557c <__gethex+0x3f4>
 8005514:	f04f 0a01 	mov.w	sl, #1
 8005518:	e7d0      	b.n	80054bc <__gethex+0x334>
 800551a:	2701      	movs	r7, #1
 800551c:	e7e2      	b.n	80054e4 <__gethex+0x35c>
 800551e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005520:	f1c3 0301 	rsb	r3, r3, #1
 8005524:	9315      	str	r3, [sp, #84]	; 0x54
 8005526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <__gethex+0x386>
 800552c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005530:	f104 0314 	add.w	r3, r4, #20
 8005534:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005538:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800553c:	f04f 0c00 	mov.w	ip, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f853 2b04 	ldr.w	r2, [r3], #4
 8005546:	f1b2 3fff 	cmp.w	r2, #4294967295
 800554a:	d01c      	beq.n	8005586 <__gethex+0x3fe>
 800554c:	3201      	adds	r2, #1
 800554e:	6002      	str	r2, [r0, #0]
 8005550:	2f02      	cmp	r7, #2
 8005552:	f104 0314 	add.w	r3, r4, #20
 8005556:	d13f      	bne.n	80055d8 <__gethex+0x450>
 8005558:	f8d8 2000 	ldr.w	r2, [r8]
 800555c:	3a01      	subs	r2, #1
 800555e:	42b2      	cmp	r2, r6
 8005560:	d10a      	bne.n	8005578 <__gethex+0x3f0>
 8005562:	1171      	asrs	r1, r6, #5
 8005564:	2201      	movs	r2, #1
 8005566:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800556a:	f006 061f 	and.w	r6, r6, #31
 800556e:	fa02 f606 	lsl.w	r6, r2, r6
 8005572:	421e      	tst	r6, r3
 8005574:	bf18      	it	ne
 8005576:	4617      	movne	r7, r2
 8005578:	f047 0720 	orr.w	r7, r7, #32
 800557c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800557e:	601c      	str	r4, [r3, #0]
 8005580:	9b04      	ldr	r3, [sp, #16]
 8005582:	601d      	str	r5, [r3, #0]
 8005584:	e695      	b.n	80052b2 <__gethex+0x12a>
 8005586:	4299      	cmp	r1, r3
 8005588:	f843 cc04 	str.w	ip, [r3, #-4]
 800558c:	d8d8      	bhi.n	8005540 <__gethex+0x3b8>
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	459b      	cmp	fp, r3
 8005592:	db19      	blt.n	80055c8 <__gethex+0x440>
 8005594:	6861      	ldr	r1, [r4, #4]
 8005596:	ee18 0a10 	vmov	r0, s16
 800559a:	3101      	adds	r1, #1
 800559c:	f000 f928 	bl	80057f0 <_Balloc>
 80055a0:	4681      	mov	r9, r0
 80055a2:	b918      	cbnz	r0, 80055ac <__gethex+0x424>
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <__gethex+0x488>)
 80055a6:	4602      	mov	r2, r0
 80055a8:	2184      	movs	r1, #132	; 0x84
 80055aa:	e6a8      	b.n	80052fe <__gethex+0x176>
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	3202      	adds	r2, #2
 80055b0:	f104 010c 	add.w	r1, r4, #12
 80055b4:	0092      	lsls	r2, r2, #2
 80055b6:	300c      	adds	r0, #12
 80055b8:	f000 f90c 	bl	80057d4 <memcpy>
 80055bc:	4621      	mov	r1, r4
 80055be:	ee18 0a10 	vmov	r0, s16
 80055c2:	f000 f955 	bl	8005870 <_Bfree>
 80055c6:	464c      	mov	r4, r9
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055d0:	6122      	str	r2, [r4, #16]
 80055d2:	2201      	movs	r2, #1
 80055d4:	615a      	str	r2, [r3, #20]
 80055d6:	e7bb      	b.n	8005550 <__gethex+0x3c8>
 80055d8:	6922      	ldr	r2, [r4, #16]
 80055da:	455a      	cmp	r2, fp
 80055dc:	dd0b      	ble.n	80055f6 <__gethex+0x46e>
 80055de:	2101      	movs	r1, #1
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7ff fd69 	bl	80050b8 <rshift>
 80055e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80055ea:	3501      	adds	r5, #1
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	f6ff aed0 	blt.w	8005392 <__gethex+0x20a>
 80055f2:	2701      	movs	r7, #1
 80055f4:	e7c0      	b.n	8005578 <__gethex+0x3f0>
 80055f6:	f016 061f 	ands.w	r6, r6, #31
 80055fa:	d0fa      	beq.n	80055f2 <__gethex+0x46a>
 80055fc:	449a      	add	sl, r3
 80055fe:	f1c6 0620 	rsb	r6, r6, #32
 8005602:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005606:	f000 f9e9 	bl	80059dc <__hi0bits>
 800560a:	42b0      	cmp	r0, r6
 800560c:	dbe7      	blt.n	80055de <__gethex+0x456>
 800560e:	e7f0      	b.n	80055f2 <__gethex+0x46a>
 8005610:	0800740c 	.word	0x0800740c

08005614 <L_shift>:
 8005614:	f1c2 0208 	rsb	r2, r2, #8
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	b570      	push	{r4, r5, r6, lr}
 800561c:	f1c2 0620 	rsb	r6, r2, #32
 8005620:	6843      	ldr	r3, [r0, #4]
 8005622:	6804      	ldr	r4, [r0, #0]
 8005624:	fa03 f506 	lsl.w	r5, r3, r6
 8005628:	432c      	orrs	r4, r5
 800562a:	40d3      	lsrs	r3, r2
 800562c:	6004      	str	r4, [r0, #0]
 800562e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005632:	4288      	cmp	r0, r1
 8005634:	d3f4      	bcc.n	8005620 <L_shift+0xc>
 8005636:	bd70      	pop	{r4, r5, r6, pc}

08005638 <__match>:
 8005638:	b530      	push	{r4, r5, lr}
 800563a:	6803      	ldr	r3, [r0, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005642:	b914      	cbnz	r4, 800564a <__match+0x12>
 8005644:	6003      	str	r3, [r0, #0]
 8005646:	2001      	movs	r0, #1
 8005648:	bd30      	pop	{r4, r5, pc}
 800564a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800564e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005652:	2d19      	cmp	r5, #25
 8005654:	bf98      	it	ls
 8005656:	3220      	addls	r2, #32
 8005658:	42a2      	cmp	r2, r4
 800565a:	d0f0      	beq.n	800563e <__match+0x6>
 800565c:	2000      	movs	r0, #0
 800565e:	e7f3      	b.n	8005648 <__match+0x10>

08005660 <__hexnan>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	680b      	ldr	r3, [r1, #0]
 8005666:	6801      	ldr	r1, [r0, #0]
 8005668:	115e      	asrs	r6, r3, #5
 800566a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800566e:	f013 031f 	ands.w	r3, r3, #31
 8005672:	b087      	sub	sp, #28
 8005674:	bf18      	it	ne
 8005676:	3604      	addne	r6, #4
 8005678:	2500      	movs	r5, #0
 800567a:	1f37      	subs	r7, r6, #4
 800567c:	4682      	mov	sl, r0
 800567e:	4690      	mov	r8, r2
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	f846 5c04 	str.w	r5, [r6, #-4]
 8005686:	46b9      	mov	r9, r7
 8005688:	463c      	mov	r4, r7
 800568a:	9502      	str	r5, [sp, #8]
 800568c:	46ab      	mov	fp, r5
 800568e:	784a      	ldrb	r2, [r1, #1]
 8005690:	1c4b      	adds	r3, r1, #1
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	b342      	cbz	r2, 80056e8 <__hexnan+0x88>
 8005696:	4610      	mov	r0, r2
 8005698:	9105      	str	r1, [sp, #20]
 800569a:	9204      	str	r2, [sp, #16]
 800569c:	f7ff fd5e 	bl	800515c <__hexdig_fun>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d14f      	bne.n	8005744 <__hexnan+0xe4>
 80056a4:	9a04      	ldr	r2, [sp, #16]
 80056a6:	9905      	ldr	r1, [sp, #20]
 80056a8:	2a20      	cmp	r2, #32
 80056aa:	d818      	bhi.n	80056de <__hexnan+0x7e>
 80056ac:	9b02      	ldr	r3, [sp, #8]
 80056ae:	459b      	cmp	fp, r3
 80056b0:	dd13      	ble.n	80056da <__hexnan+0x7a>
 80056b2:	454c      	cmp	r4, r9
 80056b4:	d206      	bcs.n	80056c4 <__hexnan+0x64>
 80056b6:	2d07      	cmp	r5, #7
 80056b8:	dc04      	bgt.n	80056c4 <__hexnan+0x64>
 80056ba:	462a      	mov	r2, r5
 80056bc:	4649      	mov	r1, r9
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff ffa8 	bl	8005614 <L_shift>
 80056c4:	4544      	cmp	r4, r8
 80056c6:	d950      	bls.n	800576a <__hexnan+0x10a>
 80056c8:	2300      	movs	r3, #0
 80056ca:	f1a4 0904 	sub.w	r9, r4, #4
 80056ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80056d2:	f8cd b008 	str.w	fp, [sp, #8]
 80056d6:	464c      	mov	r4, r9
 80056d8:	461d      	mov	r5, r3
 80056da:	9903      	ldr	r1, [sp, #12]
 80056dc:	e7d7      	b.n	800568e <__hexnan+0x2e>
 80056de:	2a29      	cmp	r2, #41	; 0x29
 80056e0:	d156      	bne.n	8005790 <__hexnan+0x130>
 80056e2:	3102      	adds	r1, #2
 80056e4:	f8ca 1000 	str.w	r1, [sl]
 80056e8:	f1bb 0f00 	cmp.w	fp, #0
 80056ec:	d050      	beq.n	8005790 <__hexnan+0x130>
 80056ee:	454c      	cmp	r4, r9
 80056f0:	d206      	bcs.n	8005700 <__hexnan+0xa0>
 80056f2:	2d07      	cmp	r5, #7
 80056f4:	dc04      	bgt.n	8005700 <__hexnan+0xa0>
 80056f6:	462a      	mov	r2, r5
 80056f8:	4649      	mov	r1, r9
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff ff8a 	bl	8005614 <L_shift>
 8005700:	4544      	cmp	r4, r8
 8005702:	d934      	bls.n	800576e <__hexnan+0x10e>
 8005704:	f1a8 0204 	sub.w	r2, r8, #4
 8005708:	4623      	mov	r3, r4
 800570a:	f853 1b04 	ldr.w	r1, [r3], #4
 800570e:	f842 1f04 	str.w	r1, [r2, #4]!
 8005712:	429f      	cmp	r7, r3
 8005714:	d2f9      	bcs.n	800570a <__hexnan+0xaa>
 8005716:	1b3b      	subs	r3, r7, r4
 8005718:	f023 0303 	bic.w	r3, r3, #3
 800571c:	3304      	adds	r3, #4
 800571e:	3401      	adds	r4, #1
 8005720:	3e03      	subs	r6, #3
 8005722:	42b4      	cmp	r4, r6
 8005724:	bf88      	it	hi
 8005726:	2304      	movhi	r3, #4
 8005728:	4443      	add	r3, r8
 800572a:	2200      	movs	r2, #0
 800572c:	f843 2b04 	str.w	r2, [r3], #4
 8005730:	429f      	cmp	r7, r3
 8005732:	d2fb      	bcs.n	800572c <__hexnan+0xcc>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b91b      	cbnz	r3, 8005740 <__hexnan+0xe0>
 8005738:	4547      	cmp	r7, r8
 800573a:	d127      	bne.n	800578c <__hexnan+0x12c>
 800573c:	2301      	movs	r3, #1
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	2005      	movs	r0, #5
 8005742:	e026      	b.n	8005792 <__hexnan+0x132>
 8005744:	3501      	adds	r5, #1
 8005746:	2d08      	cmp	r5, #8
 8005748:	f10b 0b01 	add.w	fp, fp, #1
 800574c:	dd06      	ble.n	800575c <__hexnan+0xfc>
 800574e:	4544      	cmp	r4, r8
 8005750:	d9c3      	bls.n	80056da <__hexnan+0x7a>
 8005752:	2300      	movs	r3, #0
 8005754:	f844 3c04 	str.w	r3, [r4, #-4]
 8005758:	2501      	movs	r5, #1
 800575a:	3c04      	subs	r4, #4
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	f000 000f 	and.w	r0, r0, #15
 8005762:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005766:	6022      	str	r2, [r4, #0]
 8005768:	e7b7      	b.n	80056da <__hexnan+0x7a>
 800576a:	2508      	movs	r5, #8
 800576c:	e7b5      	b.n	80056da <__hexnan+0x7a>
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0df      	beq.n	8005734 <__hexnan+0xd4>
 8005774:	f04f 32ff 	mov.w	r2, #4294967295
 8005778:	f1c3 0320 	rsb	r3, r3, #32
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
 8005780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005784:	401a      	ands	r2, r3
 8005786:	f846 2c04 	str.w	r2, [r6, #-4]
 800578a:	e7d3      	b.n	8005734 <__hexnan+0xd4>
 800578c:	3f04      	subs	r7, #4
 800578e:	e7d1      	b.n	8005734 <__hexnan+0xd4>
 8005790:	2004      	movs	r0, #4
 8005792:	b007      	add	sp, #28
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005798 <_localeconv_r>:
 8005798:	4800      	ldr	r0, [pc, #0]	; (800579c <_localeconv_r+0x4>)
 800579a:	4770      	bx	lr
 800579c:	2000015c 	.word	0x2000015c

080057a0 <malloc>:
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <malloc+0xc>)
 80057a2:	4601      	mov	r1, r0
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f000 bd3d 	b.w	8006224 <_malloc_r>
 80057aa:	bf00      	nop
 80057ac:	20000004 	.word	0x20000004

080057b0 <__ascii_mbtowc>:
 80057b0:	b082      	sub	sp, #8
 80057b2:	b901      	cbnz	r1, 80057b6 <__ascii_mbtowc+0x6>
 80057b4:	a901      	add	r1, sp, #4
 80057b6:	b142      	cbz	r2, 80057ca <__ascii_mbtowc+0x1a>
 80057b8:	b14b      	cbz	r3, 80057ce <__ascii_mbtowc+0x1e>
 80057ba:	7813      	ldrb	r3, [r2, #0]
 80057bc:	600b      	str	r3, [r1, #0]
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	1e10      	subs	r0, r2, #0
 80057c2:	bf18      	it	ne
 80057c4:	2001      	movne	r0, #1
 80057c6:	b002      	add	sp, #8
 80057c8:	4770      	bx	lr
 80057ca:	4610      	mov	r0, r2
 80057cc:	e7fb      	b.n	80057c6 <__ascii_mbtowc+0x16>
 80057ce:	f06f 0001 	mvn.w	r0, #1
 80057d2:	e7f8      	b.n	80057c6 <__ascii_mbtowc+0x16>

080057d4 <memcpy>:
 80057d4:	440a      	add	r2, r1
 80057d6:	4291      	cmp	r1, r2
 80057d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057dc:	d100      	bne.n	80057e0 <memcpy+0xc>
 80057de:	4770      	bx	lr
 80057e0:	b510      	push	{r4, lr}
 80057e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ea:	4291      	cmp	r1, r2
 80057ec:	d1f9      	bne.n	80057e2 <memcpy+0xe>
 80057ee:	bd10      	pop	{r4, pc}

080057f0 <_Balloc>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	b976      	cbnz	r6, 8005818 <_Balloc+0x28>
 80057fa:	2010      	movs	r0, #16
 80057fc:	f7ff ffd0 	bl	80057a0 <malloc>
 8005800:	4602      	mov	r2, r0
 8005802:	6260      	str	r0, [r4, #36]	; 0x24
 8005804:	b920      	cbnz	r0, 8005810 <_Balloc+0x20>
 8005806:	4b18      	ldr	r3, [pc, #96]	; (8005868 <_Balloc+0x78>)
 8005808:	4818      	ldr	r0, [pc, #96]	; (800586c <_Balloc+0x7c>)
 800580a:	2166      	movs	r1, #102	; 0x66
 800580c:	f000 fef8 	bl	8006600 <__assert_func>
 8005810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005814:	6006      	str	r6, [r0, #0]
 8005816:	60c6      	str	r6, [r0, #12]
 8005818:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800581a:	68f3      	ldr	r3, [r6, #12]
 800581c:	b183      	cbz	r3, 8005840 <_Balloc+0x50>
 800581e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005826:	b9b8      	cbnz	r0, 8005858 <_Balloc+0x68>
 8005828:	2101      	movs	r1, #1
 800582a:	fa01 f605 	lsl.w	r6, r1, r5
 800582e:	1d72      	adds	r2, r6, #5
 8005830:	0092      	lsls	r2, r2, #2
 8005832:	4620      	mov	r0, r4
 8005834:	f000 fc97 	bl	8006166 <_calloc_r>
 8005838:	b160      	cbz	r0, 8005854 <_Balloc+0x64>
 800583a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800583e:	e00e      	b.n	800585e <_Balloc+0x6e>
 8005840:	2221      	movs	r2, #33	; 0x21
 8005842:	2104      	movs	r1, #4
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fc8e 	bl	8006166 <_calloc_r>
 800584a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800584c:	60f0      	str	r0, [r6, #12]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e4      	bne.n	800581e <_Balloc+0x2e>
 8005854:	2000      	movs	r0, #0
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	6802      	ldr	r2, [r0, #0]
 800585a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800585e:	2300      	movs	r3, #0
 8005860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005864:	e7f7      	b.n	8005856 <_Balloc+0x66>
 8005866:	bf00      	nop
 8005868:	08007396 	.word	0x08007396
 800586c:	0800749c 	.word	0x0800749c

08005870 <_Bfree>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005874:	4605      	mov	r5, r0
 8005876:	460c      	mov	r4, r1
 8005878:	b976      	cbnz	r6, 8005898 <_Bfree+0x28>
 800587a:	2010      	movs	r0, #16
 800587c:	f7ff ff90 	bl	80057a0 <malloc>
 8005880:	4602      	mov	r2, r0
 8005882:	6268      	str	r0, [r5, #36]	; 0x24
 8005884:	b920      	cbnz	r0, 8005890 <_Bfree+0x20>
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <_Bfree+0x3c>)
 8005888:	4809      	ldr	r0, [pc, #36]	; (80058b0 <_Bfree+0x40>)
 800588a:	218a      	movs	r1, #138	; 0x8a
 800588c:	f000 feb8 	bl	8006600 <__assert_func>
 8005890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005894:	6006      	str	r6, [r0, #0]
 8005896:	60c6      	str	r6, [r0, #12]
 8005898:	b13c      	cbz	r4, 80058aa <_Bfree+0x3a>
 800589a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800589c:	6862      	ldr	r2, [r4, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058a4:	6021      	str	r1, [r4, #0]
 80058a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	08007396 	.word	0x08007396
 80058b0:	0800749c 	.word	0x0800749c

080058b4 <__multadd>:
 80058b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b8:	690e      	ldr	r6, [r1, #16]
 80058ba:	4607      	mov	r7, r0
 80058bc:	4698      	mov	r8, r3
 80058be:	460c      	mov	r4, r1
 80058c0:	f101 0014 	add.w	r0, r1, #20
 80058c4:	2300      	movs	r3, #0
 80058c6:	6805      	ldr	r5, [r0, #0]
 80058c8:	b2a9      	uxth	r1, r5
 80058ca:	fb02 8101 	mla	r1, r2, r1, r8
 80058ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80058d2:	0c2d      	lsrs	r5, r5, #16
 80058d4:	fb02 c505 	mla	r5, r2, r5, ip
 80058d8:	b289      	uxth	r1, r1
 80058da:	3301      	adds	r3, #1
 80058dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80058e0:	429e      	cmp	r6, r3
 80058e2:	f840 1b04 	str.w	r1, [r0], #4
 80058e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80058ea:	dcec      	bgt.n	80058c6 <__multadd+0x12>
 80058ec:	f1b8 0f00 	cmp.w	r8, #0
 80058f0:	d022      	beq.n	8005938 <__multadd+0x84>
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	42b3      	cmp	r3, r6
 80058f6:	dc19      	bgt.n	800592c <__multadd+0x78>
 80058f8:	6861      	ldr	r1, [r4, #4]
 80058fa:	4638      	mov	r0, r7
 80058fc:	3101      	adds	r1, #1
 80058fe:	f7ff ff77 	bl	80057f0 <_Balloc>
 8005902:	4605      	mov	r5, r0
 8005904:	b928      	cbnz	r0, 8005912 <__multadd+0x5e>
 8005906:	4602      	mov	r2, r0
 8005908:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <__multadd+0x8c>)
 800590a:	480e      	ldr	r0, [pc, #56]	; (8005944 <__multadd+0x90>)
 800590c:	21b5      	movs	r1, #181	; 0xb5
 800590e:	f000 fe77 	bl	8006600 <__assert_func>
 8005912:	6922      	ldr	r2, [r4, #16]
 8005914:	3202      	adds	r2, #2
 8005916:	f104 010c 	add.w	r1, r4, #12
 800591a:	0092      	lsls	r2, r2, #2
 800591c:	300c      	adds	r0, #12
 800591e:	f7ff ff59 	bl	80057d4 <memcpy>
 8005922:	4621      	mov	r1, r4
 8005924:	4638      	mov	r0, r7
 8005926:	f7ff ffa3 	bl	8005870 <_Bfree>
 800592a:	462c      	mov	r4, r5
 800592c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005930:	3601      	adds	r6, #1
 8005932:	f8c3 8014 	str.w	r8, [r3, #20]
 8005936:	6126      	str	r6, [r4, #16]
 8005938:	4620      	mov	r0, r4
 800593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800593e:	bf00      	nop
 8005940:	0800740c 	.word	0x0800740c
 8005944:	0800749c 	.word	0x0800749c

08005948 <__s2b>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	460c      	mov	r4, r1
 800594e:	4615      	mov	r5, r2
 8005950:	461f      	mov	r7, r3
 8005952:	2209      	movs	r2, #9
 8005954:	3308      	adds	r3, #8
 8005956:	4606      	mov	r6, r0
 8005958:	fb93 f3f2 	sdiv	r3, r3, r2
 800595c:	2100      	movs	r1, #0
 800595e:	2201      	movs	r2, #1
 8005960:	429a      	cmp	r2, r3
 8005962:	db09      	blt.n	8005978 <__s2b+0x30>
 8005964:	4630      	mov	r0, r6
 8005966:	f7ff ff43 	bl	80057f0 <_Balloc>
 800596a:	b940      	cbnz	r0, 800597e <__s2b+0x36>
 800596c:	4602      	mov	r2, r0
 800596e:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <__s2b+0x8c>)
 8005970:	4819      	ldr	r0, [pc, #100]	; (80059d8 <__s2b+0x90>)
 8005972:	21ce      	movs	r1, #206	; 0xce
 8005974:	f000 fe44 	bl	8006600 <__assert_func>
 8005978:	0052      	lsls	r2, r2, #1
 800597a:	3101      	adds	r1, #1
 800597c:	e7f0      	b.n	8005960 <__s2b+0x18>
 800597e:	9b08      	ldr	r3, [sp, #32]
 8005980:	6143      	str	r3, [r0, #20]
 8005982:	2d09      	cmp	r5, #9
 8005984:	f04f 0301 	mov.w	r3, #1
 8005988:	6103      	str	r3, [r0, #16]
 800598a:	dd16      	ble.n	80059ba <__s2b+0x72>
 800598c:	f104 0909 	add.w	r9, r4, #9
 8005990:	46c8      	mov	r8, r9
 8005992:	442c      	add	r4, r5
 8005994:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005998:	4601      	mov	r1, r0
 800599a:	3b30      	subs	r3, #48	; 0x30
 800599c:	220a      	movs	r2, #10
 800599e:	4630      	mov	r0, r6
 80059a0:	f7ff ff88 	bl	80058b4 <__multadd>
 80059a4:	45a0      	cmp	r8, r4
 80059a6:	d1f5      	bne.n	8005994 <__s2b+0x4c>
 80059a8:	f1a5 0408 	sub.w	r4, r5, #8
 80059ac:	444c      	add	r4, r9
 80059ae:	1b2d      	subs	r5, r5, r4
 80059b0:	1963      	adds	r3, r4, r5
 80059b2:	42bb      	cmp	r3, r7
 80059b4:	db04      	blt.n	80059c0 <__s2b+0x78>
 80059b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ba:	340a      	adds	r4, #10
 80059bc:	2509      	movs	r5, #9
 80059be:	e7f6      	b.n	80059ae <__s2b+0x66>
 80059c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80059c4:	4601      	mov	r1, r0
 80059c6:	3b30      	subs	r3, #48	; 0x30
 80059c8:	220a      	movs	r2, #10
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ff72 	bl	80058b4 <__multadd>
 80059d0:	e7ee      	b.n	80059b0 <__s2b+0x68>
 80059d2:	bf00      	nop
 80059d4:	0800740c 	.word	0x0800740c
 80059d8:	0800749c 	.word	0x0800749c

080059dc <__hi0bits>:
 80059dc:	0c03      	lsrs	r3, r0, #16
 80059de:	041b      	lsls	r3, r3, #16
 80059e0:	b9d3      	cbnz	r3, 8005a18 <__hi0bits+0x3c>
 80059e2:	0400      	lsls	r0, r0, #16
 80059e4:	2310      	movs	r3, #16
 80059e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059ea:	bf04      	itt	eq
 80059ec:	0200      	lsleq	r0, r0, #8
 80059ee:	3308      	addeq	r3, #8
 80059f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059f4:	bf04      	itt	eq
 80059f6:	0100      	lsleq	r0, r0, #4
 80059f8:	3304      	addeq	r3, #4
 80059fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059fe:	bf04      	itt	eq
 8005a00:	0080      	lsleq	r0, r0, #2
 8005a02:	3302      	addeq	r3, #2
 8005a04:	2800      	cmp	r0, #0
 8005a06:	db05      	blt.n	8005a14 <__hi0bits+0x38>
 8005a08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a0c:	f103 0301 	add.w	r3, r3, #1
 8005a10:	bf08      	it	eq
 8005a12:	2320      	moveq	r3, #32
 8005a14:	4618      	mov	r0, r3
 8005a16:	4770      	bx	lr
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e7e4      	b.n	80059e6 <__hi0bits+0xa>

08005a1c <__lo0bits>:
 8005a1c:	6803      	ldr	r3, [r0, #0]
 8005a1e:	f013 0207 	ands.w	r2, r3, #7
 8005a22:	4601      	mov	r1, r0
 8005a24:	d00b      	beq.n	8005a3e <__lo0bits+0x22>
 8005a26:	07da      	lsls	r2, r3, #31
 8005a28:	d424      	bmi.n	8005a74 <__lo0bits+0x58>
 8005a2a:	0798      	lsls	r0, r3, #30
 8005a2c:	bf49      	itett	mi
 8005a2e:	085b      	lsrmi	r3, r3, #1
 8005a30:	089b      	lsrpl	r3, r3, #2
 8005a32:	2001      	movmi	r0, #1
 8005a34:	600b      	strmi	r3, [r1, #0]
 8005a36:	bf5c      	itt	pl
 8005a38:	600b      	strpl	r3, [r1, #0]
 8005a3a:	2002      	movpl	r0, #2
 8005a3c:	4770      	bx	lr
 8005a3e:	b298      	uxth	r0, r3
 8005a40:	b9b0      	cbnz	r0, 8005a70 <__lo0bits+0x54>
 8005a42:	0c1b      	lsrs	r3, r3, #16
 8005a44:	2010      	movs	r0, #16
 8005a46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a4a:	bf04      	itt	eq
 8005a4c:	0a1b      	lsreq	r3, r3, #8
 8005a4e:	3008      	addeq	r0, #8
 8005a50:	071a      	lsls	r2, r3, #28
 8005a52:	bf04      	itt	eq
 8005a54:	091b      	lsreq	r3, r3, #4
 8005a56:	3004      	addeq	r0, #4
 8005a58:	079a      	lsls	r2, r3, #30
 8005a5a:	bf04      	itt	eq
 8005a5c:	089b      	lsreq	r3, r3, #2
 8005a5e:	3002      	addeq	r0, #2
 8005a60:	07da      	lsls	r2, r3, #31
 8005a62:	d403      	bmi.n	8005a6c <__lo0bits+0x50>
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	f100 0001 	add.w	r0, r0, #1
 8005a6a:	d005      	beq.n	8005a78 <__lo0bits+0x5c>
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	4770      	bx	lr
 8005a70:	4610      	mov	r0, r2
 8005a72:	e7e8      	b.n	8005a46 <__lo0bits+0x2a>
 8005a74:	2000      	movs	r0, #0
 8005a76:	4770      	bx	lr
 8005a78:	2020      	movs	r0, #32
 8005a7a:	4770      	bx	lr

08005a7c <__i2b>:
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	460c      	mov	r4, r1
 8005a80:	2101      	movs	r1, #1
 8005a82:	f7ff feb5 	bl	80057f0 <_Balloc>
 8005a86:	4602      	mov	r2, r0
 8005a88:	b928      	cbnz	r0, 8005a96 <__i2b+0x1a>
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <__i2b+0x24>)
 8005a8c:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <__i2b+0x28>)
 8005a8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a92:	f000 fdb5 	bl	8006600 <__assert_func>
 8005a96:	2301      	movs	r3, #1
 8005a98:	6144      	str	r4, [r0, #20]
 8005a9a:	6103      	str	r3, [r0, #16]
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	bf00      	nop
 8005aa0:	0800740c 	.word	0x0800740c
 8005aa4:	0800749c 	.word	0x0800749c

08005aa8 <__multiply>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4614      	mov	r4, r2
 8005aae:	690a      	ldr	r2, [r1, #16]
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	bfb8      	it	lt
 8005ab6:	460b      	movlt	r3, r1
 8005ab8:	460d      	mov	r5, r1
 8005aba:	bfbc      	itt	lt
 8005abc:	4625      	movlt	r5, r4
 8005abe:	461c      	movlt	r4, r3
 8005ac0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005ac4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ac8:	68ab      	ldr	r3, [r5, #8]
 8005aca:	6869      	ldr	r1, [r5, #4]
 8005acc:	eb0a 0709 	add.w	r7, sl, r9
 8005ad0:	42bb      	cmp	r3, r7
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	bfb8      	it	lt
 8005ad6:	3101      	addlt	r1, #1
 8005ad8:	f7ff fe8a 	bl	80057f0 <_Balloc>
 8005adc:	b930      	cbnz	r0, 8005aec <__multiply+0x44>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b42      	ldr	r3, [pc, #264]	; (8005bec <__multiply+0x144>)
 8005ae2:	4843      	ldr	r0, [pc, #268]	; (8005bf0 <__multiply+0x148>)
 8005ae4:	f240 115d 	movw	r1, #349	; 0x15d
 8005ae8:	f000 fd8a 	bl	8006600 <__assert_func>
 8005aec:	f100 0614 	add.w	r6, r0, #20
 8005af0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005af4:	4633      	mov	r3, r6
 8005af6:	2200      	movs	r2, #0
 8005af8:	4543      	cmp	r3, r8
 8005afa:	d31e      	bcc.n	8005b3a <__multiply+0x92>
 8005afc:	f105 0c14 	add.w	ip, r5, #20
 8005b00:	f104 0314 	add.w	r3, r4, #20
 8005b04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005b08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	ebac 0205 	sub.w	r2, ip, r5
 8005b12:	3a15      	subs	r2, #21
 8005b14:	f022 0203 	bic.w	r2, r2, #3
 8005b18:	3204      	adds	r2, #4
 8005b1a:	f105 0115 	add.w	r1, r5, #21
 8005b1e:	458c      	cmp	ip, r1
 8005b20:	bf38      	it	cc
 8005b22:	2204      	movcc	r2, #4
 8005b24:	9201      	str	r2, [sp, #4]
 8005b26:	9a02      	ldr	r2, [sp, #8]
 8005b28:	9303      	str	r3, [sp, #12]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d808      	bhi.n	8005b40 <__multiply+0x98>
 8005b2e:	2f00      	cmp	r7, #0
 8005b30:	dc55      	bgt.n	8005bde <__multiply+0x136>
 8005b32:	6107      	str	r7, [r0, #16]
 8005b34:	b005      	add	sp, #20
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	f843 2b04 	str.w	r2, [r3], #4
 8005b3e:	e7db      	b.n	8005af8 <__multiply+0x50>
 8005b40:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b44:	f1ba 0f00 	cmp.w	sl, #0
 8005b48:	d020      	beq.n	8005b8c <__multiply+0xe4>
 8005b4a:	f105 0e14 	add.w	lr, r5, #20
 8005b4e:	46b1      	mov	r9, r6
 8005b50:	2200      	movs	r2, #0
 8005b52:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005b56:	f8d9 b000 	ldr.w	fp, [r9]
 8005b5a:	b2a1      	uxth	r1, r4
 8005b5c:	fa1f fb8b 	uxth.w	fp, fp
 8005b60:	fb0a b101 	mla	r1, sl, r1, fp
 8005b64:	4411      	add	r1, r2
 8005b66:	f8d9 2000 	ldr.w	r2, [r9]
 8005b6a:	0c24      	lsrs	r4, r4, #16
 8005b6c:	0c12      	lsrs	r2, r2, #16
 8005b6e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005b72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005b76:	b289      	uxth	r1, r1
 8005b78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b7c:	45f4      	cmp	ip, lr
 8005b7e:	f849 1b04 	str.w	r1, [r9], #4
 8005b82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005b86:	d8e4      	bhi.n	8005b52 <__multiply+0xaa>
 8005b88:	9901      	ldr	r1, [sp, #4]
 8005b8a:	5072      	str	r2, [r6, r1]
 8005b8c:	9a03      	ldr	r2, [sp, #12]
 8005b8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b92:	3304      	adds	r3, #4
 8005b94:	f1b9 0f00 	cmp.w	r9, #0
 8005b98:	d01f      	beq.n	8005bda <__multiply+0x132>
 8005b9a:	6834      	ldr	r4, [r6, #0]
 8005b9c:	f105 0114 	add.w	r1, r5, #20
 8005ba0:	46b6      	mov	lr, r6
 8005ba2:	f04f 0a00 	mov.w	sl, #0
 8005ba6:	880a      	ldrh	r2, [r1, #0]
 8005ba8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005bac:	fb09 b202 	mla	r2, r9, r2, fp
 8005bb0:	4492      	add	sl, r2
 8005bb2:	b2a4      	uxth	r4, r4
 8005bb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005bb8:	f84e 4b04 	str.w	r4, [lr], #4
 8005bbc:	f851 4b04 	ldr.w	r4, [r1], #4
 8005bc0:	f8be 2000 	ldrh.w	r2, [lr]
 8005bc4:	0c24      	lsrs	r4, r4, #16
 8005bc6:	fb09 2404 	mla	r4, r9, r4, r2
 8005bca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005bce:	458c      	cmp	ip, r1
 8005bd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005bd4:	d8e7      	bhi.n	8005ba6 <__multiply+0xfe>
 8005bd6:	9a01      	ldr	r2, [sp, #4]
 8005bd8:	50b4      	str	r4, [r6, r2]
 8005bda:	3604      	adds	r6, #4
 8005bdc:	e7a3      	b.n	8005b26 <__multiply+0x7e>
 8005bde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1a5      	bne.n	8005b32 <__multiply+0x8a>
 8005be6:	3f01      	subs	r7, #1
 8005be8:	e7a1      	b.n	8005b2e <__multiply+0x86>
 8005bea:	bf00      	nop
 8005bec:	0800740c 	.word	0x0800740c
 8005bf0:	0800749c 	.word	0x0800749c

08005bf4 <__pow5mult>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	4615      	mov	r5, r2
 8005bfa:	f012 0203 	ands.w	r2, r2, #3
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	d007      	beq.n	8005c14 <__pow5mult+0x20>
 8005c04:	4c25      	ldr	r4, [pc, #148]	; (8005c9c <__pow5mult+0xa8>)
 8005c06:	3a01      	subs	r2, #1
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c0e:	f7ff fe51 	bl	80058b4 <__multadd>
 8005c12:	4607      	mov	r7, r0
 8005c14:	10ad      	asrs	r5, r5, #2
 8005c16:	d03d      	beq.n	8005c94 <__pow5mult+0xa0>
 8005c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c1a:	b97c      	cbnz	r4, 8005c3c <__pow5mult+0x48>
 8005c1c:	2010      	movs	r0, #16
 8005c1e:	f7ff fdbf 	bl	80057a0 <malloc>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6270      	str	r0, [r6, #36]	; 0x24
 8005c26:	b928      	cbnz	r0, 8005c34 <__pow5mult+0x40>
 8005c28:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <__pow5mult+0xac>)
 8005c2a:	481e      	ldr	r0, [pc, #120]	; (8005ca4 <__pow5mult+0xb0>)
 8005c2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c30:	f000 fce6 	bl	8006600 <__assert_func>
 8005c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c38:	6004      	str	r4, [r0, #0]
 8005c3a:	60c4      	str	r4, [r0, #12]
 8005c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c44:	b94c      	cbnz	r4, 8005c5a <__pow5mult+0x66>
 8005c46:	f240 2171 	movw	r1, #625	; 0x271
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ff16 	bl	8005a7c <__i2b>
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c56:	4604      	mov	r4, r0
 8005c58:	6003      	str	r3, [r0, #0]
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	07eb      	lsls	r3, r5, #31
 8005c60:	d50a      	bpl.n	8005c78 <__pow5mult+0x84>
 8005c62:	4639      	mov	r1, r7
 8005c64:	4622      	mov	r2, r4
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ff1e 	bl	8005aa8 <__multiply>
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	4680      	mov	r8, r0
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7ff fdfd 	bl	8005870 <_Bfree>
 8005c76:	4647      	mov	r7, r8
 8005c78:	106d      	asrs	r5, r5, #1
 8005c7a:	d00b      	beq.n	8005c94 <__pow5mult+0xa0>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	b938      	cbnz	r0, 8005c90 <__pow5mult+0x9c>
 8005c80:	4622      	mov	r2, r4
 8005c82:	4621      	mov	r1, r4
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff ff0f 	bl	8005aa8 <__multiply>
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	f8c0 9000 	str.w	r9, [r0]
 8005c90:	4604      	mov	r4, r0
 8005c92:	e7e4      	b.n	8005c5e <__pow5mult+0x6a>
 8005c94:	4638      	mov	r0, r7
 8005c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9a:	bf00      	nop
 8005c9c:	080075f0 	.word	0x080075f0
 8005ca0:	08007396 	.word	0x08007396
 8005ca4:	0800749c 	.word	0x0800749c

08005ca8 <__lshift>:
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	6849      	ldr	r1, [r1, #4]
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	4607      	mov	r7, r0
 8005cba:	4691      	mov	r9, r2
 8005cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cc0:	f108 0601 	add.w	r6, r8, #1
 8005cc4:	42b3      	cmp	r3, r6
 8005cc6:	db0b      	blt.n	8005ce0 <__lshift+0x38>
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff fd91 	bl	80057f0 <_Balloc>
 8005cce:	4605      	mov	r5, r0
 8005cd0:	b948      	cbnz	r0, 8005ce6 <__lshift+0x3e>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <__lshift+0xd0>)
 8005cd6:	4829      	ldr	r0, [pc, #164]	; (8005d7c <__lshift+0xd4>)
 8005cd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cdc:	f000 fc90 	bl	8006600 <__assert_func>
 8005ce0:	3101      	adds	r1, #1
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__lshift+0x1c>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f100 0114 	add.w	r1, r0, #20
 8005cec:	f100 0210 	add.w	r2, r0, #16
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	4553      	cmp	r3, sl
 8005cf4:	db33      	blt.n	8005d5e <__lshift+0xb6>
 8005cf6:	6920      	ldr	r0, [r4, #16]
 8005cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cfc:	f104 0314 	add.w	r3, r4, #20
 8005d00:	f019 091f 	ands.w	r9, r9, #31
 8005d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d0c:	d02b      	beq.n	8005d66 <__lshift+0xbe>
 8005d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8005d12:	468a      	mov	sl, r1
 8005d14:	2200      	movs	r2, #0
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	fa00 f009 	lsl.w	r0, r0, r9
 8005d1c:	4302      	orrs	r2, r0
 8005d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8005d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d26:	459c      	cmp	ip, r3
 8005d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d2c:	d8f3      	bhi.n	8005d16 <__lshift+0x6e>
 8005d2e:	ebac 0304 	sub.w	r3, ip, r4
 8005d32:	3b15      	subs	r3, #21
 8005d34:	f023 0303 	bic.w	r3, r3, #3
 8005d38:	3304      	adds	r3, #4
 8005d3a:	f104 0015 	add.w	r0, r4, #21
 8005d3e:	4584      	cmp	ip, r0
 8005d40:	bf38      	it	cc
 8005d42:	2304      	movcc	r3, #4
 8005d44:	50ca      	str	r2, [r1, r3]
 8005d46:	b10a      	cbz	r2, 8005d4c <__lshift+0xa4>
 8005d48:	f108 0602 	add.w	r6, r8, #2
 8005d4c:	3e01      	subs	r6, #1
 8005d4e:	4638      	mov	r0, r7
 8005d50:	612e      	str	r6, [r5, #16]
 8005d52:	4621      	mov	r1, r4
 8005d54:	f7ff fd8c 	bl	8005870 <_Bfree>
 8005d58:	4628      	mov	r0, r5
 8005d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d62:	3301      	adds	r3, #1
 8005d64:	e7c5      	b.n	8005cf2 <__lshift+0x4a>
 8005d66:	3904      	subs	r1, #4
 8005d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d70:	459c      	cmp	ip, r3
 8005d72:	d8f9      	bhi.n	8005d68 <__lshift+0xc0>
 8005d74:	e7ea      	b.n	8005d4c <__lshift+0xa4>
 8005d76:	bf00      	nop
 8005d78:	0800740c 	.word	0x0800740c
 8005d7c:	0800749c 	.word	0x0800749c

08005d80 <__mcmp>:
 8005d80:	b530      	push	{r4, r5, lr}
 8005d82:	6902      	ldr	r2, [r0, #16]
 8005d84:	690c      	ldr	r4, [r1, #16]
 8005d86:	1b12      	subs	r2, r2, r4
 8005d88:	d10e      	bne.n	8005da8 <__mcmp+0x28>
 8005d8a:	f100 0314 	add.w	r3, r0, #20
 8005d8e:	3114      	adds	r1, #20
 8005d90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005da0:	42a5      	cmp	r5, r4
 8005da2:	d003      	beq.n	8005dac <__mcmp+0x2c>
 8005da4:	d305      	bcc.n	8005db2 <__mcmp+0x32>
 8005da6:	2201      	movs	r2, #1
 8005da8:	4610      	mov	r0, r2
 8005daa:	bd30      	pop	{r4, r5, pc}
 8005dac:	4283      	cmp	r3, r0
 8005dae:	d3f3      	bcc.n	8005d98 <__mcmp+0x18>
 8005db0:	e7fa      	b.n	8005da8 <__mcmp+0x28>
 8005db2:	f04f 32ff 	mov.w	r2, #4294967295
 8005db6:	e7f7      	b.n	8005da8 <__mcmp+0x28>

08005db8 <__mdiff>:
 8005db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4617      	mov	r7, r2
 8005dc6:	f7ff ffdb 	bl	8005d80 <__mcmp>
 8005dca:	1e05      	subs	r5, r0, #0
 8005dcc:	d110      	bne.n	8005df0 <__mdiff+0x38>
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7ff fd0d 	bl	80057f0 <_Balloc>
 8005dd6:	b930      	cbnz	r0, 8005de6 <__mdiff+0x2e>
 8005dd8:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <__mdiff+0x108>)
 8005dda:	4602      	mov	r2, r0
 8005ddc:	f240 2132 	movw	r1, #562	; 0x232
 8005de0:	4838      	ldr	r0, [pc, #224]	; (8005ec4 <__mdiff+0x10c>)
 8005de2:	f000 fc0d 	bl	8006600 <__assert_func>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df0:	bfa4      	itt	ge
 8005df2:	463b      	movge	r3, r7
 8005df4:	4627      	movge	r7, r4
 8005df6:	4630      	mov	r0, r6
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	bfa6      	itte	ge
 8005dfc:	461c      	movge	r4, r3
 8005dfe:	2500      	movge	r5, #0
 8005e00:	2501      	movlt	r5, #1
 8005e02:	f7ff fcf5 	bl	80057f0 <_Balloc>
 8005e06:	b920      	cbnz	r0, 8005e12 <__mdiff+0x5a>
 8005e08:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <__mdiff+0x108>)
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e10:	e7e6      	b.n	8005de0 <__mdiff+0x28>
 8005e12:	693e      	ldr	r6, [r7, #16]
 8005e14:	60c5      	str	r5, [r0, #12]
 8005e16:	6925      	ldr	r5, [r4, #16]
 8005e18:	f107 0114 	add.w	r1, r7, #20
 8005e1c:	f104 0914 	add.w	r9, r4, #20
 8005e20:	f100 0e14 	add.w	lr, r0, #20
 8005e24:	f107 0210 	add.w	r2, r7, #16
 8005e28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005e2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005e30:	46f2      	mov	sl, lr
 8005e32:	2700      	movs	r7, #0
 8005e34:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e3c:	fa1f f883 	uxth.w	r8, r3
 8005e40:	fa17 f78b 	uxtah	r7, r7, fp
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	eba7 0808 	sub.w	r8, r7, r8
 8005e4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e52:	fa1f f888 	uxth.w	r8, r8
 8005e56:	141f      	asrs	r7, r3, #16
 8005e58:	454d      	cmp	r5, r9
 8005e5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e5e:	f84a 3b04 	str.w	r3, [sl], #4
 8005e62:	d8e7      	bhi.n	8005e34 <__mdiff+0x7c>
 8005e64:	1b2b      	subs	r3, r5, r4
 8005e66:	3b15      	subs	r3, #21
 8005e68:	f023 0303 	bic.w	r3, r3, #3
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	3415      	adds	r4, #21
 8005e70:	42a5      	cmp	r5, r4
 8005e72:	bf38      	it	cc
 8005e74:	2304      	movcc	r3, #4
 8005e76:	4419      	add	r1, r3
 8005e78:	4473      	add	r3, lr
 8005e7a:	469e      	mov	lr, r3
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	4565      	cmp	r5, ip
 8005e80:	d30e      	bcc.n	8005ea0 <__mdiff+0xe8>
 8005e82:	f10c 0203 	add.w	r2, ip, #3
 8005e86:	1a52      	subs	r2, r2, r1
 8005e88:	f022 0203 	bic.w	r2, r2, #3
 8005e8c:	3903      	subs	r1, #3
 8005e8e:	458c      	cmp	ip, r1
 8005e90:	bf38      	it	cc
 8005e92:	2200      	movcc	r2, #0
 8005e94:	441a      	add	r2, r3
 8005e96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e9a:	b17b      	cbz	r3, 8005ebc <__mdiff+0x104>
 8005e9c:	6106      	str	r6, [r0, #16]
 8005e9e:	e7a5      	b.n	8005dec <__mdiff+0x34>
 8005ea0:	f855 8b04 	ldr.w	r8, [r5], #4
 8005ea4:	fa17 f488 	uxtah	r4, r7, r8
 8005ea8:	1422      	asrs	r2, r4, #16
 8005eaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005eae:	b2a4      	uxth	r4, r4
 8005eb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005eb4:	f84e 4b04 	str.w	r4, [lr], #4
 8005eb8:	1417      	asrs	r7, r2, #16
 8005eba:	e7e0      	b.n	8005e7e <__mdiff+0xc6>
 8005ebc:	3e01      	subs	r6, #1
 8005ebe:	e7ea      	b.n	8005e96 <__mdiff+0xde>
 8005ec0:	0800740c 	.word	0x0800740c
 8005ec4:	0800749c 	.word	0x0800749c

08005ec8 <__ulp>:
 8005ec8:	b082      	sub	sp, #8
 8005eca:	ed8d 0b00 	vstr	d0, [sp]
 8005ece:	9b01      	ldr	r3, [sp, #4]
 8005ed0:	4912      	ldr	r1, [pc, #72]	; (8005f1c <__ulp+0x54>)
 8005ed2:	4019      	ands	r1, r3
 8005ed4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	dd05      	ble.n	8005ee8 <__ulp+0x20>
 8005edc:	2200      	movs	r2, #0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	ec43 2b10 	vmov	d0, r2, r3
 8005ee4:	b002      	add	sp, #8
 8005ee6:	4770      	bx	lr
 8005ee8:	4249      	negs	r1, r1
 8005eea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005eee:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	da04      	bge.n	8005f06 <__ulp+0x3e>
 8005efc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005f00:	fa41 f300 	asr.w	r3, r1, r0
 8005f04:	e7ec      	b.n	8005ee0 <__ulp+0x18>
 8005f06:	f1a0 0114 	sub.w	r1, r0, #20
 8005f0a:	291e      	cmp	r1, #30
 8005f0c:	bfda      	itte	le
 8005f0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005f12:	fa20 f101 	lsrle.w	r1, r0, r1
 8005f16:	2101      	movgt	r1, #1
 8005f18:	460a      	mov	r2, r1
 8005f1a:	e7e1      	b.n	8005ee0 <__ulp+0x18>
 8005f1c:	7ff00000 	.word	0x7ff00000

08005f20 <__b2d>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	6905      	ldr	r5, [r0, #16]
 8005f24:	f100 0714 	add.w	r7, r0, #20
 8005f28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005f2c:	1f2e      	subs	r6, r5, #4
 8005f2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7ff fd52 	bl	80059dc <__hi0bits>
 8005f38:	f1c0 0320 	rsb	r3, r0, #32
 8005f3c:	280a      	cmp	r0, #10
 8005f3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005fbc <__b2d+0x9c>
 8005f42:	600b      	str	r3, [r1, #0]
 8005f44:	dc14      	bgt.n	8005f70 <__b2d+0x50>
 8005f46:	f1c0 0e0b 	rsb	lr, r0, #11
 8005f4a:	fa24 f10e 	lsr.w	r1, r4, lr
 8005f4e:	42b7      	cmp	r7, r6
 8005f50:	ea41 030c 	orr.w	r3, r1, ip
 8005f54:	bf34      	ite	cc
 8005f56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005f5a:	2100      	movcs	r1, #0
 8005f5c:	3015      	adds	r0, #21
 8005f5e:	fa04 f000 	lsl.w	r0, r4, r0
 8005f62:	fa21 f10e 	lsr.w	r1, r1, lr
 8005f66:	ea40 0201 	orr.w	r2, r0, r1
 8005f6a:	ec43 2b10 	vmov	d0, r2, r3
 8005f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f70:	42b7      	cmp	r7, r6
 8005f72:	bf3a      	itte	cc
 8005f74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005f78:	f1a5 0608 	subcc.w	r6, r5, #8
 8005f7c:	2100      	movcs	r1, #0
 8005f7e:	380b      	subs	r0, #11
 8005f80:	d017      	beq.n	8005fb2 <__b2d+0x92>
 8005f82:	f1c0 0c20 	rsb	ip, r0, #32
 8005f86:	fa04 f500 	lsl.w	r5, r4, r0
 8005f8a:	42be      	cmp	r6, r7
 8005f8c:	fa21 f40c 	lsr.w	r4, r1, ip
 8005f90:	ea45 0504 	orr.w	r5, r5, r4
 8005f94:	bf8c      	ite	hi
 8005f96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005f9a:	2400      	movls	r4, #0
 8005f9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005fa0:	fa01 f000 	lsl.w	r0, r1, r0
 8005fa4:	fa24 f40c 	lsr.w	r4, r4, ip
 8005fa8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005fac:	ea40 0204 	orr.w	r2, r0, r4
 8005fb0:	e7db      	b.n	8005f6a <__b2d+0x4a>
 8005fb2:	ea44 030c 	orr.w	r3, r4, ip
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	e7d7      	b.n	8005f6a <__b2d+0x4a>
 8005fba:	bf00      	nop
 8005fbc:	3ff00000 	.word	0x3ff00000

08005fc0 <__d2b>:
 8005fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	ec57 6b10 	vmov	r6, r7, d0
 8005fcc:	4690      	mov	r8, r2
 8005fce:	f7ff fc0f 	bl	80057f0 <_Balloc>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	b930      	cbnz	r0, 8005fe4 <__d2b+0x24>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	4b25      	ldr	r3, [pc, #148]	; (8006070 <__d2b+0xb0>)
 8005fda:	4826      	ldr	r0, [pc, #152]	; (8006074 <__d2b+0xb4>)
 8005fdc:	f240 310a 	movw	r1, #778	; 0x30a
 8005fe0:	f000 fb0e 	bl	8006600 <__assert_func>
 8005fe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fec:	bb35      	cbnz	r5, 800603c <__d2b+0x7c>
 8005fee:	2e00      	cmp	r6, #0
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	d028      	beq.n	8006046 <__d2b+0x86>
 8005ff4:	4668      	mov	r0, sp
 8005ff6:	9600      	str	r6, [sp, #0]
 8005ff8:	f7ff fd10 	bl	8005a1c <__lo0bits>
 8005ffc:	9900      	ldr	r1, [sp, #0]
 8005ffe:	b300      	cbz	r0, 8006042 <__d2b+0x82>
 8006000:	9a01      	ldr	r2, [sp, #4]
 8006002:	f1c0 0320 	rsb	r3, r0, #32
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	430b      	orrs	r3, r1
 800600c:	40c2      	lsrs	r2, r0
 800600e:	6163      	str	r3, [r4, #20]
 8006010:	9201      	str	r2, [sp, #4]
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	61a3      	str	r3, [r4, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf14      	ite	ne
 800601a:	2202      	movne	r2, #2
 800601c:	2201      	moveq	r2, #1
 800601e:	6122      	str	r2, [r4, #16]
 8006020:	b1d5      	cbz	r5, 8006058 <__d2b+0x98>
 8006022:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006026:	4405      	add	r5, r0
 8006028:	f8c9 5000 	str.w	r5, [r9]
 800602c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006030:	f8c8 0000 	str.w	r0, [r8]
 8006034:	4620      	mov	r0, r4
 8006036:	b003      	add	sp, #12
 8006038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800603c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006040:	e7d5      	b.n	8005fee <__d2b+0x2e>
 8006042:	6161      	str	r1, [r4, #20]
 8006044:	e7e5      	b.n	8006012 <__d2b+0x52>
 8006046:	a801      	add	r0, sp, #4
 8006048:	f7ff fce8 	bl	8005a1c <__lo0bits>
 800604c:	9b01      	ldr	r3, [sp, #4]
 800604e:	6163      	str	r3, [r4, #20]
 8006050:	2201      	movs	r2, #1
 8006052:	6122      	str	r2, [r4, #16]
 8006054:	3020      	adds	r0, #32
 8006056:	e7e3      	b.n	8006020 <__d2b+0x60>
 8006058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800605c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006060:	f8c9 0000 	str.w	r0, [r9]
 8006064:	6918      	ldr	r0, [r3, #16]
 8006066:	f7ff fcb9 	bl	80059dc <__hi0bits>
 800606a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800606e:	e7df      	b.n	8006030 <__d2b+0x70>
 8006070:	0800740c 	.word	0x0800740c
 8006074:	0800749c 	.word	0x0800749c

08006078 <__ratio>:
 8006078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	4688      	mov	r8, r1
 800607e:	4669      	mov	r1, sp
 8006080:	4681      	mov	r9, r0
 8006082:	f7ff ff4d 	bl	8005f20 <__b2d>
 8006086:	a901      	add	r1, sp, #4
 8006088:	4640      	mov	r0, r8
 800608a:	ec55 4b10 	vmov	r4, r5, d0
 800608e:	f7ff ff47 	bl	8005f20 <__b2d>
 8006092:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006096:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800609a:	eba3 0c02 	sub.w	ip, r3, r2
 800609e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80060a8:	ec51 0b10 	vmov	r0, r1, d0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bfd6      	itet	le
 80060b0:	460a      	movle	r2, r1
 80060b2:	462a      	movgt	r2, r5
 80060b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80060b8:	468b      	mov	fp, r1
 80060ba:	462f      	mov	r7, r5
 80060bc:	bfd4      	ite	le
 80060be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80060c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80060c6:	4620      	mov	r0, r4
 80060c8:	ee10 2a10 	vmov	r2, s0
 80060cc:	465b      	mov	r3, fp
 80060ce:	4639      	mov	r1, r7
 80060d0:	f7fa fbbc 	bl	800084c <__aeabi_ddiv>
 80060d4:	ec41 0b10 	vmov	d0, r0, r1
 80060d8:	b003      	add	sp, #12
 80060da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060de <__copybits>:
 80060de:	3901      	subs	r1, #1
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	1149      	asrs	r1, r1, #5
 80060e4:	6914      	ldr	r4, [r2, #16]
 80060e6:	3101      	adds	r1, #1
 80060e8:	f102 0314 	add.w	r3, r2, #20
 80060ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80060f4:	1f05      	subs	r5, r0, #4
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	d30c      	bcc.n	8006114 <__copybits+0x36>
 80060fa:	1aa3      	subs	r3, r4, r2
 80060fc:	3b11      	subs	r3, #17
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	3211      	adds	r2, #17
 8006104:	42a2      	cmp	r2, r4
 8006106:	bf88      	it	hi
 8006108:	2300      	movhi	r3, #0
 800610a:	4418      	add	r0, r3
 800610c:	2300      	movs	r3, #0
 800610e:	4288      	cmp	r0, r1
 8006110:	d305      	bcc.n	800611e <__copybits+0x40>
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	f853 6b04 	ldr.w	r6, [r3], #4
 8006118:	f845 6f04 	str.w	r6, [r5, #4]!
 800611c:	e7eb      	b.n	80060f6 <__copybits+0x18>
 800611e:	f840 3b04 	str.w	r3, [r0], #4
 8006122:	e7f4      	b.n	800610e <__copybits+0x30>

08006124 <__any_on>:
 8006124:	f100 0214 	add.w	r2, r0, #20
 8006128:	6900      	ldr	r0, [r0, #16]
 800612a:	114b      	asrs	r3, r1, #5
 800612c:	4298      	cmp	r0, r3
 800612e:	b510      	push	{r4, lr}
 8006130:	db11      	blt.n	8006156 <__any_on+0x32>
 8006132:	dd0a      	ble.n	800614a <__any_on+0x26>
 8006134:	f011 011f 	ands.w	r1, r1, #31
 8006138:	d007      	beq.n	800614a <__any_on+0x26>
 800613a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800613e:	fa24 f001 	lsr.w	r0, r4, r1
 8006142:	fa00 f101 	lsl.w	r1, r0, r1
 8006146:	428c      	cmp	r4, r1
 8006148:	d10b      	bne.n	8006162 <__any_on+0x3e>
 800614a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800614e:	4293      	cmp	r3, r2
 8006150:	d803      	bhi.n	800615a <__any_on+0x36>
 8006152:	2000      	movs	r0, #0
 8006154:	bd10      	pop	{r4, pc}
 8006156:	4603      	mov	r3, r0
 8006158:	e7f7      	b.n	800614a <__any_on+0x26>
 800615a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800615e:	2900      	cmp	r1, #0
 8006160:	d0f5      	beq.n	800614e <__any_on+0x2a>
 8006162:	2001      	movs	r0, #1
 8006164:	e7f6      	b.n	8006154 <__any_on+0x30>

08006166 <_calloc_r>:
 8006166:	b513      	push	{r0, r1, r4, lr}
 8006168:	434a      	muls	r2, r1
 800616a:	4611      	mov	r1, r2
 800616c:	9201      	str	r2, [sp, #4]
 800616e:	f000 f859 	bl	8006224 <_malloc_r>
 8006172:	4604      	mov	r4, r0
 8006174:	b118      	cbz	r0, 800617e <_calloc_r+0x18>
 8006176:	9a01      	ldr	r2, [sp, #4]
 8006178:	2100      	movs	r1, #0
 800617a:	f7fc fbb7 	bl	80028ec <memset>
 800617e:	4620      	mov	r0, r4
 8006180:	b002      	add	sp, #8
 8006182:	bd10      	pop	{r4, pc}

08006184 <_free_r>:
 8006184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006186:	2900      	cmp	r1, #0
 8006188:	d048      	beq.n	800621c <_free_r+0x98>
 800618a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618e:	9001      	str	r0, [sp, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f1a1 0404 	sub.w	r4, r1, #4
 8006196:	bfb8      	it	lt
 8006198:	18e4      	addlt	r4, r4, r3
 800619a:	f000 fa7b 	bl	8006694 <__malloc_lock>
 800619e:	4a20      	ldr	r2, [pc, #128]	; (8006220 <_free_r+0x9c>)
 80061a0:	9801      	ldr	r0, [sp, #4]
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	4615      	mov	r5, r2
 80061a6:	b933      	cbnz	r3, 80061b6 <_free_r+0x32>
 80061a8:	6063      	str	r3, [r4, #4]
 80061aa:	6014      	str	r4, [r2, #0]
 80061ac:	b003      	add	sp, #12
 80061ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061b2:	f000 ba75 	b.w	80066a0 <__malloc_unlock>
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	d90b      	bls.n	80061d2 <_free_r+0x4e>
 80061ba:	6821      	ldr	r1, [r4, #0]
 80061bc:	1862      	adds	r2, r4, r1
 80061be:	4293      	cmp	r3, r2
 80061c0:	bf04      	itt	eq
 80061c2:	681a      	ldreq	r2, [r3, #0]
 80061c4:	685b      	ldreq	r3, [r3, #4]
 80061c6:	6063      	str	r3, [r4, #4]
 80061c8:	bf04      	itt	eq
 80061ca:	1852      	addeq	r2, r2, r1
 80061cc:	6022      	streq	r2, [r4, #0]
 80061ce:	602c      	str	r4, [r5, #0]
 80061d0:	e7ec      	b.n	80061ac <_free_r+0x28>
 80061d2:	461a      	mov	r2, r3
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b10b      	cbz	r3, 80061dc <_free_r+0x58>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d9fa      	bls.n	80061d2 <_free_r+0x4e>
 80061dc:	6811      	ldr	r1, [r2, #0]
 80061de:	1855      	adds	r5, r2, r1
 80061e0:	42a5      	cmp	r5, r4
 80061e2:	d10b      	bne.n	80061fc <_free_r+0x78>
 80061e4:	6824      	ldr	r4, [r4, #0]
 80061e6:	4421      	add	r1, r4
 80061e8:	1854      	adds	r4, r2, r1
 80061ea:	42a3      	cmp	r3, r4
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	d1dd      	bne.n	80061ac <_free_r+0x28>
 80061f0:	681c      	ldr	r4, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6053      	str	r3, [r2, #4]
 80061f6:	4421      	add	r1, r4
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	e7d7      	b.n	80061ac <_free_r+0x28>
 80061fc:	d902      	bls.n	8006204 <_free_r+0x80>
 80061fe:	230c      	movs	r3, #12
 8006200:	6003      	str	r3, [r0, #0]
 8006202:	e7d3      	b.n	80061ac <_free_r+0x28>
 8006204:	6825      	ldr	r5, [r4, #0]
 8006206:	1961      	adds	r1, r4, r5
 8006208:	428b      	cmp	r3, r1
 800620a:	bf04      	itt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	6063      	str	r3, [r4, #4]
 8006212:	bf04      	itt	eq
 8006214:	1949      	addeq	r1, r1, r5
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	6054      	str	r4, [r2, #4]
 800621a:	e7c7      	b.n	80061ac <_free_r+0x28>
 800621c:	b003      	add	sp, #12
 800621e:	bd30      	pop	{r4, r5, pc}
 8006220:	20000200 	.word	0x20000200

08006224 <_malloc_r>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	1ccd      	adds	r5, r1, #3
 8006228:	f025 0503 	bic.w	r5, r5, #3
 800622c:	3508      	adds	r5, #8
 800622e:	2d0c      	cmp	r5, #12
 8006230:	bf38      	it	cc
 8006232:	250c      	movcc	r5, #12
 8006234:	2d00      	cmp	r5, #0
 8006236:	4606      	mov	r6, r0
 8006238:	db01      	blt.n	800623e <_malloc_r+0x1a>
 800623a:	42a9      	cmp	r1, r5
 800623c:	d903      	bls.n	8006246 <_malloc_r+0x22>
 800623e:	230c      	movs	r3, #12
 8006240:	6033      	str	r3, [r6, #0]
 8006242:	2000      	movs	r0, #0
 8006244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006246:	f000 fa25 	bl	8006694 <__malloc_lock>
 800624a:	4921      	ldr	r1, [pc, #132]	; (80062d0 <_malloc_r+0xac>)
 800624c:	680a      	ldr	r2, [r1, #0]
 800624e:	4614      	mov	r4, r2
 8006250:	b99c      	cbnz	r4, 800627a <_malloc_r+0x56>
 8006252:	4f20      	ldr	r7, [pc, #128]	; (80062d4 <_malloc_r+0xb0>)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	b923      	cbnz	r3, 8006262 <_malloc_r+0x3e>
 8006258:	4621      	mov	r1, r4
 800625a:	4630      	mov	r0, r6
 800625c:	f000 f9a0 	bl	80065a0 <_sbrk_r>
 8006260:	6038      	str	r0, [r7, #0]
 8006262:	4629      	mov	r1, r5
 8006264:	4630      	mov	r0, r6
 8006266:	f000 f99b 	bl	80065a0 <_sbrk_r>
 800626a:	1c43      	adds	r3, r0, #1
 800626c:	d123      	bne.n	80062b6 <_malloc_r+0x92>
 800626e:	230c      	movs	r3, #12
 8006270:	6033      	str	r3, [r6, #0]
 8006272:	4630      	mov	r0, r6
 8006274:	f000 fa14 	bl	80066a0 <__malloc_unlock>
 8006278:	e7e3      	b.n	8006242 <_malloc_r+0x1e>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	1b5b      	subs	r3, r3, r5
 800627e:	d417      	bmi.n	80062b0 <_malloc_r+0x8c>
 8006280:	2b0b      	cmp	r3, #11
 8006282:	d903      	bls.n	800628c <_malloc_r+0x68>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	441c      	add	r4, r3
 8006288:	6025      	str	r5, [r4, #0]
 800628a:	e004      	b.n	8006296 <_malloc_r+0x72>
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	42a2      	cmp	r2, r4
 8006290:	bf0c      	ite	eq
 8006292:	600b      	streq	r3, [r1, #0]
 8006294:	6053      	strne	r3, [r2, #4]
 8006296:	4630      	mov	r0, r6
 8006298:	f000 fa02 	bl	80066a0 <__malloc_unlock>
 800629c:	f104 000b 	add.w	r0, r4, #11
 80062a0:	1d23      	adds	r3, r4, #4
 80062a2:	f020 0007 	bic.w	r0, r0, #7
 80062a6:	1ac2      	subs	r2, r0, r3
 80062a8:	d0cc      	beq.n	8006244 <_malloc_r+0x20>
 80062aa:	1a1b      	subs	r3, r3, r0
 80062ac:	50a3      	str	r3, [r4, r2]
 80062ae:	e7c9      	b.n	8006244 <_malloc_r+0x20>
 80062b0:	4622      	mov	r2, r4
 80062b2:	6864      	ldr	r4, [r4, #4]
 80062b4:	e7cc      	b.n	8006250 <_malloc_r+0x2c>
 80062b6:	1cc4      	adds	r4, r0, #3
 80062b8:	f024 0403 	bic.w	r4, r4, #3
 80062bc:	42a0      	cmp	r0, r4
 80062be:	d0e3      	beq.n	8006288 <_malloc_r+0x64>
 80062c0:	1a21      	subs	r1, r4, r0
 80062c2:	4630      	mov	r0, r6
 80062c4:	f000 f96c 	bl	80065a0 <_sbrk_r>
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1dd      	bne.n	8006288 <_malloc_r+0x64>
 80062cc:	e7cf      	b.n	800626e <_malloc_r+0x4a>
 80062ce:	bf00      	nop
 80062d0:	20000200 	.word	0x20000200
 80062d4:	20000204 	.word	0x20000204

080062d8 <__ssputs_r>:
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	688e      	ldr	r6, [r1, #8]
 80062de:	429e      	cmp	r6, r3
 80062e0:	4682      	mov	sl, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	4690      	mov	r8, r2
 80062e6:	461f      	mov	r7, r3
 80062e8:	d838      	bhi.n	800635c <__ssputs_r+0x84>
 80062ea:	898a      	ldrh	r2, [r1, #12]
 80062ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062f0:	d032      	beq.n	8006358 <__ssputs_r+0x80>
 80062f2:	6825      	ldr	r5, [r4, #0]
 80062f4:	6909      	ldr	r1, [r1, #16]
 80062f6:	eba5 0901 	sub.w	r9, r5, r1
 80062fa:	6965      	ldr	r5, [r4, #20]
 80062fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006304:	3301      	adds	r3, #1
 8006306:	444b      	add	r3, r9
 8006308:	106d      	asrs	r5, r5, #1
 800630a:	429d      	cmp	r5, r3
 800630c:	bf38      	it	cc
 800630e:	461d      	movcc	r5, r3
 8006310:	0553      	lsls	r3, r2, #21
 8006312:	d531      	bpl.n	8006378 <__ssputs_r+0xa0>
 8006314:	4629      	mov	r1, r5
 8006316:	f7ff ff85 	bl	8006224 <_malloc_r>
 800631a:	4606      	mov	r6, r0
 800631c:	b950      	cbnz	r0, 8006334 <__ssputs_r+0x5c>
 800631e:	230c      	movs	r3, #12
 8006320:	f8ca 3000 	str.w	r3, [sl]
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800632a:	81a3      	strh	r3, [r4, #12]
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	6921      	ldr	r1, [r4, #16]
 8006336:	464a      	mov	r2, r9
 8006338:	f7ff fa4c 	bl	80057d4 <memcpy>
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	6126      	str	r6, [r4, #16]
 800634a:	6165      	str	r5, [r4, #20]
 800634c:	444e      	add	r6, r9
 800634e:	eba5 0509 	sub.w	r5, r5, r9
 8006352:	6026      	str	r6, [r4, #0]
 8006354:	60a5      	str	r5, [r4, #8]
 8006356:	463e      	mov	r6, r7
 8006358:	42be      	cmp	r6, r7
 800635a:	d900      	bls.n	800635e <__ssputs_r+0x86>
 800635c:	463e      	mov	r6, r7
 800635e:	4632      	mov	r2, r6
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	4641      	mov	r1, r8
 8006364:	f000 f97c 	bl	8006660 <memmove>
 8006368:	68a3      	ldr	r3, [r4, #8]
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	1b9b      	subs	r3, r3, r6
 800636e:	4432      	add	r2, r6
 8006370:	60a3      	str	r3, [r4, #8]
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	2000      	movs	r0, #0
 8006376:	e7db      	b.n	8006330 <__ssputs_r+0x58>
 8006378:	462a      	mov	r2, r5
 800637a:	f000 f997 	bl	80066ac <_realloc_r>
 800637e:	4606      	mov	r6, r0
 8006380:	2800      	cmp	r0, #0
 8006382:	d1e1      	bne.n	8006348 <__ssputs_r+0x70>
 8006384:	6921      	ldr	r1, [r4, #16]
 8006386:	4650      	mov	r0, sl
 8006388:	f7ff fefc 	bl	8006184 <_free_r>
 800638c:	e7c7      	b.n	800631e <__ssputs_r+0x46>
	...

08006390 <_svfiprintf_r>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	4698      	mov	r8, r3
 8006396:	898b      	ldrh	r3, [r1, #12]
 8006398:	061b      	lsls	r3, r3, #24
 800639a:	b09d      	sub	sp, #116	; 0x74
 800639c:	4607      	mov	r7, r0
 800639e:	460d      	mov	r5, r1
 80063a0:	4614      	mov	r4, r2
 80063a2:	d50e      	bpl.n	80063c2 <_svfiprintf_r+0x32>
 80063a4:	690b      	ldr	r3, [r1, #16]
 80063a6:	b963      	cbnz	r3, 80063c2 <_svfiprintf_r+0x32>
 80063a8:	2140      	movs	r1, #64	; 0x40
 80063aa:	f7ff ff3b 	bl	8006224 <_malloc_r>
 80063ae:	6028      	str	r0, [r5, #0]
 80063b0:	6128      	str	r0, [r5, #16]
 80063b2:	b920      	cbnz	r0, 80063be <_svfiprintf_r+0x2e>
 80063b4:	230c      	movs	r3, #12
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e0d1      	b.n	8006562 <_svfiprintf_r+0x1d2>
 80063be:	2340      	movs	r3, #64	; 0x40
 80063c0:	616b      	str	r3, [r5, #20]
 80063c2:	2300      	movs	r3, #0
 80063c4:	9309      	str	r3, [sp, #36]	; 0x24
 80063c6:	2320      	movs	r3, #32
 80063c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80063d0:	2330      	movs	r3, #48	; 0x30
 80063d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800657c <_svfiprintf_r+0x1ec>
 80063d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063da:	f04f 0901 	mov.w	r9, #1
 80063de:	4623      	mov	r3, r4
 80063e0:	469a      	mov	sl, r3
 80063e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063e6:	b10a      	cbz	r2, 80063ec <_svfiprintf_r+0x5c>
 80063e8:	2a25      	cmp	r2, #37	; 0x25
 80063ea:	d1f9      	bne.n	80063e0 <_svfiprintf_r+0x50>
 80063ec:	ebba 0b04 	subs.w	fp, sl, r4
 80063f0:	d00b      	beq.n	800640a <_svfiprintf_r+0x7a>
 80063f2:	465b      	mov	r3, fp
 80063f4:	4622      	mov	r2, r4
 80063f6:	4629      	mov	r1, r5
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7ff ff6d 	bl	80062d8 <__ssputs_r>
 80063fe:	3001      	adds	r0, #1
 8006400:	f000 80aa 	beq.w	8006558 <_svfiprintf_r+0x1c8>
 8006404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006406:	445a      	add	r2, fp
 8006408:	9209      	str	r2, [sp, #36]	; 0x24
 800640a:	f89a 3000 	ldrb.w	r3, [sl]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80a2 	beq.w	8006558 <_svfiprintf_r+0x1c8>
 8006414:	2300      	movs	r3, #0
 8006416:	f04f 32ff 	mov.w	r2, #4294967295
 800641a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800641e:	f10a 0a01 	add.w	sl, sl, #1
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	9307      	str	r3, [sp, #28]
 8006426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800642a:	931a      	str	r3, [sp, #104]	; 0x68
 800642c:	4654      	mov	r4, sl
 800642e:	2205      	movs	r2, #5
 8006430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006434:	4851      	ldr	r0, [pc, #324]	; (800657c <_svfiprintf_r+0x1ec>)
 8006436:	f7f9 fed3 	bl	80001e0 <memchr>
 800643a:	9a04      	ldr	r2, [sp, #16]
 800643c:	b9d8      	cbnz	r0, 8006476 <_svfiprintf_r+0xe6>
 800643e:	06d0      	lsls	r0, r2, #27
 8006440:	bf44      	itt	mi
 8006442:	2320      	movmi	r3, #32
 8006444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006448:	0711      	lsls	r1, r2, #28
 800644a:	bf44      	itt	mi
 800644c:	232b      	movmi	r3, #43	; 0x2b
 800644e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006452:	f89a 3000 	ldrb.w	r3, [sl]
 8006456:	2b2a      	cmp	r3, #42	; 0x2a
 8006458:	d015      	beq.n	8006486 <_svfiprintf_r+0xf6>
 800645a:	9a07      	ldr	r2, [sp, #28]
 800645c:	4654      	mov	r4, sl
 800645e:	2000      	movs	r0, #0
 8006460:	f04f 0c0a 	mov.w	ip, #10
 8006464:	4621      	mov	r1, r4
 8006466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800646a:	3b30      	subs	r3, #48	; 0x30
 800646c:	2b09      	cmp	r3, #9
 800646e:	d94e      	bls.n	800650e <_svfiprintf_r+0x17e>
 8006470:	b1b0      	cbz	r0, 80064a0 <_svfiprintf_r+0x110>
 8006472:	9207      	str	r2, [sp, #28]
 8006474:	e014      	b.n	80064a0 <_svfiprintf_r+0x110>
 8006476:	eba0 0308 	sub.w	r3, r0, r8
 800647a:	fa09 f303 	lsl.w	r3, r9, r3
 800647e:	4313      	orrs	r3, r2
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	46a2      	mov	sl, r4
 8006484:	e7d2      	b.n	800642c <_svfiprintf_r+0x9c>
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	1d19      	adds	r1, r3, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	9103      	str	r1, [sp, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfbb      	ittet	lt
 8006492:	425b      	neglt	r3, r3
 8006494:	f042 0202 	orrlt.w	r2, r2, #2
 8006498:	9307      	strge	r3, [sp, #28]
 800649a:	9307      	strlt	r3, [sp, #28]
 800649c:	bfb8      	it	lt
 800649e:	9204      	strlt	r2, [sp, #16]
 80064a0:	7823      	ldrb	r3, [r4, #0]
 80064a2:	2b2e      	cmp	r3, #46	; 0x2e
 80064a4:	d10c      	bne.n	80064c0 <_svfiprintf_r+0x130>
 80064a6:	7863      	ldrb	r3, [r4, #1]
 80064a8:	2b2a      	cmp	r3, #42	; 0x2a
 80064aa:	d135      	bne.n	8006518 <_svfiprintf_r+0x188>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	1d1a      	adds	r2, r3, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	9203      	str	r2, [sp, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bfb8      	it	lt
 80064b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80064bc:	3402      	adds	r4, #2
 80064be:	9305      	str	r3, [sp, #20]
 80064c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800658c <_svfiprintf_r+0x1fc>
 80064c4:	7821      	ldrb	r1, [r4, #0]
 80064c6:	2203      	movs	r2, #3
 80064c8:	4650      	mov	r0, sl
 80064ca:	f7f9 fe89 	bl	80001e0 <memchr>
 80064ce:	b140      	cbz	r0, 80064e2 <_svfiprintf_r+0x152>
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	eba0 000a 	sub.w	r0, r0, sl
 80064d6:	fa03 f000 	lsl.w	r0, r3, r0
 80064da:	9b04      	ldr	r3, [sp, #16]
 80064dc:	4303      	orrs	r3, r0
 80064de:	3401      	adds	r4, #1
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e6:	4826      	ldr	r0, [pc, #152]	; (8006580 <_svfiprintf_r+0x1f0>)
 80064e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064ec:	2206      	movs	r2, #6
 80064ee:	f7f9 fe77 	bl	80001e0 <memchr>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d038      	beq.n	8006568 <_svfiprintf_r+0x1d8>
 80064f6:	4b23      	ldr	r3, [pc, #140]	; (8006584 <_svfiprintf_r+0x1f4>)
 80064f8:	bb1b      	cbnz	r3, 8006542 <_svfiprintf_r+0x1b2>
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	3307      	adds	r3, #7
 80064fe:	f023 0307 	bic.w	r3, r3, #7
 8006502:	3308      	adds	r3, #8
 8006504:	9303      	str	r3, [sp, #12]
 8006506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006508:	4433      	add	r3, r6
 800650a:	9309      	str	r3, [sp, #36]	; 0x24
 800650c:	e767      	b.n	80063de <_svfiprintf_r+0x4e>
 800650e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006512:	460c      	mov	r4, r1
 8006514:	2001      	movs	r0, #1
 8006516:	e7a5      	b.n	8006464 <_svfiprintf_r+0xd4>
 8006518:	2300      	movs	r3, #0
 800651a:	3401      	adds	r4, #1
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	4619      	mov	r1, r3
 8006520:	f04f 0c0a 	mov.w	ip, #10
 8006524:	4620      	mov	r0, r4
 8006526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800652a:	3a30      	subs	r2, #48	; 0x30
 800652c:	2a09      	cmp	r2, #9
 800652e:	d903      	bls.n	8006538 <_svfiprintf_r+0x1a8>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0c5      	beq.n	80064c0 <_svfiprintf_r+0x130>
 8006534:	9105      	str	r1, [sp, #20]
 8006536:	e7c3      	b.n	80064c0 <_svfiprintf_r+0x130>
 8006538:	fb0c 2101 	mla	r1, ip, r1, r2
 800653c:	4604      	mov	r4, r0
 800653e:	2301      	movs	r3, #1
 8006540:	e7f0      	b.n	8006524 <_svfiprintf_r+0x194>
 8006542:	ab03      	add	r3, sp, #12
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	462a      	mov	r2, r5
 8006548:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <_svfiprintf_r+0x1f8>)
 800654a:	a904      	add	r1, sp, #16
 800654c:	4638      	mov	r0, r7
 800654e:	f7fc fa75 	bl	8002a3c <_printf_float>
 8006552:	1c42      	adds	r2, r0, #1
 8006554:	4606      	mov	r6, r0
 8006556:	d1d6      	bne.n	8006506 <_svfiprintf_r+0x176>
 8006558:	89ab      	ldrh	r3, [r5, #12]
 800655a:	065b      	lsls	r3, r3, #25
 800655c:	f53f af2c 	bmi.w	80063b8 <_svfiprintf_r+0x28>
 8006560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006562:	b01d      	add	sp, #116	; 0x74
 8006564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	462a      	mov	r2, r5
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <_svfiprintf_r+0x1f8>)
 8006570:	a904      	add	r1, sp, #16
 8006572:	4638      	mov	r0, r7
 8006574:	f7fc fd06 	bl	8002f84 <_printf_i>
 8006578:	e7eb      	b.n	8006552 <_svfiprintf_r+0x1c2>
 800657a:	bf00      	nop
 800657c:	080075fc 	.word	0x080075fc
 8006580:	08007606 	.word	0x08007606
 8006584:	08002a3d 	.word	0x08002a3d
 8006588:	080062d9 	.word	0x080062d9
 800658c:	08007602 	.word	0x08007602

08006590 <nan>:
 8006590:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006598 <nan+0x8>
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	00000000 	.word	0x00000000
 800659c:	7ff80000 	.word	0x7ff80000

080065a0 <_sbrk_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	; (80065bc <_sbrk_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fb fc56 	bl	8001e5c <_sbrk>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_sbrk_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_sbrk_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	200003a0 	.word	0x200003a0

080065c0 <strncmp>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	b16a      	cbz	r2, 80065e0 <strncmp+0x20>
 80065c4:	3901      	subs	r1, #1
 80065c6:	1884      	adds	r4, r0, r2
 80065c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80065cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d103      	bne.n	80065dc <strncmp+0x1c>
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d001      	beq.n	80065dc <strncmp+0x1c>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1f5      	bne.n	80065c8 <strncmp+0x8>
 80065dc:	1a98      	subs	r0, r3, r2
 80065de:	bd10      	pop	{r4, pc}
 80065e0:	4610      	mov	r0, r2
 80065e2:	e7fc      	b.n	80065de <strncmp+0x1e>

080065e4 <__ascii_wctomb>:
 80065e4:	b149      	cbz	r1, 80065fa <__ascii_wctomb+0x16>
 80065e6:	2aff      	cmp	r2, #255	; 0xff
 80065e8:	bf85      	ittet	hi
 80065ea:	238a      	movhi	r3, #138	; 0x8a
 80065ec:	6003      	strhi	r3, [r0, #0]
 80065ee:	700a      	strbls	r2, [r1, #0]
 80065f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80065f4:	bf98      	it	ls
 80065f6:	2001      	movls	r0, #1
 80065f8:	4770      	bx	lr
 80065fa:	4608      	mov	r0, r1
 80065fc:	4770      	bx	lr
	...

08006600 <__assert_func>:
 8006600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006602:	4614      	mov	r4, r2
 8006604:	461a      	mov	r2, r3
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <__assert_func+0x2c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4605      	mov	r5, r0
 800660c:	68d8      	ldr	r0, [r3, #12]
 800660e:	b14c      	cbz	r4, 8006624 <__assert_func+0x24>
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <__assert_func+0x30>)
 8006612:	9100      	str	r1, [sp, #0]
 8006614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006618:	4906      	ldr	r1, [pc, #24]	; (8006634 <__assert_func+0x34>)
 800661a:	462b      	mov	r3, r5
 800661c:	f000 f80e 	bl	800663c <fiprintf>
 8006620:	f000 fa84 	bl	8006b2c <abort>
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <__assert_func+0x38>)
 8006626:	461c      	mov	r4, r3
 8006628:	e7f3      	b.n	8006612 <__assert_func+0x12>
 800662a:	bf00      	nop
 800662c:	20000004 	.word	0x20000004
 8006630:	0800760d 	.word	0x0800760d
 8006634:	0800761a 	.word	0x0800761a
 8006638:	08007648 	.word	0x08007648

0800663c <fiprintf>:
 800663c:	b40e      	push	{r1, r2, r3}
 800663e:	b503      	push	{r0, r1, lr}
 8006640:	4601      	mov	r1, r0
 8006642:	ab03      	add	r3, sp, #12
 8006644:	4805      	ldr	r0, [pc, #20]	; (800665c <fiprintf+0x20>)
 8006646:	f853 2b04 	ldr.w	r2, [r3], #4
 800664a:	6800      	ldr	r0, [r0, #0]
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	f000 f87d 	bl	800674c <_vfiprintf_r>
 8006652:	b002      	add	sp, #8
 8006654:	f85d eb04 	ldr.w	lr, [sp], #4
 8006658:	b003      	add	sp, #12
 800665a:	4770      	bx	lr
 800665c:	20000004 	.word	0x20000004

08006660 <memmove>:
 8006660:	4288      	cmp	r0, r1
 8006662:	b510      	push	{r4, lr}
 8006664:	eb01 0402 	add.w	r4, r1, r2
 8006668:	d902      	bls.n	8006670 <memmove+0x10>
 800666a:	4284      	cmp	r4, r0
 800666c:	4623      	mov	r3, r4
 800666e:	d807      	bhi.n	8006680 <memmove+0x20>
 8006670:	1e43      	subs	r3, r0, #1
 8006672:	42a1      	cmp	r1, r4
 8006674:	d008      	beq.n	8006688 <memmove+0x28>
 8006676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800667a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800667e:	e7f8      	b.n	8006672 <memmove+0x12>
 8006680:	4402      	add	r2, r0
 8006682:	4601      	mov	r1, r0
 8006684:	428a      	cmp	r2, r1
 8006686:	d100      	bne.n	800668a <memmove+0x2a>
 8006688:	bd10      	pop	{r4, pc}
 800668a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800668e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006692:	e7f7      	b.n	8006684 <memmove+0x24>

08006694 <__malloc_lock>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__malloc_lock+0x8>)
 8006696:	f000 bc09 	b.w	8006eac <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	200003a8 	.word	0x200003a8

080066a0 <__malloc_unlock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__malloc_unlock+0x8>)
 80066a2:	f000 bc04 	b.w	8006eae <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	200003a8 	.word	0x200003a8

080066ac <_realloc_r>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	4607      	mov	r7, r0
 80066b0:	4614      	mov	r4, r2
 80066b2:	460e      	mov	r6, r1
 80066b4:	b921      	cbnz	r1, 80066c0 <_realloc_r+0x14>
 80066b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066ba:	4611      	mov	r1, r2
 80066bc:	f7ff bdb2 	b.w	8006224 <_malloc_r>
 80066c0:	b922      	cbnz	r2, 80066cc <_realloc_r+0x20>
 80066c2:	f7ff fd5f 	bl	8006184 <_free_r>
 80066c6:	4625      	mov	r5, r4
 80066c8:	4628      	mov	r0, r5
 80066ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066cc:	f000 fc54 	bl	8006f78 <_malloc_usable_size_r>
 80066d0:	42a0      	cmp	r0, r4
 80066d2:	d20f      	bcs.n	80066f4 <_realloc_r+0x48>
 80066d4:	4621      	mov	r1, r4
 80066d6:	4638      	mov	r0, r7
 80066d8:	f7ff fda4 	bl	8006224 <_malloc_r>
 80066dc:	4605      	mov	r5, r0
 80066de:	2800      	cmp	r0, #0
 80066e0:	d0f2      	beq.n	80066c8 <_realloc_r+0x1c>
 80066e2:	4631      	mov	r1, r6
 80066e4:	4622      	mov	r2, r4
 80066e6:	f7ff f875 	bl	80057d4 <memcpy>
 80066ea:	4631      	mov	r1, r6
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7ff fd49 	bl	8006184 <_free_r>
 80066f2:	e7e9      	b.n	80066c8 <_realloc_r+0x1c>
 80066f4:	4635      	mov	r5, r6
 80066f6:	e7e7      	b.n	80066c8 <_realloc_r+0x1c>

080066f8 <__sfputc_r>:
 80066f8:	6893      	ldr	r3, [r2, #8]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	b410      	push	{r4}
 8006700:	6093      	str	r3, [r2, #8]
 8006702:	da08      	bge.n	8006716 <__sfputc_r+0x1e>
 8006704:	6994      	ldr	r4, [r2, #24]
 8006706:	42a3      	cmp	r3, r4
 8006708:	db01      	blt.n	800670e <__sfputc_r+0x16>
 800670a:	290a      	cmp	r1, #10
 800670c:	d103      	bne.n	8006716 <__sfputc_r+0x1e>
 800670e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006712:	f000 b94b 	b.w	80069ac <__swbuf_r>
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	1c58      	adds	r0, r3, #1
 800671a:	6010      	str	r0, [r2, #0]
 800671c:	7019      	strb	r1, [r3, #0]
 800671e:	4608      	mov	r0, r1
 8006720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006724:	4770      	bx	lr

08006726 <__sfputs_r>:
 8006726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006728:	4606      	mov	r6, r0
 800672a:	460f      	mov	r7, r1
 800672c:	4614      	mov	r4, r2
 800672e:	18d5      	adds	r5, r2, r3
 8006730:	42ac      	cmp	r4, r5
 8006732:	d101      	bne.n	8006738 <__sfputs_r+0x12>
 8006734:	2000      	movs	r0, #0
 8006736:	e007      	b.n	8006748 <__sfputs_r+0x22>
 8006738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673c:	463a      	mov	r2, r7
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ffda 	bl	80066f8 <__sfputc_r>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d1f3      	bne.n	8006730 <__sfputs_r+0xa>
 8006748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800674c <_vfiprintf_r>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	460d      	mov	r5, r1
 8006752:	b09d      	sub	sp, #116	; 0x74
 8006754:	4614      	mov	r4, r2
 8006756:	4698      	mov	r8, r3
 8006758:	4606      	mov	r6, r0
 800675a:	b118      	cbz	r0, 8006764 <_vfiprintf_r+0x18>
 800675c:	6983      	ldr	r3, [r0, #24]
 800675e:	b90b      	cbnz	r3, 8006764 <_vfiprintf_r+0x18>
 8006760:	f000 fb06 	bl	8006d70 <__sinit>
 8006764:	4b89      	ldr	r3, [pc, #548]	; (800698c <_vfiprintf_r+0x240>)
 8006766:	429d      	cmp	r5, r3
 8006768:	d11b      	bne.n	80067a2 <_vfiprintf_r+0x56>
 800676a:	6875      	ldr	r5, [r6, #4]
 800676c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800676e:	07d9      	lsls	r1, r3, #31
 8006770:	d405      	bmi.n	800677e <_vfiprintf_r+0x32>
 8006772:	89ab      	ldrh	r3, [r5, #12]
 8006774:	059a      	lsls	r2, r3, #22
 8006776:	d402      	bmi.n	800677e <_vfiprintf_r+0x32>
 8006778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800677a:	f000 fb97 	bl	8006eac <__retarget_lock_acquire_recursive>
 800677e:	89ab      	ldrh	r3, [r5, #12]
 8006780:	071b      	lsls	r3, r3, #28
 8006782:	d501      	bpl.n	8006788 <_vfiprintf_r+0x3c>
 8006784:	692b      	ldr	r3, [r5, #16]
 8006786:	b9eb      	cbnz	r3, 80067c4 <_vfiprintf_r+0x78>
 8006788:	4629      	mov	r1, r5
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f960 	bl	8006a50 <__swsetup_r>
 8006790:	b1c0      	cbz	r0, 80067c4 <_vfiprintf_r+0x78>
 8006792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006794:	07dc      	lsls	r4, r3, #31
 8006796:	d50e      	bpl.n	80067b6 <_vfiprintf_r+0x6a>
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	b01d      	add	sp, #116	; 0x74
 800679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a2:	4b7b      	ldr	r3, [pc, #492]	; (8006990 <_vfiprintf_r+0x244>)
 80067a4:	429d      	cmp	r5, r3
 80067a6:	d101      	bne.n	80067ac <_vfiprintf_r+0x60>
 80067a8:	68b5      	ldr	r5, [r6, #8]
 80067aa:	e7df      	b.n	800676c <_vfiprintf_r+0x20>
 80067ac:	4b79      	ldr	r3, [pc, #484]	; (8006994 <_vfiprintf_r+0x248>)
 80067ae:	429d      	cmp	r5, r3
 80067b0:	bf08      	it	eq
 80067b2:	68f5      	ldreq	r5, [r6, #12]
 80067b4:	e7da      	b.n	800676c <_vfiprintf_r+0x20>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	0598      	lsls	r0, r3, #22
 80067ba:	d4ed      	bmi.n	8006798 <_vfiprintf_r+0x4c>
 80067bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067be:	f000 fb76 	bl	8006eae <__retarget_lock_release_recursive>
 80067c2:	e7e9      	b.n	8006798 <_vfiprintf_r+0x4c>
 80067c4:	2300      	movs	r3, #0
 80067c6:	9309      	str	r3, [sp, #36]	; 0x24
 80067c8:	2320      	movs	r3, #32
 80067ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80067d2:	2330      	movs	r3, #48	; 0x30
 80067d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006998 <_vfiprintf_r+0x24c>
 80067d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067dc:	f04f 0901 	mov.w	r9, #1
 80067e0:	4623      	mov	r3, r4
 80067e2:	469a      	mov	sl, r3
 80067e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067e8:	b10a      	cbz	r2, 80067ee <_vfiprintf_r+0xa2>
 80067ea:	2a25      	cmp	r2, #37	; 0x25
 80067ec:	d1f9      	bne.n	80067e2 <_vfiprintf_r+0x96>
 80067ee:	ebba 0b04 	subs.w	fp, sl, r4
 80067f2:	d00b      	beq.n	800680c <_vfiprintf_r+0xc0>
 80067f4:	465b      	mov	r3, fp
 80067f6:	4622      	mov	r2, r4
 80067f8:	4629      	mov	r1, r5
 80067fa:	4630      	mov	r0, r6
 80067fc:	f7ff ff93 	bl	8006726 <__sfputs_r>
 8006800:	3001      	adds	r0, #1
 8006802:	f000 80aa 	beq.w	800695a <_vfiprintf_r+0x20e>
 8006806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006808:	445a      	add	r2, fp
 800680a:	9209      	str	r2, [sp, #36]	; 0x24
 800680c:	f89a 3000 	ldrb.w	r3, [sl]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80a2 	beq.w	800695a <_vfiprintf_r+0x20e>
 8006816:	2300      	movs	r3, #0
 8006818:	f04f 32ff 	mov.w	r2, #4294967295
 800681c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006820:	f10a 0a01 	add.w	sl, sl, #1
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	9307      	str	r3, [sp, #28]
 8006828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800682c:	931a      	str	r3, [sp, #104]	; 0x68
 800682e:	4654      	mov	r4, sl
 8006830:	2205      	movs	r2, #5
 8006832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006836:	4858      	ldr	r0, [pc, #352]	; (8006998 <_vfiprintf_r+0x24c>)
 8006838:	f7f9 fcd2 	bl	80001e0 <memchr>
 800683c:	9a04      	ldr	r2, [sp, #16]
 800683e:	b9d8      	cbnz	r0, 8006878 <_vfiprintf_r+0x12c>
 8006840:	06d1      	lsls	r1, r2, #27
 8006842:	bf44      	itt	mi
 8006844:	2320      	movmi	r3, #32
 8006846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800684a:	0713      	lsls	r3, r2, #28
 800684c:	bf44      	itt	mi
 800684e:	232b      	movmi	r3, #43	; 0x2b
 8006850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006854:	f89a 3000 	ldrb.w	r3, [sl]
 8006858:	2b2a      	cmp	r3, #42	; 0x2a
 800685a:	d015      	beq.n	8006888 <_vfiprintf_r+0x13c>
 800685c:	9a07      	ldr	r2, [sp, #28]
 800685e:	4654      	mov	r4, sl
 8006860:	2000      	movs	r0, #0
 8006862:	f04f 0c0a 	mov.w	ip, #10
 8006866:	4621      	mov	r1, r4
 8006868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800686c:	3b30      	subs	r3, #48	; 0x30
 800686e:	2b09      	cmp	r3, #9
 8006870:	d94e      	bls.n	8006910 <_vfiprintf_r+0x1c4>
 8006872:	b1b0      	cbz	r0, 80068a2 <_vfiprintf_r+0x156>
 8006874:	9207      	str	r2, [sp, #28]
 8006876:	e014      	b.n	80068a2 <_vfiprintf_r+0x156>
 8006878:	eba0 0308 	sub.w	r3, r0, r8
 800687c:	fa09 f303 	lsl.w	r3, r9, r3
 8006880:	4313      	orrs	r3, r2
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	46a2      	mov	sl, r4
 8006886:	e7d2      	b.n	800682e <_vfiprintf_r+0xe2>
 8006888:	9b03      	ldr	r3, [sp, #12]
 800688a:	1d19      	adds	r1, r3, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	9103      	str	r1, [sp, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	bfbb      	ittet	lt
 8006894:	425b      	neglt	r3, r3
 8006896:	f042 0202 	orrlt.w	r2, r2, #2
 800689a:	9307      	strge	r3, [sp, #28]
 800689c:	9307      	strlt	r3, [sp, #28]
 800689e:	bfb8      	it	lt
 80068a0:	9204      	strlt	r2, [sp, #16]
 80068a2:	7823      	ldrb	r3, [r4, #0]
 80068a4:	2b2e      	cmp	r3, #46	; 0x2e
 80068a6:	d10c      	bne.n	80068c2 <_vfiprintf_r+0x176>
 80068a8:	7863      	ldrb	r3, [r4, #1]
 80068aa:	2b2a      	cmp	r3, #42	; 0x2a
 80068ac:	d135      	bne.n	800691a <_vfiprintf_r+0x1ce>
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	1d1a      	adds	r2, r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	9203      	str	r2, [sp, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfb8      	it	lt
 80068ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80068be:	3402      	adds	r4, #2
 80068c0:	9305      	str	r3, [sp, #20]
 80068c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069a8 <_vfiprintf_r+0x25c>
 80068c6:	7821      	ldrb	r1, [r4, #0]
 80068c8:	2203      	movs	r2, #3
 80068ca:	4650      	mov	r0, sl
 80068cc:	f7f9 fc88 	bl	80001e0 <memchr>
 80068d0:	b140      	cbz	r0, 80068e4 <_vfiprintf_r+0x198>
 80068d2:	2340      	movs	r3, #64	; 0x40
 80068d4:	eba0 000a 	sub.w	r0, r0, sl
 80068d8:	fa03 f000 	lsl.w	r0, r3, r0
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	4303      	orrs	r3, r0
 80068e0:	3401      	adds	r4, #1
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e8:	482c      	ldr	r0, [pc, #176]	; (800699c <_vfiprintf_r+0x250>)
 80068ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ee:	2206      	movs	r2, #6
 80068f0:	f7f9 fc76 	bl	80001e0 <memchr>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d03f      	beq.n	8006978 <_vfiprintf_r+0x22c>
 80068f8:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <_vfiprintf_r+0x254>)
 80068fa:	bb1b      	cbnz	r3, 8006944 <_vfiprintf_r+0x1f8>
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	3307      	adds	r3, #7
 8006900:	f023 0307 	bic.w	r3, r3, #7
 8006904:	3308      	adds	r3, #8
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690a:	443b      	add	r3, r7
 800690c:	9309      	str	r3, [sp, #36]	; 0x24
 800690e:	e767      	b.n	80067e0 <_vfiprintf_r+0x94>
 8006910:	fb0c 3202 	mla	r2, ip, r2, r3
 8006914:	460c      	mov	r4, r1
 8006916:	2001      	movs	r0, #1
 8006918:	e7a5      	b.n	8006866 <_vfiprintf_r+0x11a>
 800691a:	2300      	movs	r3, #0
 800691c:	3401      	adds	r4, #1
 800691e:	9305      	str	r3, [sp, #20]
 8006920:	4619      	mov	r1, r3
 8006922:	f04f 0c0a 	mov.w	ip, #10
 8006926:	4620      	mov	r0, r4
 8006928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800692c:	3a30      	subs	r2, #48	; 0x30
 800692e:	2a09      	cmp	r2, #9
 8006930:	d903      	bls.n	800693a <_vfiprintf_r+0x1ee>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0c5      	beq.n	80068c2 <_vfiprintf_r+0x176>
 8006936:	9105      	str	r1, [sp, #20]
 8006938:	e7c3      	b.n	80068c2 <_vfiprintf_r+0x176>
 800693a:	fb0c 2101 	mla	r1, ip, r1, r2
 800693e:	4604      	mov	r4, r0
 8006940:	2301      	movs	r3, #1
 8006942:	e7f0      	b.n	8006926 <_vfiprintf_r+0x1da>
 8006944:	ab03      	add	r3, sp, #12
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	462a      	mov	r2, r5
 800694a:	4b16      	ldr	r3, [pc, #88]	; (80069a4 <_vfiprintf_r+0x258>)
 800694c:	a904      	add	r1, sp, #16
 800694e:	4630      	mov	r0, r6
 8006950:	f7fc f874 	bl	8002a3c <_printf_float>
 8006954:	4607      	mov	r7, r0
 8006956:	1c78      	adds	r0, r7, #1
 8006958:	d1d6      	bne.n	8006908 <_vfiprintf_r+0x1bc>
 800695a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800695c:	07d9      	lsls	r1, r3, #31
 800695e:	d405      	bmi.n	800696c <_vfiprintf_r+0x220>
 8006960:	89ab      	ldrh	r3, [r5, #12]
 8006962:	059a      	lsls	r2, r3, #22
 8006964:	d402      	bmi.n	800696c <_vfiprintf_r+0x220>
 8006966:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006968:	f000 faa1 	bl	8006eae <__retarget_lock_release_recursive>
 800696c:	89ab      	ldrh	r3, [r5, #12]
 800696e:	065b      	lsls	r3, r3, #25
 8006970:	f53f af12 	bmi.w	8006798 <_vfiprintf_r+0x4c>
 8006974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006976:	e711      	b.n	800679c <_vfiprintf_r+0x50>
 8006978:	ab03      	add	r3, sp, #12
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	462a      	mov	r2, r5
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <_vfiprintf_r+0x258>)
 8006980:	a904      	add	r1, sp, #16
 8006982:	4630      	mov	r0, r6
 8006984:	f7fc fafe 	bl	8002f84 <_printf_i>
 8006988:	e7e4      	b.n	8006954 <_vfiprintf_r+0x208>
 800698a:	bf00      	nop
 800698c:	0800766c 	.word	0x0800766c
 8006990:	0800768c 	.word	0x0800768c
 8006994:	0800764c 	.word	0x0800764c
 8006998:	080075fc 	.word	0x080075fc
 800699c:	08007606 	.word	0x08007606
 80069a0:	08002a3d 	.word	0x08002a3d
 80069a4:	08006727 	.word	0x08006727
 80069a8:	08007602 	.word	0x08007602

080069ac <__swbuf_r>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	460e      	mov	r6, r1
 80069b0:	4614      	mov	r4, r2
 80069b2:	4605      	mov	r5, r0
 80069b4:	b118      	cbz	r0, 80069be <__swbuf_r+0x12>
 80069b6:	6983      	ldr	r3, [r0, #24]
 80069b8:	b90b      	cbnz	r3, 80069be <__swbuf_r+0x12>
 80069ba:	f000 f9d9 	bl	8006d70 <__sinit>
 80069be:	4b21      	ldr	r3, [pc, #132]	; (8006a44 <__swbuf_r+0x98>)
 80069c0:	429c      	cmp	r4, r3
 80069c2:	d12b      	bne.n	8006a1c <__swbuf_r+0x70>
 80069c4:	686c      	ldr	r4, [r5, #4]
 80069c6:	69a3      	ldr	r3, [r4, #24]
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	071a      	lsls	r2, r3, #28
 80069ce:	d52f      	bpl.n	8006a30 <__swbuf_r+0x84>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	b36b      	cbz	r3, 8006a30 <__swbuf_r+0x84>
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	6820      	ldr	r0, [r4, #0]
 80069d8:	1ac0      	subs	r0, r0, r3
 80069da:	6963      	ldr	r3, [r4, #20]
 80069dc:	b2f6      	uxtb	r6, r6
 80069de:	4283      	cmp	r3, r0
 80069e0:	4637      	mov	r7, r6
 80069e2:	dc04      	bgt.n	80069ee <__swbuf_r+0x42>
 80069e4:	4621      	mov	r1, r4
 80069e6:	4628      	mov	r0, r5
 80069e8:	f000 f92e 	bl	8006c48 <_fflush_r>
 80069ec:	bb30      	cbnz	r0, 8006a3c <__swbuf_r+0x90>
 80069ee:	68a3      	ldr	r3, [r4, #8]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	60a3      	str	r3, [r4, #8]
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	6022      	str	r2, [r4, #0]
 80069fa:	701e      	strb	r6, [r3, #0]
 80069fc:	6963      	ldr	r3, [r4, #20]
 80069fe:	3001      	adds	r0, #1
 8006a00:	4283      	cmp	r3, r0
 8006a02:	d004      	beq.n	8006a0e <__swbuf_r+0x62>
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	07db      	lsls	r3, r3, #31
 8006a08:	d506      	bpl.n	8006a18 <__swbuf_r+0x6c>
 8006a0a:	2e0a      	cmp	r6, #10
 8006a0c:	d104      	bne.n	8006a18 <__swbuf_r+0x6c>
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 f919 	bl	8006c48 <_fflush_r>
 8006a16:	b988      	cbnz	r0, 8006a3c <__swbuf_r+0x90>
 8006a18:	4638      	mov	r0, r7
 8006a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <__swbuf_r+0x9c>)
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	d101      	bne.n	8006a26 <__swbuf_r+0x7a>
 8006a22:	68ac      	ldr	r4, [r5, #8]
 8006a24:	e7cf      	b.n	80069c6 <__swbuf_r+0x1a>
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <__swbuf_r+0xa0>)
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	bf08      	it	eq
 8006a2c:	68ec      	ldreq	r4, [r5, #12]
 8006a2e:	e7ca      	b.n	80069c6 <__swbuf_r+0x1a>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f80c 	bl	8006a50 <__swsetup_r>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d0cb      	beq.n	80069d4 <__swbuf_r+0x28>
 8006a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a40:	e7ea      	b.n	8006a18 <__swbuf_r+0x6c>
 8006a42:	bf00      	nop
 8006a44:	0800766c 	.word	0x0800766c
 8006a48:	0800768c 	.word	0x0800768c
 8006a4c:	0800764c 	.word	0x0800764c

08006a50 <__swsetup_r>:
 8006a50:	4b32      	ldr	r3, [pc, #200]	; (8006b1c <__swsetup_r+0xcc>)
 8006a52:	b570      	push	{r4, r5, r6, lr}
 8006a54:	681d      	ldr	r5, [r3, #0]
 8006a56:	4606      	mov	r6, r0
 8006a58:	460c      	mov	r4, r1
 8006a5a:	b125      	cbz	r5, 8006a66 <__swsetup_r+0x16>
 8006a5c:	69ab      	ldr	r3, [r5, #24]
 8006a5e:	b913      	cbnz	r3, 8006a66 <__swsetup_r+0x16>
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 f985 	bl	8006d70 <__sinit>
 8006a66:	4b2e      	ldr	r3, [pc, #184]	; (8006b20 <__swsetup_r+0xd0>)
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	d10f      	bne.n	8006a8c <__swsetup_r+0x3c>
 8006a6c:	686c      	ldr	r4, [r5, #4]
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a74:	0719      	lsls	r1, r3, #28
 8006a76:	d42c      	bmi.n	8006ad2 <__swsetup_r+0x82>
 8006a78:	06dd      	lsls	r5, r3, #27
 8006a7a:	d411      	bmi.n	8006aa0 <__swsetup_r+0x50>
 8006a7c:	2309      	movs	r3, #9
 8006a7e:	6033      	str	r3, [r6, #0]
 8006a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8a:	e03e      	b.n	8006b0a <__swsetup_r+0xba>
 8006a8c:	4b25      	ldr	r3, [pc, #148]	; (8006b24 <__swsetup_r+0xd4>)
 8006a8e:	429c      	cmp	r4, r3
 8006a90:	d101      	bne.n	8006a96 <__swsetup_r+0x46>
 8006a92:	68ac      	ldr	r4, [r5, #8]
 8006a94:	e7eb      	b.n	8006a6e <__swsetup_r+0x1e>
 8006a96:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <__swsetup_r+0xd8>)
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	bf08      	it	eq
 8006a9c:	68ec      	ldreq	r4, [r5, #12]
 8006a9e:	e7e6      	b.n	8006a6e <__swsetup_r+0x1e>
 8006aa0:	0758      	lsls	r0, r3, #29
 8006aa2:	d512      	bpl.n	8006aca <__swsetup_r+0x7a>
 8006aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa6:	b141      	cbz	r1, 8006aba <__swsetup_r+0x6a>
 8006aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d002      	beq.n	8006ab6 <__swsetup_r+0x66>
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f7ff fb67 	bl	8006184 <_free_r>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	6063      	str	r3, [r4, #4]
 8006ac6:	6923      	ldr	r3, [r4, #16]
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	f043 0308 	orr.w	r3, r3, #8
 8006ad0:	81a3      	strh	r3, [r4, #12]
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	b94b      	cbnz	r3, 8006aea <__swsetup_r+0x9a>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae0:	d003      	beq.n	8006aea <__swsetup_r+0x9a>
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 fa07 	bl	8006ef8 <__smakebuf_r>
 8006aea:	89a0      	ldrh	r0, [r4, #12]
 8006aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af0:	f010 0301 	ands.w	r3, r0, #1
 8006af4:	d00a      	beq.n	8006b0c <__swsetup_r+0xbc>
 8006af6:	2300      	movs	r3, #0
 8006af8:	60a3      	str	r3, [r4, #8]
 8006afa:	6963      	ldr	r3, [r4, #20]
 8006afc:	425b      	negs	r3, r3
 8006afe:	61a3      	str	r3, [r4, #24]
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	b943      	cbnz	r3, 8006b16 <__swsetup_r+0xc6>
 8006b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b08:	d1ba      	bne.n	8006a80 <__swsetup_r+0x30>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	0781      	lsls	r1, r0, #30
 8006b0e:	bf58      	it	pl
 8006b10:	6963      	ldrpl	r3, [r4, #20]
 8006b12:	60a3      	str	r3, [r4, #8]
 8006b14:	e7f4      	b.n	8006b00 <__swsetup_r+0xb0>
 8006b16:	2000      	movs	r0, #0
 8006b18:	e7f7      	b.n	8006b0a <__swsetup_r+0xba>
 8006b1a:	bf00      	nop
 8006b1c:	20000004 	.word	0x20000004
 8006b20:	0800766c 	.word	0x0800766c
 8006b24:	0800768c 	.word	0x0800768c
 8006b28:	0800764c 	.word	0x0800764c

08006b2c <abort>:
 8006b2c:	b508      	push	{r3, lr}
 8006b2e:	2006      	movs	r0, #6
 8006b30:	f000 fa52 	bl	8006fd8 <raise>
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7fb f919 	bl	8001d6c <_exit>
	...

08006b3c <__sflush_r>:
 8006b3c:	898a      	ldrh	r2, [r1, #12]
 8006b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b42:	4605      	mov	r5, r0
 8006b44:	0710      	lsls	r0, r2, #28
 8006b46:	460c      	mov	r4, r1
 8006b48:	d458      	bmi.n	8006bfc <__sflush_r+0xc0>
 8006b4a:	684b      	ldr	r3, [r1, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dc05      	bgt.n	8006b5c <__sflush_r+0x20>
 8006b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dc02      	bgt.n	8006b5c <__sflush_r+0x20>
 8006b56:	2000      	movs	r0, #0
 8006b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d0f9      	beq.n	8006b56 <__sflush_r+0x1a>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b68:	682f      	ldr	r7, [r5, #0]
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	d032      	beq.n	8006bd4 <__sflush_r+0x98>
 8006b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	075a      	lsls	r2, r3, #29
 8006b74:	d505      	bpl.n	8006b82 <__sflush_r+0x46>
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	1ac0      	subs	r0, r0, r3
 8006b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b7c:	b10b      	cbz	r3, 8006b82 <__sflush_r+0x46>
 8006b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b80:	1ac0      	subs	r0, r0, r3
 8006b82:	2300      	movs	r3, #0
 8006b84:	4602      	mov	r2, r0
 8006b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b88:	6a21      	ldr	r1, [r4, #32]
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b0      	blx	r6
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	d106      	bne.n	8006ba2 <__sflush_r+0x66>
 8006b94:	6829      	ldr	r1, [r5, #0]
 8006b96:	291d      	cmp	r1, #29
 8006b98:	d82c      	bhi.n	8006bf4 <__sflush_r+0xb8>
 8006b9a:	4a2a      	ldr	r2, [pc, #168]	; (8006c44 <__sflush_r+0x108>)
 8006b9c:	40ca      	lsrs	r2, r1
 8006b9e:	07d6      	lsls	r6, r2, #31
 8006ba0:	d528      	bpl.n	8006bf4 <__sflush_r+0xb8>
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	6062      	str	r2, [r4, #4]
 8006ba6:	04d9      	lsls	r1, r3, #19
 8006ba8:	6922      	ldr	r2, [r4, #16]
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	d504      	bpl.n	8006bb8 <__sflush_r+0x7c>
 8006bae:	1c42      	adds	r2, r0, #1
 8006bb0:	d101      	bne.n	8006bb6 <__sflush_r+0x7a>
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	b903      	cbnz	r3, 8006bb8 <__sflush_r+0x7c>
 8006bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8006bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bba:	602f      	str	r7, [r5, #0]
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d0ca      	beq.n	8006b56 <__sflush_r+0x1a>
 8006bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	d002      	beq.n	8006bce <__sflush_r+0x92>
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f7ff fadb 	bl	8006184 <_free_r>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8006bd2:	e7c1      	b.n	8006b58 <__sflush_r+0x1c>
 8006bd4:	6a21      	ldr	r1, [r4, #32]
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b0      	blx	r6
 8006bdc:	1c41      	adds	r1, r0, #1
 8006bde:	d1c7      	bne.n	8006b70 <__sflush_r+0x34>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0c4      	beq.n	8006b70 <__sflush_r+0x34>
 8006be6:	2b1d      	cmp	r3, #29
 8006be8:	d001      	beq.n	8006bee <__sflush_r+0xb2>
 8006bea:	2b16      	cmp	r3, #22
 8006bec:	d101      	bne.n	8006bf2 <__sflush_r+0xb6>
 8006bee:	602f      	str	r7, [r5, #0]
 8006bf0:	e7b1      	b.n	8006b56 <__sflush_r+0x1a>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	e7ad      	b.n	8006b58 <__sflush_r+0x1c>
 8006bfc:	690f      	ldr	r7, [r1, #16]
 8006bfe:	2f00      	cmp	r7, #0
 8006c00:	d0a9      	beq.n	8006b56 <__sflush_r+0x1a>
 8006c02:	0793      	lsls	r3, r2, #30
 8006c04:	680e      	ldr	r6, [r1, #0]
 8006c06:	bf08      	it	eq
 8006c08:	694b      	ldreq	r3, [r1, #20]
 8006c0a:	600f      	str	r7, [r1, #0]
 8006c0c:	bf18      	it	ne
 8006c0e:	2300      	movne	r3, #0
 8006c10:	eba6 0807 	sub.w	r8, r6, r7
 8006c14:	608b      	str	r3, [r1, #8]
 8006c16:	f1b8 0f00 	cmp.w	r8, #0
 8006c1a:	dd9c      	ble.n	8006b56 <__sflush_r+0x1a>
 8006c1c:	6a21      	ldr	r1, [r4, #32]
 8006c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c20:	4643      	mov	r3, r8
 8006c22:	463a      	mov	r2, r7
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b0      	blx	r6
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	dc06      	bgt.n	8006c3a <__sflush_r+0xfe>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c32:	81a3      	strh	r3, [r4, #12]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e78e      	b.n	8006b58 <__sflush_r+0x1c>
 8006c3a:	4407      	add	r7, r0
 8006c3c:	eba8 0800 	sub.w	r8, r8, r0
 8006c40:	e7e9      	b.n	8006c16 <__sflush_r+0xda>
 8006c42:	bf00      	nop
 8006c44:	20400001 	.word	0x20400001

08006c48 <_fflush_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	690b      	ldr	r3, [r1, #16]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	b913      	cbnz	r3, 8006c58 <_fflush_r+0x10>
 8006c52:	2500      	movs	r5, #0
 8006c54:	4628      	mov	r0, r5
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	b118      	cbz	r0, 8006c62 <_fflush_r+0x1a>
 8006c5a:	6983      	ldr	r3, [r0, #24]
 8006c5c:	b90b      	cbnz	r3, 8006c62 <_fflush_r+0x1a>
 8006c5e:	f000 f887 	bl	8006d70 <__sinit>
 8006c62:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <_fflush_r+0x6c>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	d11b      	bne.n	8006ca0 <_fflush_r+0x58>
 8006c68:	686c      	ldr	r4, [r5, #4]
 8006c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0ef      	beq.n	8006c52 <_fflush_r+0xa>
 8006c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c74:	07d0      	lsls	r0, r2, #31
 8006c76:	d404      	bmi.n	8006c82 <_fflush_r+0x3a>
 8006c78:	0599      	lsls	r1, r3, #22
 8006c7a:	d402      	bmi.n	8006c82 <_fflush_r+0x3a>
 8006c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c7e:	f000 f915 	bl	8006eac <__retarget_lock_acquire_recursive>
 8006c82:	4628      	mov	r0, r5
 8006c84:	4621      	mov	r1, r4
 8006c86:	f7ff ff59 	bl	8006b3c <__sflush_r>
 8006c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c8c:	07da      	lsls	r2, r3, #31
 8006c8e:	4605      	mov	r5, r0
 8006c90:	d4e0      	bmi.n	8006c54 <_fflush_r+0xc>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	059b      	lsls	r3, r3, #22
 8006c96:	d4dd      	bmi.n	8006c54 <_fflush_r+0xc>
 8006c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9a:	f000 f908 	bl	8006eae <__retarget_lock_release_recursive>
 8006c9e:	e7d9      	b.n	8006c54 <_fflush_r+0xc>
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <_fflush_r+0x70>)
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	d101      	bne.n	8006caa <_fflush_r+0x62>
 8006ca6:	68ac      	ldr	r4, [r5, #8]
 8006ca8:	e7df      	b.n	8006c6a <_fflush_r+0x22>
 8006caa:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <_fflush_r+0x74>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	bf08      	it	eq
 8006cb0:	68ec      	ldreq	r4, [r5, #12]
 8006cb2:	e7da      	b.n	8006c6a <_fflush_r+0x22>
 8006cb4:	0800766c 	.word	0x0800766c
 8006cb8:	0800768c 	.word	0x0800768c
 8006cbc:	0800764c 	.word	0x0800764c

08006cc0 <std>:
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	b510      	push	{r4, lr}
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cce:	6083      	str	r3, [r0, #8]
 8006cd0:	8181      	strh	r1, [r0, #12]
 8006cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8006cd4:	81c2      	strh	r2, [r0, #14]
 8006cd6:	6183      	str	r3, [r0, #24]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	2208      	movs	r2, #8
 8006cdc:	305c      	adds	r0, #92	; 0x5c
 8006cde:	f7fb fe05 	bl	80028ec <memset>
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <std+0x38>)
 8006ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <std+0x3c>)
 8006ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <std+0x40>)
 8006cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <std+0x44>)
 8006cf0:	6224      	str	r4, [r4, #32]
 8006cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	bf00      	nop
 8006cf8:	08007011 	.word	0x08007011
 8006cfc:	08007033 	.word	0x08007033
 8006d00:	0800706b 	.word	0x0800706b
 8006d04:	0800708f 	.word	0x0800708f

08006d08 <_cleanup_r>:
 8006d08:	4901      	ldr	r1, [pc, #4]	; (8006d10 <_cleanup_r+0x8>)
 8006d0a:	f000 b8af 	b.w	8006e6c <_fwalk_reent>
 8006d0e:	bf00      	nop
 8006d10:	08006c49 	.word	0x08006c49

08006d14 <__sfmoreglue>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	1e4a      	subs	r2, r1, #1
 8006d18:	2568      	movs	r5, #104	; 0x68
 8006d1a:	4355      	muls	r5, r2
 8006d1c:	460e      	mov	r6, r1
 8006d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d22:	f7ff fa7f 	bl	8006224 <_malloc_r>
 8006d26:	4604      	mov	r4, r0
 8006d28:	b140      	cbz	r0, 8006d3c <__sfmoreglue+0x28>
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d30:	300c      	adds	r0, #12
 8006d32:	60a0      	str	r0, [r4, #8]
 8006d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d38:	f7fb fdd8 	bl	80028ec <memset>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}

08006d40 <__sfp_lock_acquire>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__sfp_lock_acquire+0x8>)
 8006d42:	f000 b8b3 	b.w	8006eac <__retarget_lock_acquire_recursive>
 8006d46:	bf00      	nop
 8006d48:	200003ac 	.word	0x200003ac

08006d4c <__sfp_lock_release>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	; (8006d54 <__sfp_lock_release+0x8>)
 8006d4e:	f000 b8ae 	b.w	8006eae <__retarget_lock_release_recursive>
 8006d52:	bf00      	nop
 8006d54:	200003ac 	.word	0x200003ac

08006d58 <__sinit_lock_acquire>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__sinit_lock_acquire+0x8>)
 8006d5a:	f000 b8a7 	b.w	8006eac <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	200003a7 	.word	0x200003a7

08006d64 <__sinit_lock_release>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__sinit_lock_release+0x8>)
 8006d66:	f000 b8a2 	b.w	8006eae <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	200003a7 	.word	0x200003a7

08006d70 <__sinit>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4604      	mov	r4, r0
 8006d74:	f7ff fff0 	bl	8006d58 <__sinit_lock_acquire>
 8006d78:	69a3      	ldr	r3, [r4, #24]
 8006d7a:	b11b      	cbz	r3, 8006d84 <__sinit+0x14>
 8006d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d80:	f7ff bff0 	b.w	8006d64 <__sinit_lock_release>
 8006d84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d88:	6523      	str	r3, [r4, #80]	; 0x50
 8006d8a:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <__sinit+0x68>)
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <__sinit+0x6c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	bf04      	itt	eq
 8006d96:	2301      	moveq	r3, #1
 8006d98:	61a3      	streq	r3, [r4, #24]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f820 	bl	8006de0 <__sfp>
 8006da0:	6060      	str	r0, [r4, #4]
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 f81c 	bl	8006de0 <__sfp>
 8006da8:	60a0      	str	r0, [r4, #8]
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f818 	bl	8006de0 <__sfp>
 8006db0:	2200      	movs	r2, #0
 8006db2:	60e0      	str	r0, [r4, #12]
 8006db4:	2104      	movs	r1, #4
 8006db6:	6860      	ldr	r0, [r4, #4]
 8006db8:	f7ff ff82 	bl	8006cc0 <std>
 8006dbc:	68a0      	ldr	r0, [r4, #8]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	2109      	movs	r1, #9
 8006dc2:	f7ff ff7d 	bl	8006cc0 <std>
 8006dc6:	68e0      	ldr	r0, [r4, #12]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	2112      	movs	r1, #18
 8006dcc:	f7ff ff78 	bl	8006cc0 <std>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	61a3      	str	r3, [r4, #24]
 8006dd4:	e7d2      	b.n	8006d7c <__sinit+0xc>
 8006dd6:	bf00      	nop
 8006dd8:	080071f4 	.word	0x080071f4
 8006ddc:	08006d09 	.word	0x08006d09

08006de0 <__sfp>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	4607      	mov	r7, r0
 8006de4:	f7ff ffac 	bl	8006d40 <__sfp_lock_acquire>
 8006de8:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <__sfp+0x84>)
 8006dea:	681e      	ldr	r6, [r3, #0]
 8006dec:	69b3      	ldr	r3, [r6, #24]
 8006dee:	b913      	cbnz	r3, 8006df6 <__sfp+0x16>
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff ffbd 	bl	8006d70 <__sinit>
 8006df6:	3648      	adds	r6, #72	; 0x48
 8006df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	d503      	bpl.n	8006e08 <__sfp+0x28>
 8006e00:	6833      	ldr	r3, [r6, #0]
 8006e02:	b30b      	cbz	r3, 8006e48 <__sfp+0x68>
 8006e04:	6836      	ldr	r6, [r6, #0]
 8006e06:	e7f7      	b.n	8006df8 <__sfp+0x18>
 8006e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e0c:	b9d5      	cbnz	r5, 8006e44 <__sfp+0x64>
 8006e0e:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <__sfp+0x88>)
 8006e10:	60e3      	str	r3, [r4, #12]
 8006e12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e16:	6665      	str	r5, [r4, #100]	; 0x64
 8006e18:	f000 f847 	bl	8006eaa <__retarget_lock_init_recursive>
 8006e1c:	f7ff ff96 	bl	8006d4c <__sfp_lock_release>
 8006e20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e28:	6025      	str	r5, [r4, #0]
 8006e2a:	61a5      	str	r5, [r4, #24]
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e34:	f7fb fd5a 	bl	80028ec <memset>
 8006e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e40:	4620      	mov	r0, r4
 8006e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e44:	3468      	adds	r4, #104	; 0x68
 8006e46:	e7d9      	b.n	8006dfc <__sfp+0x1c>
 8006e48:	2104      	movs	r1, #4
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	f7ff ff62 	bl	8006d14 <__sfmoreglue>
 8006e50:	4604      	mov	r4, r0
 8006e52:	6030      	str	r0, [r6, #0]
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d1d5      	bne.n	8006e04 <__sfp+0x24>
 8006e58:	f7ff ff78 	bl	8006d4c <__sfp_lock_release>
 8006e5c:	230c      	movs	r3, #12
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	e7ee      	b.n	8006e40 <__sfp+0x60>
 8006e62:	bf00      	nop
 8006e64:	080071f4 	.word	0x080071f4
 8006e68:	ffff0001 	.word	0xffff0001

08006e6c <_fwalk_reent>:
 8006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	4606      	mov	r6, r0
 8006e72:	4688      	mov	r8, r1
 8006e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e78:	2700      	movs	r7, #0
 8006e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e82:	d505      	bpl.n	8006e90 <_fwalk_reent+0x24>
 8006e84:	6824      	ldr	r4, [r4, #0]
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	d1f7      	bne.n	8006e7a <_fwalk_reent+0xe>
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e90:	89ab      	ldrh	r3, [r5, #12]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d907      	bls.n	8006ea6 <_fwalk_reent+0x3a>
 8006e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	d003      	beq.n	8006ea6 <_fwalk_reent+0x3a>
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	47c0      	blx	r8
 8006ea4:	4307      	orrs	r7, r0
 8006ea6:	3568      	adds	r5, #104	; 0x68
 8006ea8:	e7e9      	b.n	8006e7e <_fwalk_reent+0x12>

08006eaa <__retarget_lock_init_recursive>:
 8006eaa:	4770      	bx	lr

08006eac <__retarget_lock_acquire_recursive>:
 8006eac:	4770      	bx	lr

08006eae <__retarget_lock_release_recursive>:
 8006eae:	4770      	bx	lr

08006eb0 <__swhatbuf_r>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	460e      	mov	r6, r1
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	b096      	sub	sp, #88	; 0x58
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	461d      	mov	r5, r3
 8006ec0:	da07      	bge.n	8006ed2 <__swhatbuf_r+0x22>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	89b3      	ldrh	r3, [r6, #12]
 8006ec8:	061a      	lsls	r2, r3, #24
 8006eca:	d410      	bmi.n	8006eee <__swhatbuf_r+0x3e>
 8006ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed0:	e00e      	b.n	8006ef0 <__swhatbuf_r+0x40>
 8006ed2:	466a      	mov	r2, sp
 8006ed4:	f000 f902 	bl	80070dc <_fstat_r>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	dbf2      	blt.n	8006ec2 <__swhatbuf_r+0x12>
 8006edc:	9a01      	ldr	r2, [sp, #4]
 8006ede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ee6:	425a      	negs	r2, r3
 8006ee8:	415a      	adcs	r2, r3
 8006eea:	602a      	str	r2, [r5, #0]
 8006eec:	e7ee      	b.n	8006ecc <__swhatbuf_r+0x1c>
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	b016      	add	sp, #88	; 0x58
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}

08006ef8 <__smakebuf_r>:
 8006ef8:	898b      	ldrh	r3, [r1, #12]
 8006efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006efc:	079d      	lsls	r5, r3, #30
 8006efe:	4606      	mov	r6, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	d507      	bpl.n	8006f14 <__smakebuf_r+0x1c>
 8006f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	6123      	str	r3, [r4, #16]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	6163      	str	r3, [r4, #20]
 8006f10:	b002      	add	sp, #8
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	ab01      	add	r3, sp, #4
 8006f16:	466a      	mov	r2, sp
 8006f18:	f7ff ffca 	bl	8006eb0 <__swhatbuf_r>
 8006f1c:	9900      	ldr	r1, [sp, #0]
 8006f1e:	4605      	mov	r5, r0
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff f97f 	bl	8006224 <_malloc_r>
 8006f26:	b948      	cbnz	r0, 8006f3c <__smakebuf_r+0x44>
 8006f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2c:	059a      	lsls	r2, r3, #22
 8006f2e:	d4ef      	bmi.n	8006f10 <__smakebuf_r+0x18>
 8006f30:	f023 0303 	bic.w	r3, r3, #3
 8006f34:	f043 0302 	orr.w	r3, r3, #2
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	e7e3      	b.n	8006f04 <__smakebuf_r+0xc>
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <__smakebuf_r+0x7c>)
 8006f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	6020      	str	r0, [r4, #0]
 8006f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f48:	81a3      	strh	r3, [r4, #12]
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	6163      	str	r3, [r4, #20]
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	6120      	str	r0, [r4, #16]
 8006f52:	b15b      	cbz	r3, 8006f6c <__smakebuf_r+0x74>
 8006f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f000 f8d1 	bl	8007100 <_isatty_r>
 8006f5e:	b128      	cbz	r0, 8006f6c <__smakebuf_r+0x74>
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	89a0      	ldrh	r0, [r4, #12]
 8006f6e:	4305      	orrs	r5, r0
 8006f70:	81a5      	strh	r5, [r4, #12]
 8006f72:	e7cd      	b.n	8006f10 <__smakebuf_r+0x18>
 8006f74:	08006d09 	.word	0x08006d09

08006f78 <_malloc_usable_size_r>:
 8006f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7c:	1f18      	subs	r0, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfbc      	itt	lt
 8006f82:	580b      	ldrlt	r3, [r1, r0]
 8006f84:	18c0      	addlt	r0, r0, r3
 8006f86:	4770      	bx	lr

08006f88 <_raise_r>:
 8006f88:	291f      	cmp	r1, #31
 8006f8a:	b538      	push	{r3, r4, r5, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460d      	mov	r5, r1
 8006f90:	d904      	bls.n	8006f9c <_raise_r+0x14>
 8006f92:	2316      	movs	r3, #22
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f9e:	b112      	cbz	r2, 8006fa6 <_raise_r+0x1e>
 8006fa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fa4:	b94b      	cbnz	r3, 8006fba <_raise_r+0x32>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f830 	bl	800700c <_getpid_r>
 8006fac:	462a      	mov	r2, r5
 8006fae:	4601      	mov	r1, r0
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fb6:	f000 b817 	b.w	8006fe8 <_kill_r>
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d00a      	beq.n	8006fd4 <_raise_r+0x4c>
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	d103      	bne.n	8006fca <_raise_r+0x42>
 8006fc2:	2316      	movs	r3, #22
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	e7e7      	b.n	8006f9a <_raise_r+0x12>
 8006fca:	2400      	movs	r4, #0
 8006fcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	4798      	blx	r3
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e7e0      	b.n	8006f9a <_raise_r+0x12>

08006fd8 <raise>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <raise+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff bfd3 	b.w	8006f88 <_raise_r>
 8006fe2:	bf00      	nop
 8006fe4:	20000004 	.word	0x20000004

08006fe8 <_kill_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	; (8007008 <_kill_r+0x20>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	f7fa fea9 	bl	8001d4c <_kill>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d102      	bne.n	8007004 <_kill_r+0x1c>
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	b103      	cbz	r3, 8007004 <_kill_r+0x1c>
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	200003a0 	.word	0x200003a0

0800700c <_getpid_r>:
 800700c:	f7fa be96 	b.w	8001d3c <_getpid>

08007010 <__sread>:
 8007010:	b510      	push	{r4, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	f000 f894 	bl	8007144 <_read_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	bfab      	itete	ge
 8007020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007022:	89a3      	ldrhlt	r3, [r4, #12]
 8007024:	181b      	addge	r3, r3, r0
 8007026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800702a:	bfac      	ite	ge
 800702c:	6563      	strge	r3, [r4, #84]	; 0x54
 800702e:	81a3      	strhlt	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__swrite>:
 8007032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	461f      	mov	r7, r3
 8007038:	898b      	ldrh	r3, [r1, #12]
 800703a:	05db      	lsls	r3, r3, #23
 800703c:	4605      	mov	r5, r0
 800703e:	460c      	mov	r4, r1
 8007040:	4616      	mov	r6, r2
 8007042:	d505      	bpl.n	8007050 <__swrite+0x1e>
 8007044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007048:	2302      	movs	r3, #2
 800704a:	2200      	movs	r2, #0
 800704c:	f000 f868 	bl	8007120 <_lseek_r>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	4632      	mov	r2, r6
 800705e:	463b      	mov	r3, r7
 8007060:	4628      	mov	r0, r5
 8007062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007066:	f000 b817 	b.w	8007098 <_write_r>

0800706a <__sseek>:
 800706a:	b510      	push	{r4, lr}
 800706c:	460c      	mov	r4, r1
 800706e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007072:	f000 f855 	bl	8007120 <_lseek_r>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	bf15      	itete	ne
 800707c:	6560      	strne	r0, [r4, #84]	; 0x54
 800707e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007086:	81a3      	strheq	r3, [r4, #12]
 8007088:	bf18      	it	ne
 800708a:	81a3      	strhne	r3, [r4, #12]
 800708c:	bd10      	pop	{r4, pc}

0800708e <__sclose>:
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 b813 	b.w	80070bc <_close_r>
	...

08007098 <_write_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d07      	ldr	r5, [pc, #28]	; (80070b8 <_write_r+0x20>)
 800709c:	4604      	mov	r4, r0
 800709e:	4608      	mov	r0, r1
 80070a0:	4611      	mov	r1, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fa fe87 	bl	8001dba <_write>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_write_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_write_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200003a0 	.word	0x200003a0

080070bc <_close_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d06      	ldr	r5, [pc, #24]	; (80070d8 <_close_r+0x1c>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	602b      	str	r3, [r5, #0]
 80070c8:	f7fa fe93 	bl	8001df2 <_close>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_close_r+0x1a>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_close_r+0x1a>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	200003a0 	.word	0x200003a0

080070dc <_fstat_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	; (80070fc <_fstat_r+0x20>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	f7fa fe8e 	bl	8001e0a <_fstat>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d102      	bne.n	80070f8 <_fstat_r+0x1c>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b103      	cbz	r3, 80070f8 <_fstat_r+0x1c>
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	200003a0 	.word	0x200003a0

08007100 <_isatty_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d06      	ldr	r5, [pc, #24]	; (800711c <_isatty_r+0x1c>)
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fa fe8d 	bl	8001e2a <_isatty>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_isatty_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_isatty_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	200003a0 	.word	0x200003a0

08007120 <_lseek_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d07      	ldr	r5, [pc, #28]	; (8007140 <_lseek_r+0x20>)
 8007124:	4604      	mov	r4, r0
 8007126:	4608      	mov	r0, r1
 8007128:	4611      	mov	r1, r2
 800712a:	2200      	movs	r2, #0
 800712c:	602a      	str	r2, [r5, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f7fa fe86 	bl	8001e40 <_lseek>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_lseek_r+0x1e>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_lseek_r+0x1e>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	200003a0 	.word	0x200003a0

08007144 <_read_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d07      	ldr	r5, [pc, #28]	; (8007164 <_read_r+0x20>)
 8007148:	4604      	mov	r4, r0
 800714a:	4608      	mov	r0, r1
 800714c:	4611      	mov	r1, r2
 800714e:	2200      	movs	r2, #0
 8007150:	602a      	str	r2, [r5, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	f7fa fe14 	bl	8001d80 <_read>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_read_r+0x1e>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	b103      	cbz	r3, 8007162 <_read_r+0x1e>
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	200003a0 	.word	0x200003a0

08007168 <_init>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr

08007174 <_fini>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr
