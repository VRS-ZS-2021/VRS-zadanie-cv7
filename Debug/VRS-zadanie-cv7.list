
VRS-zadanie-cv7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  080072f8  080072f8  000172f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800786c  0800786c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800786c  0800786c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800786c  0800786c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001d8  08007a4c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08007a4c  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077b3  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001946  00000000  00000000  000279bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00029308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00029a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f7b  00000000  00000000  0002a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cd7  00000000  00000000  0002dfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000735ba  00000000  00000000  00033ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a725c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003130  00000000  00000000  000a72b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072e0 	.word	0x080072e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080072e0 	.word	0x080072e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2103      	movs	r1, #3
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	401a      	ands	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	fab3 f383 	clz	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	fb01 f303 	mul.w	r3, r1, r3
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	605a      	str	r2, [r3, #4]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b089      	sub	sp, #36	; 0x24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	613b      	str	r3, [r7, #16]
  return(result);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2103      	movs	r1, #3
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fab3 f383 	clz	r3, r3
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000dcc:	bf00      	nop
 8000dce:	3724      	adds	r7, #36	; 0x24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	613b      	str	r3, [r7, #16]
  return(result);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	401a      	ands	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	431a      	orrs	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	60da      	str	r2, [r3, #12]
}
 8000e26:	bf00      	nop
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b089      	sub	sp, #36	; 0x24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6a1a      	ldr	r2, [r3, #32]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa93 f3a3 	rbit	r3, r3
 8000e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	210f      	movs	r1, #15
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000e80:	bf00      	nop
 8000e82:	3724      	adds	r7, #36	; 0x24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	61bb      	str	r3, [r7, #24]
  return(result);
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b088      	sub	sp, #32
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa93 f3a3 	rbit	r3, r3
 8000f08:	613b      	str	r3, [r7, #16]
  return(result);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f12:	e048      	b.n	8000fa6 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d03a      	beq.n	8000fa0 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	69b9      	ldr	r1, [r7, #24]
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fede 	bl	8000cf4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d003      	beq.n	8000f48 <LL_GPIO_Init+0x5e>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d106      	bne.n	8000f56 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff14 	bl	8000d7e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	69b9      	ldr	r1, [r7, #24]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff3a 	bl	8000dd8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d119      	bne.n	8000fa0 <LL_GPIO_Init+0xb6>
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f78:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	d807      	bhi.n	8000f92 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	461a      	mov	r2, r3
 8000f88:	69b9      	ldr	r1, [r7, #24]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff51 	bl	8000e32 <LL_GPIO_SetAFPin_0_7>
 8000f90:	e006      	b.n	8000fa0 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	461a      	mov	r2, r3
 8000f98:	69b9      	ldr	r1, [r7, #24]
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff76 	bl	8000e8c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1af      	bne.n	8000f14 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d003      	beq.n	8000fc4 <LL_GPIO_Init+0xda>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d107      	bne.n	8000fd4 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff febd 	bl	8000d4e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <LL_RCC_HSI_IsReady+0x20>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000

08001004 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <LL_RCC_LSE_IsReady+0x20>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b02      	cmp	r3, #2
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000

08001028 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <LL_RCC_GetSysClkSource+0x18>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <LL_RCC_GetAHBPrescaler+0x18>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <LL_RCC_GetUSARTClockSource+0x28>)
 80010a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a4:	2103      	movs	r1, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	061b      	lsls	r3, r3, #24
 80010b2:	4313      	orrs	r3, r2
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000

080010c4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <LL_RCC_PLL_GetMainSource+0x18>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <LL_RCC_PLL_GetPrediv+0x18>)
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	f003 030f 	and.w	r3, r3, #15
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001120:	f000 f864 	bl	80011ec <RCC_GetSystemClockFreq>
 8001124:	4602      	mov	r2, r0
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f882 	bl	8001238 <RCC_GetHCLKClockFreq>
 8001134:	4602      	mov	r2, r0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f890 	bl	8001264 <RCC_GetPCLK1ClockFreq>
 8001144:	4602      	mov	r2, r0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f89c 	bl	800128c <RCC_GetPCLK2ClockFreq>
 8001154:	4602      	mov	r2, r0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60da      	str	r2, [r3, #12]
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d12d      	bne.n	80011d2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff8e 	bl	8001098 <LL_RCC_GetUSARTClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b03      	cmp	r3, #3
 8001180:	d00a      	beq.n	8001198 <LL_RCC_GetUSARTClockFreq+0x34>
 8001182:	2b03      	cmp	r3, #3
 8001184:	d819      	bhi.n	80011ba <LL_RCC_GetUSARTClockFreq+0x56>
 8001186:	2b01      	cmp	r3, #1
 8001188:	d002      	beq.n	8001190 <LL_RCC_GetUSARTClockFreq+0x2c>
 800118a:	2b02      	cmp	r3, #2
 800118c:	d00c      	beq.n	80011a8 <LL_RCC_GetUSARTClockFreq+0x44>
 800118e:	e014      	b.n	80011ba <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001190:	f000 f82c 	bl	80011ec <RCC_GetSystemClockFreq>
 8001194:	60f8      	str	r0, [r7, #12]
        break;
 8001196:	e021      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001198:	f7ff ff22 	bl	8000fe0 <LL_RCC_HSI_IsReady>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d019      	beq.n	80011d6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <LL_RCC_GetUSARTClockFreq+0x84>)
 80011a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011a6:	e016      	b.n	80011d6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80011a8:	f7ff ff2c 	bl	8001004 <LL_RCC_LSE_IsReady>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d013      	beq.n	80011da <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80011b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011b8:	e00f      	b.n	80011da <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80011ba:	f000 f817 	bl	80011ec <RCC_GetSystemClockFreq>
 80011be:	4603      	mov	r3, r0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f839 	bl	8001238 <RCC_GetHCLKClockFreq>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f84b 	bl	8001264 <RCC_GetPCLK1ClockFreq>
 80011ce:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80011d0:	e004      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80011d2:	bf00      	nop
 80011d4:	e002      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80011d6:	bf00      	nop
 80011d8:	e000      	b.n	80011dc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80011da:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80011dc:	68fb      	ldr	r3, [r7, #12]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	007a1200 	.word	0x007a1200

080011ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80011f6:	f7ff ff17 	bl	8001028 <LL_RCC_GetSysClkSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d00c      	beq.n	800121a <RCC_GetSystemClockFreq+0x2e>
 8001200:	2b08      	cmp	r3, #8
 8001202:	d80e      	bhi.n	8001222 <RCC_GetSystemClockFreq+0x36>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <RCC_GetSystemClockFreq+0x22>
 8001208:	2b04      	cmp	r3, #4
 800120a:	d003      	beq.n	8001214 <RCC_GetSystemClockFreq+0x28>
 800120c:	e009      	b.n	8001222 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <RCC_GetSystemClockFreq+0x48>)
 8001210:	607b      	str	r3, [r7, #4]
      break;
 8001212:	e009      	b.n	8001228 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <RCC_GetSystemClockFreq+0x48>)
 8001216:	607b      	str	r3, [r7, #4]
      break;
 8001218:	e006      	b.n	8001228 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800121a:	f000 f84b 	bl	80012b4 <RCC_PLL_GetFreqDomain_SYS>
 800121e:	6078      	str	r0, [r7, #4]
      break;
 8001220:	e002      	b.n	8001228 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <RCC_GetSystemClockFreq+0x48>)
 8001224:	607b      	str	r3, [r7, #4]
      break;
 8001226:	bf00      	nop
  }

  return frequency;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	007a1200 	.word	0x007a1200

08001238 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001240:	f7ff ff00 	bl	8001044 <LL_RCC_GetAHBPrescaler>
 8001244:	4603      	mov	r3, r0
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <RCC_GetHCLKClockFreq+0x28>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	461a      	mov	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	40d3      	lsrs	r3, r2
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08007398 	.word	0x08007398

08001264 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800126c:	f7ff fef8 	bl	8001060 <LL_RCC_GetAPB1Prescaler>
 8001270:	4603      	mov	r3, r0
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <RCC_GetPCLK1ClockFreq+0x24>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	40d3      	lsrs	r3, r2
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	080073a8 	.word	0x080073a8

0800128c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001294:	f7ff fef2 	bl	800107c <LL_RCC_GetAPB2Prescaler>
 8001298:	4603      	mov	r3, r0
 800129a:	0adb      	lsrs	r3, r3, #11
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <RCC_GetPCLK2ClockFreq+0x24>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	461a      	mov	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	40d3      	lsrs	r3, r2
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	080073a8 	.word	0x080073a8

080012b4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80012c2:	f7ff feff 	bl	80010c4 <LL_RCC_PLL_GetMainSource>
 80012c6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d003      	beq.n	80012de <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80012d6:	e005      	b.n	80012e4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80012da:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80012dc:	e005      	b.n	80012ea <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80012e0:	60fb      	str	r3, [r7, #12]
      break;
 80012e2:	e002      	b.n	80012ea <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80012e6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80012e8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80012ea:	f7ff ff07 	bl	80010fc <LL_RCC_PLL_GetPrediv>
 80012ee:	4603      	mov	r3, r0
 80012f0:	3301      	adds	r3, #1
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	fbb2 f4f3 	udiv	r4, r2, r3
 80012f8:	f7ff fef2 	bl	80010e0 <LL_RCC_PLL_GetMultiplicator>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001302:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001306:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	fa92 f2a2 	rbit	r2, r2
 800130e:	603a      	str	r2, [r7, #0]
  return(result);
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	40d3      	lsrs	r3, r2
 8001318:	3302      	adds	r3, #2
 800131a:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	003d0900 	.word	0x003d0900
 800132c:	007a1200 	.word	0x007a1200

08001330 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	605a      	str	r2, [r3, #4]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80013a2:	b4b0      	push	{r4, r5, r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 80013b0:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 80013b2:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ba:	d114      	bne.n	80013e6 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	005a      	lsls	r2, r3, #1
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	441a      	add	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80013d0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80013d4:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80013d6:	086b      	lsrs	r3, r5, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80013e4:	e00a      	b.n	80013fc <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	085a      	lsrs	r2, r3, #1
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	441a      	add	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	60da      	str	r2, [r3, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bcb0      	pop	{r4, r5, r7}
 8001404:	4770      	bx	lr
	...

08001408 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff88 	bl	8001330 <LL_USART_IsEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d14e      	bne.n	80014c4 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <LL_USART_Init+0xc8>)
 800142c:	4013      	ands	r3, r2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6851      	ldr	r1, [r2, #4]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	68d2      	ldr	r2, [r2, #12]
 8001436:	4311      	orrs	r1, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	6912      	ldr	r2, [r2, #16]
 800143c:	4311      	orrs	r1, r2
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	6992      	ldr	r2, [r2, #24]
 8001442:	430a      	orrs	r2, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff80 	bl	8001356 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff8d 	bl	800137c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <LL_USART_Init+0xcc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d104      	bne.n	8001474 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fe7a 	bl	8001164 <LL_RCC_GetUSARTClockFreq>
 8001470:	61b8      	str	r0, [r7, #24]
 8001472:	e016      	b.n	80014a2 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <LL_USART_Init+0xd0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d107      	bne.n	800148c <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe49 	bl	8001118 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e00a      	b.n	80014a2 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a13      	ldr	r2, [pc, #76]	; (80014dc <LL_USART_Init+0xd4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d106      	bne.n	80014a2 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fe3d 	bl	8001118 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00d      	beq.n	80014c4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80014b0:	2300      	movs	r3, #0
 80014b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff6f 	bl	80013a2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	efff69f3 	.word	0xefff69f3
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40004400 	.word	0x40004400
 80014dc:	40004800 	.word	0x40004800

080014e0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <LL_InitTick+0x30>)
 80014f4:	3b01      	subs	r3, #1
 80014f6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <LL_InitTick+0x30>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <LL_InitTick+0x30>)
 8001500:	2205      	movs	r2, #5
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e010 	.word	0xe000e010

08001514 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800151c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffdd 	bl	80014e0 <LL_InitTick>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <LL_mDelay+0x48>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d00c      	beq.n	8001562 <LL_mDelay+0x32>
  {
    Delay++;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800154e:	e008      	b.n	8001562 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <LL_mDelay+0x48>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <LL_mDelay+0x32>
    {
      Delay--;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f3      	bne.n	8001550 <LL_mDelay+0x20>
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <LL_SetSystemCoreClock+0x1c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <NVIC_EnableIRQ+0x30>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da0b      	bge.n	80015fc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <NVIC_SetPriority+0x4c>)
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	3b04      	subs	r3, #4
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fa:	e009      	b.n	8001610 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <NVIC_SetPriority+0x50>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	e000e100 	.word	0xe000e100

08001624 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000

08001654 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff ffe3 	bl	8001624 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 800165e:	2100      	movs	r1, #0
 8001660:	2010      	movs	r0, #16
 8001662:	f7ff ffb5 	bl	80015d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001666:	2010      	movs	r0, #16
 8001668:	f7ff ff98 	bl	800159c <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	2011      	movs	r0, #17
 8001670:	f7ff ffae 	bl	80015d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001674:	2011      	movs	r0, #17
 8001676:	f7ff ff91 	bl	800159c <NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <LL_AHB1_GRP1_EnableClock>:
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000

080016b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016e6:	f7ff ffcb 	bl	8001680 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016ee:	f7ff ffc7 	bl	8001680 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <MX_GPIO_Init+0x54>)
 80016f6:	f7ff ffdb 	bl	80016b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80016fa:	2308      	movs	r3, #8
 80016fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016fe:	2301      	movs	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	463b      	mov	r3, r7
 8001710:	4619      	mov	r1, r3
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <MX_GPIO_Init+0x54>)
 8001714:	f7ff fbe9 	bl	8000eea <LL_GPIO_Init>

}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	48000400 	.word	0x48000400

08001724 <NVIC_SetPriorityGrouping>:
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <LL_RCC_HSI_Enable>:
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <LL_RCC_HSI_Enable+0x1c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <LL_RCC_HSI_Enable+0x1c>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <LL_RCC_HSI_IsReady>:
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <LL_RCC_HSI_IsReady+0x20>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b02      	cmp	r3, #2
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000

080017b0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_RCC_SetSysClkSource>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <LL_RCC_SetSysClkSource+0x24>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 0203 	bic.w	r2, r3, #3
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <LL_RCC_SetSysClkSource+0x24>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000

08001804 <LL_RCC_GetSysClkSource>:
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <LL_RCC_GetSysClkSource+0x18>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <LL_RCC_SetAHBPrescaler>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LL_RCC_SetAHBPrescaler+0x24>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <LL_RCC_SetAHBPrescaler+0x24>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000

08001848 <LL_RCC_SetAPB1Prescaler>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <LL_RCC_SetAPB1Prescaler+0x24>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_SetAPB2Prescaler>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <LL_RCC_SetAPB2Prescaler+0x24>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000

08001898 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000

080018c8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <LL_FLASH_SetLatency+0x24>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 0207 	bic.w	r2, r3, #7
 8001908:	4904      	ldr	r1, [pc, #16]	; (800191c <LL_FLASH_SetLatency+0x24>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40022000 	.word	0x40022000

08001920 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <LL_FLASH_GetLatency+0x18>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d106      	bne.n	8001958 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001956:	e005      	b.n	8001964 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <LL_SYSTICK_SetClkSource+0x34>)
 800195e:	f023 0304 	bic.w	r3, r3, #4
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e010 	.word	0xe000e010

08001974 <main>:
char actual_data_buffer[256];
char data_to_send[100];
uint8_t allow = 0, lowercase_char = 0, uppercase_char = 0,calculate_sign = 0;

int main(void)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b085      	sub	sp, #20
 8001978:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff ffa4 	bl	80018c8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001980:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001984:	f7ff ff88 	bl	8001898 <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f7ff fecb 	bl	8001724 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 800198e:	f000 f849 	bl	8001a24 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001992:	f7ff fe9b 	bl	80016cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001996:	f7ff fe5d 	bl	8001654 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800199a:	f000 fedd 	bl	8002758 <MX_USART2_UART_Init>

  /* Space for your local variables, callback registration ...*/

  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 800199e:	481b      	ldr	r0, [pc, #108]	; (8001a0c <main+0x98>)
 80019a0:	f000 fe82 	bl	80026a8 <USART2_RegisterCallback>

  //clearing buffers
  strcpy(actual_data_buffer,"");
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <main+0x9c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	   */
  	  	  	  //type your code here:


	  //Sending info about buffer capacity status
	  uint16_t buffer_state = getBufferState();
 80019aa:	f000 fe8f 	bl	80026cc <getBufferState>
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
	  float buffer_percentage = (float) (buffer_state) / (float) (DMA_USART2_BUFFER_SIZE)*100;
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019bc:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001a14 <main+0xa0>
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a18 <main+0xa4>
 80019c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019cc:	edc7 7a00 	vstr	s15, [r7]
	  sprintf(data_to_send, "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]:%.2f%%\r\n", DMA_USART2_BUFFER_SIZE, buffer_state, buffer_percentage);
 80019d0:	88fc      	ldrh	r4, [r7, #6]
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f7fe fdb8 	bl	8000548 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9cd 2300 	strd	r2, r3, [sp]
 80019e0:	4623      	mov	r3, r4
 80019e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e6:	490d      	ldr	r1, [pc, #52]	; (8001a1c <main+0xa8>)
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <main+0xac>)
 80019ea:	f001 fed5 	bl	8003798 <siprintf>

	  USART2_PutBuffer((uint8_t *) data_to_send, strlen(data_to_send));
 80019ee:	480c      	ldr	r0, [pc, #48]	; (8001a20 <main+0xac>)
 80019f0:	f7fe fbee 	bl	80001d0 <strlen>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <main+0xac>)
 80019fc:	f000 ff8e 	bl	800291c <USART2_PutBuffer>
	  LL_mDelay(1000);
 8001a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a04:	f7ff fd94 	bl	8001530 <LL_mDelay>
  {
 8001a08:	e7cf      	b.n	80019aa <main+0x36>
 8001a0a:	bf00      	nop
 8001a0c:	08001a91 	.word	0x08001a91
 8001a10:	20000270 	.word	0x20000270
 8001a14:	43800000 	.word	0x43800000
 8001a18:	42c80000 	.word	0x42c80000
 8001a1c:	080072f8 	.word	0x080072f8
 8001a20:	2000020c 	.word	0x2000020c

08001a24 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff ff65 	bl	80018f8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001a2e:	f7ff ff77 	bl	8001920 <LL_FLASH_GetLatency>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001a38:	f000 f8a8 	bl	8001b8c <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001a3c:	f7ff fe96 	bl	800176c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a40:	bf00      	nop
 8001a42:	f7ff fea3 	bl	800178c <LL_RCC_HSI_IsReady>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d1fa      	bne.n	8001a42 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a4c:	2010      	movs	r0, #16
 8001a4e:	f7ff feaf 	bl	80017b0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fee4 	bl	8001820 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fef5 	bl	8001848 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff ff06 	bl	8001870 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff feb9 	bl	80017dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff feca 	bl	8001804 <LL_RCC_GetSysClkSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1fa      	bne.n	8001a6c <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <SystemClock_Config+0x68>)
 8001a78:	f7ff fd4c 	bl	8001514 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001a7c:	2004      	movs	r0, #4
 8001a7e:	f7ff ff5d 	bl	800193c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001a82:	4802      	ldr	r0, [pc, #8]	; (8001a8c <SystemClock_Config+0x68>)
 8001a84:	f7ff fd7a 	bl	800157c <LL_SetSystemCoreClock>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	007a1200 	.word	0x007a1200

08001a90 <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(uint8_t sign)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b09c      	sub	sp, #112	; 0x70
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	/* Process received data */

		// type your algorithm here:
	char data_number_to_send[100];
	if(sign == '\r') return; //filtering endline character from PuTTY
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b0d      	cmp	r3, #13
 8001a9e:	d066      	beq.n	8001b6e <proccesDmaData+0xde>
//	tmp_string[0] = sign;
//	tmp_string[1] = '\0';
//	strcat(actual_data_buffer,tmp_string);
//	actual_data_buffer[strlen(actual_data_buffer)] = '\0';

	if(sign == '#' && allow == 0){ //zapneme povolenie pre citanie znakov, startovaci znak je prijaty len raz
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b23      	cmp	r3, #35	; 0x23
 8001aa4:	d10f      	bne.n	8001ac6 <proccesDmaData+0x36>
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <proccesDmaData+0xe8>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <proccesDmaData+0x36>
		allow = 1;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <proccesDmaData+0xe8>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
		calculate_sign = 0;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <proccesDmaData+0xec>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
		lowercase_char = 0;
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <proccesDmaData+0xf0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
		uppercase_char = 0;
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <proccesDmaData+0xf4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
	}
	if(sign == '$' && allow == 1){ // po prijati ukoncovacieho znaku vypneme povolenie a vypiseme data
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b24      	cmp	r3, #36	; 0x24
 8001aca:	d11d      	bne.n	8001b08 <proccesDmaData+0x78>
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <proccesDmaData+0xe8>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d119      	bne.n	8001b08 <proccesDmaData+0x78>
		allow = 0;
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <proccesDmaData+0xe8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
		sprintf(data_number_to_send, "Number of lowercase characters: %d , Number of uppercase characters: %d\r\n", lowercase_char,uppercase_char);
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <proccesDmaData+0xf0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <proccesDmaData+0xf4>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f107 000c 	add.w	r0, r7, #12
 8001ae8:	4927      	ldr	r1, [pc, #156]	; (8001b88 <proccesDmaData+0xf8>)
 8001aea:	f001 fe55 	bl	8003798 <siprintf>
		USART2_PutBuffer((uint8_t *) data_number_to_send, strlen(data_number_to_send));
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fb6c 	bl	80001d0 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 ff0a 	bl	800291c <USART2_PutBuffer>
	}
	if(calculate_sign > 35){//ak sme prekrocili pocet znakov o 35, prestaneme znaky ratat a zahodime data
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <proccesDmaData+0xec>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b23      	cmp	r3, #35	; 0x23
 8001b0e:	d90b      	bls.n	8001b28 <proccesDmaData+0x98>
		allow = 0;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <proccesDmaData+0xe8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
		calculate_sign = 0;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <proccesDmaData+0xec>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
		lowercase_char = 0;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <proccesDmaData+0xf0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
		uppercase_char = 0;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <proccesDmaData+0xf4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
	}
	if (allow == 1){//ratanie malych/velkych pismen
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <proccesDmaData+0xe8>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d11f      	bne.n	8001b70 <proccesDmaData+0xe0>
		calculate_sign++;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <proccesDmaData+0xec>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <proccesDmaData+0xec>)
 8001b3a:	701a      	strb	r2, [r3, #0]
		if(sign >= 'a' && sign <= 'z'){
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b60      	cmp	r3, #96	; 0x60
 8001b40:	d908      	bls.n	8001b54 <proccesDmaData+0xc4>
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b7a      	cmp	r3, #122	; 0x7a
 8001b46:	d805      	bhi.n	8001b54 <proccesDmaData+0xc4>
			lowercase_char++;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <proccesDmaData+0xf0>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <proccesDmaData+0xf0>)
 8001b52:	701a      	strb	r2, [r3, #0]
		}
		if(sign >= 'A' && sign <= 'Z'){
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d90a      	bls.n	8001b70 <proccesDmaData+0xe0>
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b5a      	cmp	r3, #90	; 0x5a
 8001b5e:	d807      	bhi.n	8001b70 <proccesDmaData+0xe0>
			uppercase_char++;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <proccesDmaData+0xf4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <proccesDmaData+0xf4>)
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	e000      	b.n	8001b70 <proccesDmaData+0xe0>
	if(sign == '\r') return; //filtering endline character from PuTTY
 8001b6e:	bf00      	nop
		}

	}

}
 8001b70:	3770      	adds	r7, #112	; 0x70
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200001f4 	.word	0x200001f4
 8001b7c:	200001f7 	.word	0x200001f7
 8001b80:	200001f5 	.word	0x200001f5
 8001b84:	200001f6 	.word	0x200001f6
 8001b88:	08007344 	.word	0x08007344

08001b8c <Error_Handler>:


void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LL_DMA_DisableChannel+0x3c>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	3a01      	subs	r2, #1
 8001bba:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <LL_DMA_DisableChannel+0x3c>)
 8001bbc:	5c8a      	ldrb	r2, [r1, r2]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	440a      	add	r2, r1
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6013      	str	r3, [r2, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	08007390 	.word	0x08007390

08001bdc <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c62:	605a      	str	r2, [r3, #4]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7e:	605a      	str	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c9a:	605a      	str	r2, [r3, #4]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b10      	cmp	r3, #16
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2210      	movs	r2, #16
 8001d00:	621a      	str	r2, [r3, #32]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <HardFault_Handler+0x4>

08001d22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <BusFault_Handler+0x4>

08001d2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <UsageFault_Handler+0x4>

08001d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <DMA1_Channel6_IRQHandler+0x38>)
 8001d72:	f7ff ff33 	bl	8001bdc <LL_DMA_IsActiveFlag_TC6>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001d7c:	f000 fdee 	bl	800295c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001d80:	4808      	ldr	r0, [pc, #32]	; (8001da4 <DMA1_Channel6_IRQHandler+0x38>)
 8001d82:	f7ff ff67 	bl	8001c54 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001d86:	e00a      	b.n	8001d9e <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <DMA1_Channel6_IRQHandler+0x38>)
 8001d8a:	f7ff ff4f 	bl	8001c2c <LL_DMA_IsActiveFlag_HT6>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d104      	bne.n	8001d9e <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001d94:	f000 fde2 	bl	800295c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <DMA1_Channel6_IRQHandler+0x38>)
 8001d9a:	f7ff ff77 	bl	8001c8c <LL_DMA_ClearFlag_HT6>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020000 	.word	0x40020000

08001da8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001dac:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <DMA1_Channel7_IRQHandler+0x30>)
 8001dae:	f7ff ff29 	bl	8001c04 <LL_DMA_IsActiveFlag_TC7>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10d      	bne.n	8001dd4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <DMA1_Channel7_IRQHandler+0x30>)
 8001dba:	f7ff ff59 	bl	8001c70 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001dbe:	bf00      	nop
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <DMA1_Channel7_IRQHandler+0x34>)
 8001dc2:	f7ff ff84 	bl	8001cce <LL_USART_IsActiveFlag_TC>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f9      	beq.n	8001dc0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001dcc:	2107      	movs	r1, #7
 8001dce:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <DMA1_Channel7_IRQHandler+0x30>)
 8001dd0:	f7ff fee4 	bl	8001b9c <LL_DMA_DisableChannel>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40004400 	.word	0x40004400

08001de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001de4:	4806      	ldr	r0, [pc, #24]	; (8001e00 <USART2_IRQHandler+0x20>)
 8001de6:	f7ff ff5f 	bl	8001ca8 <LL_USART_IsActiveFlag_IDLE>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001df0:	f000 fdb4 	bl	800295c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <USART2_IRQHandler+0x20>)
 8001df6:	f7ff ff7d 	bl	8001cf4 <LL_USART_ClearFlag_IDLE>
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40004400 	.word	0x40004400

08001e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
	return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_kill>:

int _kill(int pid, int sig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e1e:	f000 fe09 	bl	8002a34 <__errno>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2216      	movs	r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
	return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_exit>:

void _exit (int status)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffe7 	bl	8001e14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e46:	e7fe      	b.n	8001e46 <_exit+0x12>

08001e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e00a      	b.n	8001e70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e5a:	f3af 8000 	nop.w
 8001e5e:	4601      	mov	r1, r0
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	b2ca      	uxtb	r2, r1
 8001e68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbf0      	blt.n	8001e5a <_read+0x12>
	}

return len;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e009      	b.n	8001ea8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf1      	blt.n	8001e94 <_write+0x12>
	}
	return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_close>:

int _close(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_isatty>:

int _isatty(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	return 1;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
	return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x50>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <_sbrk+0x16>
		heap_end = &end;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <_sbrk+0x50>)
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <_sbrk+0x54>)
 8001f38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <_sbrk+0x50>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <_sbrk+0x50>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	466a      	mov	r2, sp
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d907      	bls.n	8001f5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f4e:	f000 fd71 	bl	8002a34 <__errno>
 8001f52:	4603      	mov	r3, r0
 8001f54:	220c      	movs	r2, #12
 8001f56:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	e006      	b.n	8001f6c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <_sbrk+0x50>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <_sbrk+0x50>)
 8001f68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200001f8 	.word	0x200001f8
 8001f78:	20000480 	.word	0x20000480

08001f7c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <SystemInit+0x84>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <SystemInit+0x84>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <SystemInit+0x88>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <SystemInit+0x88>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <SystemInit+0x88>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4918      	ldr	r1, [pc, #96]	; (8002004 <SystemInit+0x88>)
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <SystemInit+0x8c>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <SystemInit+0x88>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a15      	ldr	r2, [pc, #84]	; (8002004 <SystemInit+0x88>)
 8001fae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <SystemInit+0x88>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <SystemInit+0x88>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <SystemInit+0x88>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <SystemInit+0x88>)
 8001fca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fce:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <SystemInit+0x88>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <SystemInit+0x88>)
 8001fd6:	f023 030f 	bic.w	r3, r3, #15
 8001fda:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <SystemInit+0x88>)
 8001fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe0:	4908      	ldr	r1, [pc, #32]	; (8002004 <SystemInit+0x88>)
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <SystemInit+0x90>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <SystemInit+0x88>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SystemInit+0x84>)
 8001ff0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ff4:	609a      	str	r2, [r3, #8]
#endif
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00
 8002004:	40021000 	.word	0x40021000
 8002008:	f87fc00c 	.word	0xf87fc00c
 800200c:	ff00fccc 	.word	0xff00fccc

08002010 <NVIC_EnableIRQ>:
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <NVIC_EnableIRQ+0x30>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <NVIC_SetPriority>:
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da0b      	bge.n	8002070 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <NVIC_SetPriority+0x4c>)
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	3b04      	subs	r3, #4
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	761a      	strb	r2, [r3, #24]
}
 800206e:	e009      	b.n	8002084 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <NVIC_SetPriority+0x50>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	e000e100 	.word	0xe000e100

08002098 <LL_DMA_EnableChannel>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <LL_DMA_EnableChannel+0x3c>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	3a01      	subs	r2, #1
 80020b6:	4907      	ldr	r1, [pc, #28]	; (80020d4 <LL_DMA_EnableChannel+0x3c>)
 80020b8:	5c8a      	ldrb	r2, [r1, r2]
 80020ba:	4611      	mov	r1, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	440a      	add	r2, r1
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6013      	str	r3, [r2, #0]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	080073b0 	.word	0x080073b0

080020d8 <LL_DMA_DisableChannel>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <LL_DMA_DisableChannel+0x3c>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	3a01      	subs	r2, #1
 80020f6:	4907      	ldr	r1, [pc, #28]	; (8002114 <LL_DMA_DisableChannel+0x3c>)
 80020f8:	5c8a      	ldrb	r2, [r1, r2]
 80020fa:	4611      	mov	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	440a      	add	r2, r1
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6013      	str	r3, [r2, #0]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	080073b0 	.word	0x080073b0

08002118 <LL_DMA_SetDataTransferDirection>:
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3b01      	subs	r3, #1
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <LL_DMA_SetDataTransferDirection+0x48>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	461a      	mov	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002138:	f023 0310 	bic.w	r3, r3, #16
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	3a01      	subs	r2, #1
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <LL_DMA_SetDataTransferDirection+0x48>)
 8002142:	5c8a      	ldrb	r2, [r1, r2]
 8002144:	4611      	mov	r1, r2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	440a      	add	r2, r1
 800214a:	4611      	mov	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	080073b0 	.word	0x080073b0

08002164 <LL_DMA_GetDataTransferDirection>:
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	3b01      	subs	r3, #1
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <LL_DMA_GetDataTransferDirection+0x2c>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f244 0310 	movw	r3, #16400	; 0x4010
 8002182:	4013      	ands	r3, r2
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	080073b0 	.word	0x080073b0

08002194 <LL_DMA_SetMode>:
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <LL_DMA_SetMode+0x44>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	461a      	mov	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4413      	add	r3, r2
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 0220 	bic.w	r2, r3, #32
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <LL_DMA_SetMode+0x44>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	4619      	mov	r1, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	440b      	add	r3, r1
 80021c2:	4619      	mov	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	080073b0 	.word	0x080073b0

080021dc <LL_DMA_SetPeriphIncMode>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <LL_DMA_SetPeriphIncMode+0x44>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3b01      	subs	r3, #1
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <LL_DMA_SetPeriphIncMode+0x44>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	4619      	mov	r1, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	440b      	add	r3, r1
 800220a:	4619      	mov	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	080073b0 	.word	0x080073b0

08002224 <LL_DMA_SetMemoryIncMode>:
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <LL_DMA_SetMemoryIncMode+0x44>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	461a      	mov	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	3b01      	subs	r3, #1
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <LL_DMA_SetMemoryIncMode+0x44>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	4619      	mov	r1, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	440b      	add	r3, r1
 8002252:	4619      	mov	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	080073b0 	.word	0x080073b0

0800226c <LL_DMA_SetPeriphSize>:
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3b01      	subs	r3, #1
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <LL_DMA_SetPeriphSize+0x44>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	461a      	mov	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	3b01      	subs	r3, #1
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <LL_DMA_SetPeriphSize+0x44>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	4619      	mov	r1, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	440b      	add	r3, r1
 800229a:	4619      	mov	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	080073b0 	.word	0x080073b0

080022b4 <LL_DMA_SetMemorySize>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <LL_DMA_SetMemorySize+0x44>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <LL_DMA_SetMemorySize+0x44>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	4619      	mov	r1, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	440b      	add	r3, r1
 80022e2:	4619      	mov	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	080073b0 	.word	0x080073b0

080022fc <LL_DMA_SetChannelPriorityLevel>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3b01      	subs	r3, #1
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	461a      	mov	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	3b01      	subs	r3, #1
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	4619      	mov	r1, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	440b      	add	r3, r1
 800232a:	4619      	mov	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	080073b0 	.word	0x080073b0

08002344 <LL_DMA_SetDataLength>:
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	3b01      	subs	r3, #1
 8002354:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <LL_DMA_SetDataLength+0x44>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	461a      	mov	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	3a01      	subs	r2, #1
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <LL_DMA_SetDataLength+0x44>)
 800236a:	5c8a      	ldrb	r2, [r1, r2]
 800236c:	4611      	mov	r1, r2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	440a      	add	r2, r1
 8002372:	4611      	mov	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	080073b0 	.word	0x080073b0

0800238c <LL_DMA_GetDataLength>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	3b01      	subs	r3, #1
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <LL_DMA_GetDataLength+0x28>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	461a      	mov	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	b29b      	uxth	r3, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	080073b0 	.word	0x080073b0

080023b8 <LL_DMA_ConfigAddresses>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d114      	bne.n	80023f6 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <LL_DMA_ConfigAddresses+0x74>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	461a      	mov	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4413      	add	r3, r2
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	4a11      	ldr	r2, [pc, #68]	; (800242c <LL_DMA_ConfigAddresses+0x74>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	461a      	mov	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	461a      	mov	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6093      	str	r3, [r2, #8]
}
 80023f4:	e013      	b.n	800241e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <LL_DMA_ConfigAddresses+0x74>)
 80023fc:	5cd3      	ldrb	r3, [r2, r3]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3b01      	subs	r3, #1
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <LL_DMA_ConfigAddresses+0x74>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	60d3      	str	r3, [r2, #12]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	080073b0 	.word	0x080073b0

08002430 <LL_DMA_SetMemoryAddress>:
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3b01      	subs	r3, #1
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <LL_DMA_SetMemoryAddress+0x2c>)
 8002442:	5cd3      	ldrb	r3, [r2, r3]
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	080073b0 	.word	0x080073b0

08002460 <LL_DMA_SetPeriphAddress>:
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	3b01      	subs	r3, #1
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <LL_DMA_SetPeriphAddress+0x2c>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	461a      	mov	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6093      	str	r3, [r2, #8]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	080073b0 	.word	0x080073b0

08002490 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <LL_DMA_EnableIT_TC+0x3c>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	3a01      	subs	r2, #1
 80024ae:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_DMA_EnableIT_TC+0x3c>)
 80024b0:	5c8a      	ldrb	r2, [r1, r2]
 80024b2:	4611      	mov	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	440a      	add	r2, r1
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6013      	str	r3, [r2, #0]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	080073b0 	.word	0x080073b0

080024d0 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LL_DMA_EnableIT_HT+0x3c>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	3a01      	subs	r2, #1
 80024ee:	4907      	ldr	r1, [pc, #28]	; (800250c <LL_DMA_EnableIT_HT+0x3c>)
 80024f0:	5c8a      	ldrb	r2, [r1, r2]
 80024f2:	4611      	mov	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	440a      	add	r2, r1
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6013      	str	r3, [r2, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	080073b0 	.word	0x080073b0

08002510 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	3b01      	subs	r3, #1
 800251e:	4a0b      	ldr	r2, [pc, #44]	; (800254c <LL_DMA_EnableIT_TE+0x3c>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	3a01      	subs	r2, #1
 800252e:	4907      	ldr	r1, [pc, #28]	; (800254c <LL_DMA_EnableIT_TE+0x3c>)
 8002530:	5c8a      	ldrb	r2, [r1, r2]
 8002532:	4611      	mov	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	440a      	add	r2, r1
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	080073b0 	.word	0x080073b0

08002550 <LL_AHB1_GRP1_EnableClock>:
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	4907      	ldr	r1, [pc, #28]	; (800257c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4313      	orrs	r3, r2
 8002562:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4013      	ands	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000

08002580 <LL_APB1_GRP1_EnableClock>:
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4313      	orrs	r3, r2
 8002592:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4013      	ands	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000

080025b0 <LL_USART_Enable>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	601a      	str	r2, [r3, #0]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_USART_ConfigAsyncMode>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f043 0210 	orr.w	r2, r3, #16
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 800267c:	b490      	push	{r4, r7}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8002686:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3328      	adds	r3, #40	; 0x28
 8002692:	461c      	mov	r4, r3
 8002694:	e002      	b.n	800269c <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3324      	adds	r3, #36	; 0x24
 800269a:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 800269c:	4623      	mov	r3, r4
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc90      	pop	{r4, r7}
 80026a6:	4770      	bx	lr

080026a8 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <USART2_RegisterCallback+0x20>)
 80026ba:	6013      	str	r3, [r2, #0]
	}
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	200001fc 	.word	0x200001fc

080026cc <getBufferState>:
/* Space for global variables, if you need them */

	// type global variables here
static uint16_t old_pos = 0;

uint16_t getBufferState() {
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return old_pos;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <getBufferState+0x14>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000200 	.word	0x20000200

080026e4 <reinitializeBuffer>:

void reinitializeBuffer() {
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af02      	add	r7, sp, #8
	memset(bufferUSART2dma,0,DMA_USART2_BUFFER_SIZE); //set buffer memory to zeros
 80026ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ee:	2100      	movs	r1, #0
 80026f0:	4815      	ldr	r0, [pc, #84]	; (8002748 <reinitializeBuffer+0x64>)
 80026f2:	f000 f9c9 	bl	8002a88 <memset>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);  //disabling DMA channel
 80026f6:	2106      	movs	r1, #6
 80026f8:	4814      	ldr	r0, [pc, #80]	; (800274c <reinitializeBuffer+0x68>)
 80026fa:	f7ff fced 	bl	80020d8 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,  //reconfiguring DMA
 80026fe:	2101      	movs	r1, #1
 8002700:	4813      	ldr	r0, [pc, #76]	; (8002750 <reinitializeBuffer+0x6c>)
 8002702:	f7ff ffbb 	bl	800267c <LL_USART_DMA_GetRegAddr>
 8002706:	4604      	mov	r4, r0
 8002708:	4d0f      	ldr	r5, [pc, #60]	; (8002748 <reinitializeBuffer+0x64>)
 800270a:	2106      	movs	r1, #6
 800270c:	480f      	ldr	r0, [pc, #60]	; (800274c <reinitializeBuffer+0x68>)
 800270e:	f7ff fd29 	bl	8002164 <LL_DMA_GetDataTransferDirection>
 8002712:	4603      	mov	r3, r0
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	462b      	mov	r3, r5
 8002718:	4622      	mov	r2, r4
 800271a:	2106      	movs	r1, #6
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <reinitializeBuffer+0x68>)
 800271e:	f7ff fe4b 	bl	80023b8 <LL_DMA_ConfigAddresses>
	 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
	 							(uint32_t)bufferUSART2dma,
	 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002726:	2106      	movs	r1, #6
 8002728:	4808      	ldr	r0, [pc, #32]	; (800274c <reinitializeBuffer+0x68>)
 800272a:	f7ff fe0b 	bl	8002344 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800272e:	2106      	movs	r1, #6
 8002730:	4806      	ldr	r0, [pc, #24]	; (800274c <reinitializeBuffer+0x68>)
 8002732:	f7ff fcb1 	bl	8002098 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 8002736:	4806      	ldr	r0, [pc, #24]	; (8002750 <reinitializeBuffer+0x6c>)
 8002738:	f7ff ff80 	bl	800263c <LL_USART_EnableDMAReq_RX>
	old_pos = 0; //set last reading position to start of buffer
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <reinitializeBuffer+0x70>)
 800273e:	2200      	movs	r2, #0
 8002740:	801a      	strh	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	bdb0      	pop	{r4, r5, r7, pc}
 8002748:	20000370 	.word	0x20000370
 800274c:	40020000 	.word	0x40020000
 8002750:	40004400 	.word	0x40004400
 8002754:	20000200 	.word	0x20000200

08002758 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b090      	sub	sp, #64	; 0x40
 800275c:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	611a      	str	r2, [r3, #16]
 800276e:	615a      	str	r2, [r3, #20]
 8002770:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002782:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002786:	f7ff fefb 	bl	8002580 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800278a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800278e:	f7ff fedf 	bl	8002550 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002792:	f248 0304 	movw	r3, #32772	; 0x8004
 8002796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002798:	2302      	movs	r3, #2
 800279a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80027a8:	2307      	movs	r3, #7
 80027aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b4:	f7fe fb99 	bl	8000eea <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2106      	movs	r1, #6
 80027bc:	4854      	ldr	r0, [pc, #336]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80027be:	f7ff fcab 	bl	8002118 <LL_DMA_SetDataTransferDirection>
   LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80027c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027c6:	2106      	movs	r1, #6
 80027c8:	4851      	ldr	r0, [pc, #324]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80027ca:	f7ff fd97 	bl	80022fc <LL_DMA_SetChannelPriorityLevel>
   LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2106      	movs	r1, #6
 80027d2:	484f      	ldr	r0, [pc, #316]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80027d4:	f7ff fcde 	bl	8002194 <LL_DMA_SetMode>
   LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80027d8:	2200      	movs	r2, #0
 80027da:	2106      	movs	r1, #6
 80027dc:	484c      	ldr	r0, [pc, #304]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80027de:	f7ff fcfd 	bl	80021dc <LL_DMA_SetPeriphIncMode>
   LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	2106      	movs	r1, #6
 80027e6:	484a      	ldr	r0, [pc, #296]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80027e8:	f7ff fd1c 	bl	8002224 <LL_DMA_SetMemoryIncMode>
   LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2106      	movs	r1, #6
 80027f0:	4847      	ldr	r0, [pc, #284]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80027f2:	f7ff fd3b 	bl	800226c <LL_DMA_SetPeriphSize>
   LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2106      	movs	r1, #6
 80027fa:	4845      	ldr	r0, [pc, #276]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80027fc:	f7ff fd5a 	bl	80022b4 <LL_DMA_SetMemorySize>

   LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002800:	2101      	movs	r1, #1
 8002802:	4844      	ldr	r0, [pc, #272]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 8002804:	f7ff ff3a 	bl	800267c <LL_USART_DMA_GetRegAddr>
 8002808:	4604      	mov	r4, r0
 800280a:	4d43      	ldr	r5, [pc, #268]	; (8002918 <MX_USART2_UART_Init+0x1c0>)
 800280c:	2106      	movs	r1, #6
 800280e:	4840      	ldr	r0, [pc, #256]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002810:	f7ff fca8 	bl	8002164 <LL_DMA_GetDataTransferDirection>
 8002814:	4603      	mov	r3, r0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	462b      	mov	r3, r5
 800281a:	4622      	mov	r2, r4
 800281c:	2106      	movs	r1, #6
 800281e:	483c      	ldr	r0, [pc, #240]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002820:	f7ff fdca 	bl	80023b8 <LL_DMA_ConfigAddresses>
 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
 							(uint32_t)bufferUSART2dma,
 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

   LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002828:	2106      	movs	r1, #6
 800282a:	4839      	ldr	r0, [pc, #228]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 800282c:	f7ff fd8a 	bl	8002344 <LL_DMA_SetDataLength>
   LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002830:	2106      	movs	r1, #6
 8002832:	4837      	ldr	r0, [pc, #220]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002834:	f7ff fc30 	bl	8002098 <LL_DMA_EnableChannel>
   LL_USART_EnableDMAReq_RX(USART2);
 8002838:	4836      	ldr	r0, [pc, #216]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 800283a:	f7ff feff 	bl	800263c <LL_USART_EnableDMAReq_RX>


  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800283e:	2210      	movs	r2, #16
 8002840:	2107      	movs	r1, #7
 8002842:	4833      	ldr	r0, [pc, #204]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002844:	f7ff fc68 	bl	8002118 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800284c:	2107      	movs	r1, #7
 800284e:	4830      	ldr	r0, [pc, #192]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002850:	f7ff fd54 	bl	80022fc <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002854:	2200      	movs	r2, #0
 8002856:	2107      	movs	r1, #7
 8002858:	482d      	ldr	r0, [pc, #180]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 800285a:	f7ff fc9b 	bl	8002194 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800285e:	2200      	movs	r2, #0
 8002860:	2107      	movs	r1, #7
 8002862:	482b      	ldr	r0, [pc, #172]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002864:	f7ff fcba 	bl	80021dc <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	2107      	movs	r1, #7
 800286c:	4828      	ldr	r0, [pc, #160]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 800286e:	f7ff fcd9 	bl	8002224 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002872:	2200      	movs	r2, #0
 8002874:	2107      	movs	r1, #7
 8002876:	4826      	ldr	r0, [pc, #152]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002878:	f7ff fcf8 	bl	800226c <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800287c:	2200      	movs	r2, #0
 800287e:	2107      	movs	r1, #7
 8002880:	4823      	ldr	r0, [pc, #140]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002882:	f7ff fd17 	bl	80022b4 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002886:	2100      	movs	r1, #0
 8002888:	4822      	ldr	r0, [pc, #136]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 800288a:	f7ff fef7 	bl	800267c <LL_USART_DMA_GetRegAddr>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	2107      	movs	r1, #7
 8002894:	481e      	ldr	r0, [pc, #120]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 8002896:	f7ff fde3 	bl	8002460 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800289a:	481e      	ldr	r0, [pc, #120]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 800289c:	f7ff fede 	bl	800265c <LL_USART_EnableDMAReq_TX>


  /* Enable USART2 peripheral and interrupts*/

  	  //type your code here:
  NVIC_SetPriority(USART2_IRQn, 0);
 80028a0:	2100      	movs	r1, #0
 80028a2:	2026      	movs	r0, #38	; 0x26
 80028a4:	f7ff fbce 	bl	8002044 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80028a8:	2026      	movs	r0, #38	; 0x26
 80028aa:	f7ff fbb1 	bl	8002010 <NVIC_EnableIRQ>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80028ae:	2106      	movs	r1, #6
 80028b0:	4817      	ldr	r0, [pc, #92]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80028b2:	f7ff fded 	bl	8002490 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80028b6:	2106      	movs	r1, #6
 80028b8:	4815      	ldr	r0, [pc, #84]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80028ba:	f7ff fe09 	bl	80024d0 <LL_DMA_EnableIT_HT>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80028be:	2107      	movs	r1, #7
 80028c0:	4813      	ldr	r0, [pc, #76]	; (8002910 <MX_USART2_UART_Init+0x1b8>)
 80028c2:	f7ff fe25 	bl	8002510 <LL_DMA_EnableIT_TE>

  USART_InitStruct.BaudRate = 115200;
 80028c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80028ca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80028d8:	230c      	movs	r3, #12
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80028dc:	2300      	movs	r3, #0
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80028e0:	2300      	movs	r3, #0
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	480a      	ldr	r0, [pc, #40]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 80028ec:	f7fe fd8c 	bl	8001408 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80028f0:	4808      	ldr	r0, [pc, #32]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 80028f2:	f7ff fe93 	bl	800261c <LL_USART_DisableIT_CTS>

  LL_USART_EnableIT_IDLE(USART2);
 80028f6:	4807      	ldr	r0, [pc, #28]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 80028f8:	f7ff fe80 	bl	80025fc <LL_USART_EnableIT_IDLE>

  LL_USART_ConfigAsyncMode(USART2);
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 80028fe:	f7ff fe67 	bl	80025d0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002902:	4804      	ldr	r0, [pc, #16]	; (8002914 <MX_USART2_UART_Init+0x1bc>)
 8002904:	f7ff fe54 	bl	80025b0 <LL_USART_Enable>
}
 8002908:	bf00      	nop
 800290a:	3738      	adds	r7, #56	; 0x38
 800290c:	46bd      	mov	sp, r7
 800290e:	bdb0      	pop	{r4, r5, r7, pc}
 8002910:	40020000 	.word	0x40020000
 8002914:	40004400 	.word	0x40004400
 8002918:	20000370 	.word	0x20000370

0800291c <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	461a      	mov	r2, r3
 800292c:	2107      	movs	r1, #7
 800292e:	480a      	ldr	r0, [pc, #40]	; (8002958 <USART2_PutBuffer+0x3c>)
 8002930:	f7ff fd7e 	bl	8002430 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	461a      	mov	r2, r3
 8002938:	2107      	movs	r1, #7
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <USART2_PutBuffer+0x3c>)
 800293c:	f7ff fd02 	bl	8002344 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002940:	2107      	movs	r1, #7
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <USART2_PutBuffer+0x3c>)
 8002944:	f7ff fda4 	bl	8002490 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002948:	2107      	movs	r1, #7
 800294a:	4803      	ldr	r0, [pc, #12]	; (8002958 <USART2_PutBuffer+0x3c>)
 800294c:	f7ff fba4 	bl	8002098 <LL_DMA_EnableChannel>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40020000 	.word	0x40020000

0800295c <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <USART2_CheckDmaReception+0x74>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d02d      	beq.n	80029c6 <USART2_CheckDmaReception+0x6a>

	uint16_t test = LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800296a:	2106      	movs	r1, #6
 800296c:	4819      	ldr	r0, [pc, #100]	; (80029d4 <USART2_CheckDmaReception+0x78>)
 800296e:	f7ff fd0d 	bl	800238c <LL_DMA_GetDataLength>
 8002972:	4603      	mov	r3, r0
 8002974:	80bb      	strh	r3, [r7, #4]
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002976:	2106      	movs	r1, #6
 8002978:	4816      	ldr	r0, [pc, #88]	; (80029d4 <USART2_CheckDmaReception+0x78>)
 800297a:	f7ff fd07 	bl	800238c <LL_DMA_GetDataLength>
 800297e:	4603      	mov	r3, r0
 8002980:	b29b      	uxth	r3, r3
 8002982:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002986:	807b      	strh	r3, [r7, #2]

	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <USART2_CheckDmaReception+0x7c>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	80fb      	strh	r3, [r7, #6]
 800298e:	e009      	b.n	80029a4 <USART2_CheckDmaReception+0x48>
		USART2_ProcessData(bufferUSART2dma[i]);
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <USART2_CheckDmaReception+0x74>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	4911      	ldr	r1, [pc, #68]	; (80029dc <USART2_CheckDmaReception+0x80>)
 8002998:	5c8a      	ldrb	r2, [r1, r2]
 800299a:	4610      	mov	r0, r2
 800299c:	4798      	blx	r3
	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	3301      	adds	r3, #1
 80029a2:	80fb      	strh	r3, [r7, #6]
 80029a4:	88fa      	ldrh	r2, [r7, #6]
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3f1      	bcc.n	8002990 <USART2_CheckDmaReception+0x34>
	}

	old_pos = pos;
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <USART2_CheckDmaReception+0x7c>)
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	8013      	strh	r3, [r2, #0]

	if(LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) < 20) { //if remaining buffer capacity is less than 20 characters
 80029b2:	2106      	movs	r1, #6
 80029b4:	4807      	ldr	r0, [pc, #28]	; (80029d4 <USART2_CheckDmaReception+0x78>)
 80029b6:	f7ff fce9 	bl	800238c <LL_DMA_GetDataLength>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b13      	cmp	r3, #19
 80029be:	d803      	bhi.n	80029c8 <USART2_CheckDmaReception+0x6c>
		reinitializeBuffer();
 80029c0:	f7ff fe90 	bl	80026e4 <reinitializeBuffer>
 80029c4:	e000      	b.n	80029c8 <USART2_CheckDmaReception+0x6c>
	if(USART2_ProcessData == 0) return;
 80029c6:	bf00      	nop
	}
}
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200001fc 	.word	0x200001fc
 80029d4:	40020000 	.word	0x40020000
 80029d8:	20000200 	.word	0x20000200
 80029dc:	20000370 	.word	0x20000370

080029e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029e6:	e003      	b.n	80029f0 <LoopCopyDataInit>

080029e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029ee:	3104      	adds	r1, #4

080029f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <LoopForever+0xe>)
	adds	r2, r0, r1
 80029f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029f8:	d3f6      	bcc.n	80029e8 <CopyDataInit>
	ldr	r2, =_sbss
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029fc:	e002      	b.n	8002a04 <LoopFillZerobss>

080029fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a00:	f842 3b04 	str.w	r3, [r2], #4

08002a04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <LoopForever+0x16>)
	cmp	r2, r3
 8002a06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a08:	d3f9      	bcc.n	80029fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a0a:	f7ff fab7 	bl	8001f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f000 f817 	bl	8002a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a12:	f7fe ffaf 	bl	8001974 <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a18:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002a1c:	08007874 	.word	0x08007874
	ldr	r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a24:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8002a28:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8002a2c:	20000480 	.word	0x20000480

08002a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC1_2_IRQHandler>
	...

08002a34 <__errno>:
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <__errno+0x8>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000004 	.word	0x20000004

08002a40 <__libc_init_array>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4d0d      	ldr	r5, [pc, #52]	; (8002a78 <__libc_init_array+0x38>)
 8002a44:	4c0d      	ldr	r4, [pc, #52]	; (8002a7c <__libc_init_array+0x3c>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	42a6      	cmp	r6, r4
 8002a4e:	d109      	bne.n	8002a64 <__libc_init_array+0x24>
 8002a50:	4d0b      	ldr	r5, [pc, #44]	; (8002a80 <__libc_init_array+0x40>)
 8002a52:	4c0c      	ldr	r4, [pc, #48]	; (8002a84 <__libc_init_array+0x44>)
 8002a54:	f004 fc44 	bl	80072e0 <_init>
 8002a58:	1b64      	subs	r4, r4, r5
 8002a5a:	10a4      	asrs	r4, r4, #2
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	42a6      	cmp	r6, r4
 8002a60:	d105      	bne.n	8002a6e <__libc_init_array+0x2e>
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a68:	4798      	blx	r3
 8002a6a:	3601      	adds	r6, #1
 8002a6c:	e7ee      	b.n	8002a4c <__libc_init_array+0xc>
 8002a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a72:	4798      	blx	r3
 8002a74:	3601      	adds	r6, #1
 8002a76:	e7f2      	b.n	8002a5e <__libc_init_array+0x1e>
 8002a78:	0800786c 	.word	0x0800786c
 8002a7c:	0800786c 	.word	0x0800786c
 8002a80:	0800786c 	.word	0x0800786c
 8002a84:	08007870 	.word	0x08007870

08002a88 <memset>:
 8002a88:	4402      	add	r2, r0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <memset+0xa>
 8002a90:	4770      	bx	lr
 8002a92:	f803 1b01 	strb.w	r1, [r3], #1
 8002a96:	e7f9      	b.n	8002a8c <memset+0x4>

08002a98 <__cvt>:
 8002a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a9c:	ec55 4b10 	vmov	r4, r5, d0
 8002aa0:	2d00      	cmp	r5, #0
 8002aa2:	460e      	mov	r6, r1
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	bfbb      	ittet	lt
 8002aaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002aae:	461d      	movlt	r5, r3
 8002ab0:	2300      	movge	r3, #0
 8002ab2:	232d      	movlt	r3, #45	; 0x2d
 8002ab4:	700b      	strb	r3, [r1, #0]
 8002ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ab8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002abc:	4691      	mov	r9, r2
 8002abe:	f023 0820 	bic.w	r8, r3, #32
 8002ac2:	bfbc      	itt	lt
 8002ac4:	4622      	movlt	r2, r4
 8002ac6:	4614      	movlt	r4, r2
 8002ac8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002acc:	d005      	beq.n	8002ada <__cvt+0x42>
 8002ace:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ad2:	d100      	bne.n	8002ad6 <__cvt+0x3e>
 8002ad4:	3601      	adds	r6, #1
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	e000      	b.n	8002adc <__cvt+0x44>
 8002ada:	2103      	movs	r1, #3
 8002adc:	ab03      	add	r3, sp, #12
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	ab02      	add	r3, sp, #8
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	ec45 4b10 	vmov	d0, r4, r5
 8002ae8:	4653      	mov	r3, sl
 8002aea:	4632      	mov	r2, r6
 8002aec:	f001 fdb4 	bl	8004658 <_dtoa_r>
 8002af0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002af4:	4607      	mov	r7, r0
 8002af6:	d102      	bne.n	8002afe <__cvt+0x66>
 8002af8:	f019 0f01 	tst.w	r9, #1
 8002afc:	d022      	beq.n	8002b44 <__cvt+0xac>
 8002afe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b02:	eb07 0906 	add.w	r9, r7, r6
 8002b06:	d110      	bne.n	8002b2a <__cvt+0x92>
 8002b08:	783b      	ldrb	r3, [r7, #0]
 8002b0a:	2b30      	cmp	r3, #48	; 0x30
 8002b0c:	d10a      	bne.n	8002b24 <__cvt+0x8c>
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	f7fd ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b1a:	b918      	cbnz	r0, 8002b24 <__cvt+0x8c>
 8002b1c:	f1c6 0601 	rsb	r6, r6, #1
 8002b20:	f8ca 6000 	str.w	r6, [sl]
 8002b24:	f8da 3000 	ldr.w	r3, [sl]
 8002b28:	4499      	add	r9, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4629      	mov	r1, r5
 8002b32:	f7fd ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b36:	b108      	cbz	r0, 8002b3c <__cvt+0xa4>
 8002b38:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b3c:	2230      	movs	r2, #48	; 0x30
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	454b      	cmp	r3, r9
 8002b42:	d307      	bcc.n	8002b54 <__cvt+0xbc>
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b48:	1bdb      	subs	r3, r3, r7
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	b004      	add	sp, #16
 8002b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b54:	1c59      	adds	r1, r3, #1
 8002b56:	9103      	str	r1, [sp, #12]
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e7f0      	b.n	8002b3e <__cvt+0xa6>

08002b5c <__exponent>:
 8002b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2900      	cmp	r1, #0
 8002b62:	bfb8      	it	lt
 8002b64:	4249      	neglt	r1, r1
 8002b66:	f803 2b02 	strb.w	r2, [r3], #2
 8002b6a:	bfb4      	ite	lt
 8002b6c:	222d      	movlt	r2, #45	; 0x2d
 8002b6e:	222b      	movge	r2, #43	; 0x2b
 8002b70:	2909      	cmp	r1, #9
 8002b72:	7042      	strb	r2, [r0, #1]
 8002b74:	dd2a      	ble.n	8002bcc <__exponent+0x70>
 8002b76:	f10d 0407 	add.w	r4, sp, #7
 8002b7a:	46a4      	mov	ip, r4
 8002b7c:	270a      	movs	r7, #10
 8002b7e:	46a6      	mov	lr, r4
 8002b80:	460a      	mov	r2, r1
 8002b82:	fb91 f6f7 	sdiv	r6, r1, r7
 8002b86:	fb07 1516 	mls	r5, r7, r6, r1
 8002b8a:	3530      	adds	r5, #48	; 0x30
 8002b8c:	2a63      	cmp	r2, #99	; 0x63
 8002b8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002b92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002b96:	4631      	mov	r1, r6
 8002b98:	dcf1      	bgt.n	8002b7e <__exponent+0x22>
 8002b9a:	3130      	adds	r1, #48	; 0x30
 8002b9c:	f1ae 0502 	sub.w	r5, lr, #2
 8002ba0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002ba4:	1c44      	adds	r4, r0, #1
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	4561      	cmp	r1, ip
 8002baa:	d30a      	bcc.n	8002bc2 <__exponent+0x66>
 8002bac:	f10d 0209 	add.w	r2, sp, #9
 8002bb0:	eba2 020e 	sub.w	r2, r2, lr
 8002bb4:	4565      	cmp	r5, ip
 8002bb6:	bf88      	it	hi
 8002bb8:	2200      	movhi	r2, #0
 8002bba:	4413      	add	r3, r2
 8002bbc:	1a18      	subs	r0, r3, r0
 8002bbe:	b003      	add	sp, #12
 8002bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002bca:	e7ed      	b.n	8002ba8 <__exponent+0x4c>
 8002bcc:	2330      	movs	r3, #48	; 0x30
 8002bce:	3130      	adds	r1, #48	; 0x30
 8002bd0:	7083      	strb	r3, [r0, #2]
 8002bd2:	70c1      	strb	r1, [r0, #3]
 8002bd4:	1d03      	adds	r3, r0, #4
 8002bd6:	e7f1      	b.n	8002bbc <__exponent+0x60>

08002bd8 <_printf_float>:
 8002bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bdc:	ed2d 8b02 	vpush	{d8}
 8002be0:	b08d      	sub	sp, #52	; 0x34
 8002be2:	460c      	mov	r4, r1
 8002be4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002be8:	4616      	mov	r6, r2
 8002bea:	461f      	mov	r7, r3
 8002bec:	4605      	mov	r5, r0
 8002bee:	f002 fe8f 	bl	8005910 <_localeconv_r>
 8002bf2:	f8d0 a000 	ldr.w	sl, [r0]
 8002bf6:	4650      	mov	r0, sl
 8002bf8:	f7fd faea 	bl	80001d0 <strlen>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	9305      	str	r3, [sp, #20]
 8002c04:	f8d8 3000 	ldr.w	r3, [r8]
 8002c08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002c0c:	3307      	adds	r3, #7
 8002c0e:	f023 0307 	bic.w	r3, r3, #7
 8002c12:	f103 0208 	add.w	r2, r3, #8
 8002c16:	f8c8 2000 	str.w	r2, [r8]
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002c26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c2a:	9307      	str	r3, [sp, #28]
 8002c2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c30:	ee08 0a10 	vmov	s16, r0
 8002c34:	4b9f      	ldr	r3, [pc, #636]	; (8002eb4 <_printf_float+0x2dc>)
 8002c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3e:	f7fd ff75 	bl	8000b2c <__aeabi_dcmpun>
 8002c42:	bb88      	cbnz	r0, 8002ca8 <_printf_float+0xd0>
 8002c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c48:	4b9a      	ldr	r3, [pc, #616]	; (8002eb4 <_printf_float+0x2dc>)
 8002c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4e:	f7fd ff4f 	bl	8000af0 <__aeabi_dcmple>
 8002c52:	bb48      	cbnz	r0, 8002ca8 <_printf_float+0xd0>
 8002c54:	2200      	movs	r2, #0
 8002c56:	2300      	movs	r3, #0
 8002c58:	4640      	mov	r0, r8
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	f7fd ff3e 	bl	8000adc <__aeabi_dcmplt>
 8002c60:	b110      	cbz	r0, 8002c68 <_printf_float+0x90>
 8002c62:	232d      	movs	r3, #45	; 0x2d
 8002c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c68:	4b93      	ldr	r3, [pc, #588]	; (8002eb8 <_printf_float+0x2e0>)
 8002c6a:	4894      	ldr	r0, [pc, #592]	; (8002ebc <_printf_float+0x2e4>)
 8002c6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002c70:	bf94      	ite	ls
 8002c72:	4698      	movls	r8, r3
 8002c74:	4680      	movhi	r8, r0
 8002c76:	2303      	movs	r3, #3
 8002c78:	6123      	str	r3, [r4, #16]
 8002c7a:	9b05      	ldr	r3, [sp, #20]
 8002c7c:	f023 0204 	bic.w	r2, r3, #4
 8002c80:	6022      	str	r2, [r4, #0]
 8002c82:	f04f 0900 	mov.w	r9, #0
 8002c86:	9700      	str	r7, [sp, #0]
 8002c88:	4633      	mov	r3, r6
 8002c8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f000 f9d8 	bl	8003044 <_printf_common>
 8002c94:	3001      	adds	r0, #1
 8002c96:	f040 8090 	bne.w	8002dba <_printf_float+0x1e2>
 8002c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9e:	b00d      	add	sp, #52	; 0x34
 8002ca0:	ecbd 8b02 	vpop	{d8}
 8002ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	4640      	mov	r0, r8
 8002cae:	4649      	mov	r1, r9
 8002cb0:	f7fd ff3c 	bl	8000b2c <__aeabi_dcmpun>
 8002cb4:	b140      	cbz	r0, 8002cc8 <_printf_float+0xf0>
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bfbc      	itt	lt
 8002cbc:	232d      	movlt	r3, #45	; 0x2d
 8002cbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002cc2:	487f      	ldr	r0, [pc, #508]	; (8002ec0 <_printf_float+0x2e8>)
 8002cc4:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <_printf_float+0x2ec>)
 8002cc6:	e7d1      	b.n	8002c6c <_printf_float+0x94>
 8002cc8:	6863      	ldr	r3, [r4, #4]
 8002cca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002cce:	9206      	str	r2, [sp, #24]
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	d13f      	bne.n	8002d54 <_printf_float+0x17c>
 8002cd4:	2306      	movs	r3, #6
 8002cd6:	6063      	str	r3, [r4, #4]
 8002cd8:	9b05      	ldr	r3, [sp, #20]
 8002cda:	6861      	ldr	r1, [r4, #4]
 8002cdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9303      	str	r3, [sp, #12]
 8002ce4:	ab0a      	add	r3, sp, #40	; 0x28
 8002ce6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002cea:	ab09      	add	r3, sp, #36	; 0x24
 8002cec:	ec49 8b10 	vmov	d0, r8, r9
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6022      	str	r2, [r4, #0]
 8002cf4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f7ff fecd 	bl	8002a98 <__cvt>
 8002cfe:	9b06      	ldr	r3, [sp, #24]
 8002d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d02:	2b47      	cmp	r3, #71	; 0x47
 8002d04:	4680      	mov	r8, r0
 8002d06:	d108      	bne.n	8002d1a <_printf_float+0x142>
 8002d08:	1cc8      	adds	r0, r1, #3
 8002d0a:	db02      	blt.n	8002d12 <_printf_float+0x13a>
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	4299      	cmp	r1, r3
 8002d10:	dd41      	ble.n	8002d96 <_printf_float+0x1be>
 8002d12:	f1ab 0b02 	sub.w	fp, fp, #2
 8002d16:	fa5f fb8b 	uxtb.w	fp, fp
 8002d1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002d1e:	d820      	bhi.n	8002d62 <_printf_float+0x18a>
 8002d20:	3901      	subs	r1, #1
 8002d22:	465a      	mov	r2, fp
 8002d24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d28:	9109      	str	r1, [sp, #36]	; 0x24
 8002d2a:	f7ff ff17 	bl	8002b5c <__exponent>
 8002d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d30:	1813      	adds	r3, r2, r0
 8002d32:	2a01      	cmp	r2, #1
 8002d34:	4681      	mov	r9, r0
 8002d36:	6123      	str	r3, [r4, #16]
 8002d38:	dc02      	bgt.n	8002d40 <_printf_float+0x168>
 8002d3a:	6822      	ldr	r2, [r4, #0]
 8002d3c:	07d2      	lsls	r2, r2, #31
 8002d3e:	d501      	bpl.n	8002d44 <_printf_float+0x16c>
 8002d40:	3301      	adds	r3, #1
 8002d42:	6123      	str	r3, [r4, #16]
 8002d44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d09c      	beq.n	8002c86 <_printf_float+0xae>
 8002d4c:	232d      	movs	r3, #45	; 0x2d
 8002d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d52:	e798      	b.n	8002c86 <_printf_float+0xae>
 8002d54:	9a06      	ldr	r2, [sp, #24]
 8002d56:	2a47      	cmp	r2, #71	; 0x47
 8002d58:	d1be      	bne.n	8002cd8 <_printf_float+0x100>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1bc      	bne.n	8002cd8 <_printf_float+0x100>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e7b9      	b.n	8002cd6 <_printf_float+0xfe>
 8002d62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002d66:	d118      	bne.n	8002d9a <_printf_float+0x1c2>
 8002d68:	2900      	cmp	r1, #0
 8002d6a:	6863      	ldr	r3, [r4, #4]
 8002d6c:	dd0b      	ble.n	8002d86 <_printf_float+0x1ae>
 8002d6e:	6121      	str	r1, [r4, #16]
 8002d70:	b913      	cbnz	r3, 8002d78 <_printf_float+0x1a0>
 8002d72:	6822      	ldr	r2, [r4, #0]
 8002d74:	07d0      	lsls	r0, r2, #31
 8002d76:	d502      	bpl.n	8002d7e <_printf_float+0x1a6>
 8002d78:	3301      	adds	r3, #1
 8002d7a:	440b      	add	r3, r1
 8002d7c:	6123      	str	r3, [r4, #16]
 8002d7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d80:	f04f 0900 	mov.w	r9, #0
 8002d84:	e7de      	b.n	8002d44 <_printf_float+0x16c>
 8002d86:	b913      	cbnz	r3, 8002d8e <_printf_float+0x1b6>
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	07d2      	lsls	r2, r2, #31
 8002d8c:	d501      	bpl.n	8002d92 <_printf_float+0x1ba>
 8002d8e:	3302      	adds	r3, #2
 8002d90:	e7f4      	b.n	8002d7c <_printf_float+0x1a4>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e7f2      	b.n	8002d7c <_printf_float+0x1a4>
 8002d96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d9c:	4299      	cmp	r1, r3
 8002d9e:	db05      	blt.n	8002dac <_printf_float+0x1d4>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	6121      	str	r1, [r4, #16]
 8002da4:	07d8      	lsls	r0, r3, #31
 8002da6:	d5ea      	bpl.n	8002d7e <_printf_float+0x1a6>
 8002da8:	1c4b      	adds	r3, r1, #1
 8002daa:	e7e7      	b.n	8002d7c <_printf_float+0x1a4>
 8002dac:	2900      	cmp	r1, #0
 8002dae:	bfd4      	ite	le
 8002db0:	f1c1 0202 	rsble	r2, r1, #2
 8002db4:	2201      	movgt	r2, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	e7e0      	b.n	8002d7c <_printf_float+0x1a4>
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	055a      	lsls	r2, r3, #21
 8002dbe:	d407      	bmi.n	8002dd0 <_printf_float+0x1f8>
 8002dc0:	6923      	ldr	r3, [r4, #16]
 8002dc2:	4642      	mov	r2, r8
 8002dc4:	4631      	mov	r1, r6
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	47b8      	blx	r7
 8002dca:	3001      	adds	r0, #1
 8002dcc:	d12c      	bne.n	8002e28 <_printf_float+0x250>
 8002dce:	e764      	b.n	8002c9a <_printf_float+0xc2>
 8002dd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002dd4:	f240 80e0 	bls.w	8002f98 <_printf_float+0x3c0>
 8002dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2300      	movs	r3, #0
 8002de0:	f7fd fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d034      	beq.n	8002e52 <_printf_float+0x27a>
 8002de8:	4a37      	ldr	r2, [pc, #220]	; (8002ec8 <_printf_float+0x2f0>)
 8002dea:	2301      	movs	r3, #1
 8002dec:	4631      	mov	r1, r6
 8002dee:	4628      	mov	r0, r5
 8002df0:	47b8      	blx	r7
 8002df2:	3001      	adds	r0, #1
 8002df4:	f43f af51 	beq.w	8002c9a <_printf_float+0xc2>
 8002df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	db02      	blt.n	8002e06 <_printf_float+0x22e>
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	07d8      	lsls	r0, r3, #31
 8002e04:	d510      	bpl.n	8002e28 <_printf_float+0x250>
 8002e06:	ee18 3a10 	vmov	r3, s16
 8002e0a:	4652      	mov	r2, sl
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	4628      	mov	r0, r5
 8002e10:	47b8      	blx	r7
 8002e12:	3001      	adds	r0, #1
 8002e14:	f43f af41 	beq.w	8002c9a <_printf_float+0xc2>
 8002e18:	f04f 0800 	mov.w	r8, #0
 8002e1c:	f104 091a 	add.w	r9, r4, #26
 8002e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4543      	cmp	r3, r8
 8002e26:	dc09      	bgt.n	8002e3c <_printf_float+0x264>
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	079b      	lsls	r3, r3, #30
 8002e2c:	f100 8105 	bmi.w	800303a <_printf_float+0x462>
 8002e30:	68e0      	ldr	r0, [r4, #12]
 8002e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e34:	4298      	cmp	r0, r3
 8002e36:	bfb8      	it	lt
 8002e38:	4618      	movlt	r0, r3
 8002e3a:	e730      	b.n	8002c9e <_printf_float+0xc6>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	464a      	mov	r2, r9
 8002e40:	4631      	mov	r1, r6
 8002e42:	4628      	mov	r0, r5
 8002e44:	47b8      	blx	r7
 8002e46:	3001      	adds	r0, #1
 8002e48:	f43f af27 	beq.w	8002c9a <_printf_float+0xc2>
 8002e4c:	f108 0801 	add.w	r8, r8, #1
 8002e50:	e7e6      	b.n	8002e20 <_printf_float+0x248>
 8002e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	dc39      	bgt.n	8002ecc <_printf_float+0x2f4>
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <_printf_float+0x2f0>)
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4631      	mov	r1, r6
 8002e5e:	4628      	mov	r0, r5
 8002e60:	47b8      	blx	r7
 8002e62:	3001      	adds	r0, #1
 8002e64:	f43f af19 	beq.w	8002c9a <_printf_float+0xc2>
 8002e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	d102      	bne.n	8002e76 <_printf_float+0x29e>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	07d9      	lsls	r1, r3, #31
 8002e74:	d5d8      	bpl.n	8002e28 <_printf_float+0x250>
 8002e76:	ee18 3a10 	vmov	r3, s16
 8002e7a:	4652      	mov	r2, sl
 8002e7c:	4631      	mov	r1, r6
 8002e7e:	4628      	mov	r0, r5
 8002e80:	47b8      	blx	r7
 8002e82:	3001      	adds	r0, #1
 8002e84:	f43f af09 	beq.w	8002c9a <_printf_float+0xc2>
 8002e88:	f04f 0900 	mov.w	r9, #0
 8002e8c:	f104 0a1a 	add.w	sl, r4, #26
 8002e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e92:	425b      	negs	r3, r3
 8002e94:	454b      	cmp	r3, r9
 8002e96:	dc01      	bgt.n	8002e9c <_printf_float+0x2c4>
 8002e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e9a:	e792      	b.n	8002dc2 <_printf_float+0x1ea>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4652      	mov	r2, sl
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b8      	blx	r7
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	f43f aef7 	beq.w	8002c9a <_printf_float+0xc2>
 8002eac:	f109 0901 	add.w	r9, r9, #1
 8002eb0:	e7ee      	b.n	8002e90 <_printf_float+0x2b8>
 8002eb2:	bf00      	nop
 8002eb4:	7fefffff 	.word	0x7fefffff
 8002eb8:	080073bc 	.word	0x080073bc
 8002ebc:	080073c0 	.word	0x080073c0
 8002ec0:	080073c8 	.word	0x080073c8
 8002ec4:	080073c4 	.word	0x080073c4
 8002ec8:	080073cc 	.word	0x080073cc
 8002ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	bfa8      	it	ge
 8002ed4:	461a      	movge	r2, r3
 8002ed6:	2a00      	cmp	r2, #0
 8002ed8:	4691      	mov	r9, r2
 8002eda:	dc37      	bgt.n	8002f4c <_printf_float+0x374>
 8002edc:	f04f 0b00 	mov.w	fp, #0
 8002ee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ee4:	f104 021a 	add.w	r2, r4, #26
 8002ee8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002eea:	9305      	str	r3, [sp, #20]
 8002eec:	eba3 0309 	sub.w	r3, r3, r9
 8002ef0:	455b      	cmp	r3, fp
 8002ef2:	dc33      	bgt.n	8002f5c <_printf_float+0x384>
 8002ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	db3b      	blt.n	8002f74 <_printf_float+0x39c>
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	07da      	lsls	r2, r3, #31
 8002f00:	d438      	bmi.n	8002f74 <_printf_float+0x39c>
 8002f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f04:	9b05      	ldr	r3, [sp, #20]
 8002f06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	eba2 0901 	sub.w	r9, r2, r1
 8002f0e:	4599      	cmp	r9, r3
 8002f10:	bfa8      	it	ge
 8002f12:	4699      	movge	r9, r3
 8002f14:	f1b9 0f00 	cmp.w	r9, #0
 8002f18:	dc35      	bgt.n	8002f86 <_printf_float+0x3ae>
 8002f1a:	f04f 0800 	mov.w	r8, #0
 8002f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f22:	f104 0a1a 	add.w	sl, r4, #26
 8002f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	eba3 0309 	sub.w	r3, r3, r9
 8002f30:	4543      	cmp	r3, r8
 8002f32:	f77f af79 	ble.w	8002e28 <_printf_float+0x250>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4652      	mov	r2, sl
 8002f3a:	4631      	mov	r1, r6
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	47b8      	blx	r7
 8002f40:	3001      	adds	r0, #1
 8002f42:	f43f aeaa 	beq.w	8002c9a <_printf_float+0xc2>
 8002f46:	f108 0801 	add.w	r8, r8, #1
 8002f4a:	e7ec      	b.n	8002f26 <_printf_float+0x34e>
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	4631      	mov	r1, r6
 8002f50:	4642      	mov	r2, r8
 8002f52:	4628      	mov	r0, r5
 8002f54:	47b8      	blx	r7
 8002f56:	3001      	adds	r0, #1
 8002f58:	d1c0      	bne.n	8002edc <_printf_float+0x304>
 8002f5a:	e69e      	b.n	8002c9a <_printf_float+0xc2>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4631      	mov	r1, r6
 8002f60:	4628      	mov	r0, r5
 8002f62:	9205      	str	r2, [sp, #20]
 8002f64:	47b8      	blx	r7
 8002f66:	3001      	adds	r0, #1
 8002f68:	f43f ae97 	beq.w	8002c9a <_printf_float+0xc2>
 8002f6c:	9a05      	ldr	r2, [sp, #20]
 8002f6e:	f10b 0b01 	add.w	fp, fp, #1
 8002f72:	e7b9      	b.n	8002ee8 <_printf_float+0x310>
 8002f74:	ee18 3a10 	vmov	r3, s16
 8002f78:	4652      	mov	r2, sl
 8002f7a:	4631      	mov	r1, r6
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	47b8      	blx	r7
 8002f80:	3001      	adds	r0, #1
 8002f82:	d1be      	bne.n	8002f02 <_printf_float+0x32a>
 8002f84:	e689      	b.n	8002c9a <_printf_float+0xc2>
 8002f86:	9a05      	ldr	r2, [sp, #20]
 8002f88:	464b      	mov	r3, r9
 8002f8a:	4442      	add	r2, r8
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	4628      	mov	r0, r5
 8002f90:	47b8      	blx	r7
 8002f92:	3001      	adds	r0, #1
 8002f94:	d1c1      	bne.n	8002f1a <_printf_float+0x342>
 8002f96:	e680      	b.n	8002c9a <_printf_float+0xc2>
 8002f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f9a:	2a01      	cmp	r2, #1
 8002f9c:	dc01      	bgt.n	8002fa2 <_printf_float+0x3ca>
 8002f9e:	07db      	lsls	r3, r3, #31
 8002fa0:	d538      	bpl.n	8003014 <_printf_float+0x43c>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	4628      	mov	r0, r5
 8002faa:	47b8      	blx	r7
 8002fac:	3001      	adds	r0, #1
 8002fae:	f43f ae74 	beq.w	8002c9a <_printf_float+0xc2>
 8002fb2:	ee18 3a10 	vmov	r3, s16
 8002fb6:	4652      	mov	r2, sl
 8002fb8:	4631      	mov	r1, r6
 8002fba:	4628      	mov	r0, r5
 8002fbc:	47b8      	blx	r7
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	f43f ae6b 	beq.w	8002c9a <_printf_float+0xc2>
 8002fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f7fd fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8002fd0:	b9d8      	cbnz	r0, 800300a <_printf_float+0x432>
 8002fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fd4:	f108 0201 	add.w	r2, r8, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	4631      	mov	r1, r6
 8002fdc:	4628      	mov	r0, r5
 8002fde:	47b8      	blx	r7
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d10e      	bne.n	8003002 <_printf_float+0x42a>
 8002fe4:	e659      	b.n	8002c9a <_printf_float+0xc2>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4652      	mov	r2, sl
 8002fea:	4631      	mov	r1, r6
 8002fec:	4628      	mov	r0, r5
 8002fee:	47b8      	blx	r7
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	f43f ae52 	beq.w	8002c9a <_printf_float+0xc2>
 8002ff6:	f108 0801 	add.w	r8, r8, #1
 8002ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	4543      	cmp	r3, r8
 8003000:	dcf1      	bgt.n	8002fe6 <_printf_float+0x40e>
 8003002:	464b      	mov	r3, r9
 8003004:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003008:	e6dc      	b.n	8002dc4 <_printf_float+0x1ec>
 800300a:	f04f 0800 	mov.w	r8, #0
 800300e:	f104 0a1a 	add.w	sl, r4, #26
 8003012:	e7f2      	b.n	8002ffa <_printf_float+0x422>
 8003014:	2301      	movs	r3, #1
 8003016:	4642      	mov	r2, r8
 8003018:	e7df      	b.n	8002fda <_printf_float+0x402>
 800301a:	2301      	movs	r3, #1
 800301c:	464a      	mov	r2, r9
 800301e:	4631      	mov	r1, r6
 8003020:	4628      	mov	r0, r5
 8003022:	47b8      	blx	r7
 8003024:	3001      	adds	r0, #1
 8003026:	f43f ae38 	beq.w	8002c9a <_printf_float+0xc2>
 800302a:	f108 0801 	add.w	r8, r8, #1
 800302e:	68e3      	ldr	r3, [r4, #12]
 8003030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003032:	1a5b      	subs	r3, r3, r1
 8003034:	4543      	cmp	r3, r8
 8003036:	dcf0      	bgt.n	800301a <_printf_float+0x442>
 8003038:	e6fa      	b.n	8002e30 <_printf_float+0x258>
 800303a:	f04f 0800 	mov.w	r8, #0
 800303e:	f104 0919 	add.w	r9, r4, #25
 8003042:	e7f4      	b.n	800302e <_printf_float+0x456>

08003044 <_printf_common>:
 8003044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003048:	4616      	mov	r6, r2
 800304a:	4699      	mov	r9, r3
 800304c:	688a      	ldr	r2, [r1, #8]
 800304e:	690b      	ldr	r3, [r1, #16]
 8003050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003054:	4293      	cmp	r3, r2
 8003056:	bfb8      	it	lt
 8003058:	4613      	movlt	r3, r2
 800305a:	6033      	str	r3, [r6, #0]
 800305c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003060:	4607      	mov	r7, r0
 8003062:	460c      	mov	r4, r1
 8003064:	b10a      	cbz	r2, 800306a <_printf_common+0x26>
 8003066:	3301      	adds	r3, #1
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	0699      	lsls	r1, r3, #26
 800306e:	bf42      	ittt	mi
 8003070:	6833      	ldrmi	r3, [r6, #0]
 8003072:	3302      	addmi	r3, #2
 8003074:	6033      	strmi	r3, [r6, #0]
 8003076:	6825      	ldr	r5, [r4, #0]
 8003078:	f015 0506 	ands.w	r5, r5, #6
 800307c:	d106      	bne.n	800308c <_printf_common+0x48>
 800307e:	f104 0a19 	add.w	sl, r4, #25
 8003082:	68e3      	ldr	r3, [r4, #12]
 8003084:	6832      	ldr	r2, [r6, #0]
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	42ab      	cmp	r3, r5
 800308a:	dc26      	bgt.n	80030da <_printf_common+0x96>
 800308c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003090:	1e13      	subs	r3, r2, #0
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	bf18      	it	ne
 8003096:	2301      	movne	r3, #1
 8003098:	0692      	lsls	r2, r2, #26
 800309a:	d42b      	bmi.n	80030f4 <_printf_common+0xb0>
 800309c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030a0:	4649      	mov	r1, r9
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c0      	blx	r8
 80030a6:	3001      	adds	r0, #1
 80030a8:	d01e      	beq.n	80030e8 <_printf_common+0xa4>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	68e5      	ldr	r5, [r4, #12]
 80030ae:	6832      	ldr	r2, [r6, #0]
 80030b0:	f003 0306 	and.w	r3, r3, #6
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	bf08      	it	eq
 80030b8:	1aad      	subeq	r5, r5, r2
 80030ba:	68a3      	ldr	r3, [r4, #8]
 80030bc:	6922      	ldr	r2, [r4, #16]
 80030be:	bf0c      	ite	eq
 80030c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030c4:	2500      	movne	r5, #0
 80030c6:	4293      	cmp	r3, r2
 80030c8:	bfc4      	itt	gt
 80030ca:	1a9b      	subgt	r3, r3, r2
 80030cc:	18ed      	addgt	r5, r5, r3
 80030ce:	2600      	movs	r6, #0
 80030d0:	341a      	adds	r4, #26
 80030d2:	42b5      	cmp	r5, r6
 80030d4:	d11a      	bne.n	800310c <_printf_common+0xc8>
 80030d6:	2000      	movs	r0, #0
 80030d8:	e008      	b.n	80030ec <_printf_common+0xa8>
 80030da:	2301      	movs	r3, #1
 80030dc:	4652      	mov	r2, sl
 80030de:	4649      	mov	r1, r9
 80030e0:	4638      	mov	r0, r7
 80030e2:	47c0      	blx	r8
 80030e4:	3001      	adds	r0, #1
 80030e6:	d103      	bne.n	80030f0 <_printf_common+0xac>
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f0:	3501      	adds	r5, #1
 80030f2:	e7c6      	b.n	8003082 <_printf_common+0x3e>
 80030f4:	18e1      	adds	r1, r4, r3
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	2030      	movs	r0, #48	; 0x30
 80030fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030fe:	4422      	add	r2, r4
 8003100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003108:	3302      	adds	r3, #2
 800310a:	e7c7      	b.n	800309c <_printf_common+0x58>
 800310c:	2301      	movs	r3, #1
 800310e:	4622      	mov	r2, r4
 8003110:	4649      	mov	r1, r9
 8003112:	4638      	mov	r0, r7
 8003114:	47c0      	blx	r8
 8003116:	3001      	adds	r0, #1
 8003118:	d0e6      	beq.n	80030e8 <_printf_common+0xa4>
 800311a:	3601      	adds	r6, #1
 800311c:	e7d9      	b.n	80030d2 <_printf_common+0x8e>
	...

08003120 <_printf_i>:
 8003120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003124:	460c      	mov	r4, r1
 8003126:	4691      	mov	r9, r2
 8003128:	7e27      	ldrb	r7, [r4, #24]
 800312a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800312c:	2f78      	cmp	r7, #120	; 0x78
 800312e:	4680      	mov	r8, r0
 8003130:	469a      	mov	sl, r3
 8003132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003136:	d807      	bhi.n	8003148 <_printf_i+0x28>
 8003138:	2f62      	cmp	r7, #98	; 0x62
 800313a:	d80a      	bhi.n	8003152 <_printf_i+0x32>
 800313c:	2f00      	cmp	r7, #0
 800313e:	f000 80d8 	beq.w	80032f2 <_printf_i+0x1d2>
 8003142:	2f58      	cmp	r7, #88	; 0x58
 8003144:	f000 80a3 	beq.w	800328e <_printf_i+0x16e>
 8003148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800314c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003150:	e03a      	b.n	80031c8 <_printf_i+0xa8>
 8003152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003156:	2b15      	cmp	r3, #21
 8003158:	d8f6      	bhi.n	8003148 <_printf_i+0x28>
 800315a:	a001      	add	r0, pc, #4	; (adr r0, 8003160 <_printf_i+0x40>)
 800315c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003160:	080031b9 	.word	0x080031b9
 8003164:	080031cd 	.word	0x080031cd
 8003168:	08003149 	.word	0x08003149
 800316c:	08003149 	.word	0x08003149
 8003170:	08003149 	.word	0x08003149
 8003174:	08003149 	.word	0x08003149
 8003178:	080031cd 	.word	0x080031cd
 800317c:	08003149 	.word	0x08003149
 8003180:	08003149 	.word	0x08003149
 8003184:	08003149 	.word	0x08003149
 8003188:	08003149 	.word	0x08003149
 800318c:	080032d9 	.word	0x080032d9
 8003190:	080031fd 	.word	0x080031fd
 8003194:	080032bb 	.word	0x080032bb
 8003198:	08003149 	.word	0x08003149
 800319c:	08003149 	.word	0x08003149
 80031a0:	080032fb 	.word	0x080032fb
 80031a4:	08003149 	.word	0x08003149
 80031a8:	080031fd 	.word	0x080031fd
 80031ac:	08003149 	.word	0x08003149
 80031b0:	08003149 	.word	0x08003149
 80031b4:	080032c3 	.word	0x080032c3
 80031b8:	680b      	ldr	r3, [r1, #0]
 80031ba:	1d1a      	adds	r2, r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	600a      	str	r2, [r1, #0]
 80031c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0a3      	b.n	8003314 <_printf_i+0x1f4>
 80031cc:	6825      	ldr	r5, [r4, #0]
 80031ce:	6808      	ldr	r0, [r1, #0]
 80031d0:	062e      	lsls	r6, r5, #24
 80031d2:	f100 0304 	add.w	r3, r0, #4
 80031d6:	d50a      	bpl.n	80031ee <_printf_i+0xce>
 80031d8:	6805      	ldr	r5, [r0, #0]
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	2d00      	cmp	r5, #0
 80031de:	da03      	bge.n	80031e8 <_printf_i+0xc8>
 80031e0:	232d      	movs	r3, #45	; 0x2d
 80031e2:	426d      	negs	r5, r5
 80031e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e8:	485e      	ldr	r0, [pc, #376]	; (8003364 <_printf_i+0x244>)
 80031ea:	230a      	movs	r3, #10
 80031ec:	e019      	b.n	8003222 <_printf_i+0x102>
 80031ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031f2:	6805      	ldr	r5, [r0, #0]
 80031f4:	600b      	str	r3, [r1, #0]
 80031f6:	bf18      	it	ne
 80031f8:	b22d      	sxthne	r5, r5
 80031fa:	e7ef      	b.n	80031dc <_printf_i+0xbc>
 80031fc:	680b      	ldr	r3, [r1, #0]
 80031fe:	6825      	ldr	r5, [r4, #0]
 8003200:	1d18      	adds	r0, r3, #4
 8003202:	6008      	str	r0, [r1, #0]
 8003204:	0628      	lsls	r0, r5, #24
 8003206:	d501      	bpl.n	800320c <_printf_i+0xec>
 8003208:	681d      	ldr	r5, [r3, #0]
 800320a:	e002      	b.n	8003212 <_printf_i+0xf2>
 800320c:	0669      	lsls	r1, r5, #25
 800320e:	d5fb      	bpl.n	8003208 <_printf_i+0xe8>
 8003210:	881d      	ldrh	r5, [r3, #0]
 8003212:	4854      	ldr	r0, [pc, #336]	; (8003364 <_printf_i+0x244>)
 8003214:	2f6f      	cmp	r7, #111	; 0x6f
 8003216:	bf0c      	ite	eq
 8003218:	2308      	moveq	r3, #8
 800321a:	230a      	movne	r3, #10
 800321c:	2100      	movs	r1, #0
 800321e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003222:	6866      	ldr	r6, [r4, #4]
 8003224:	60a6      	str	r6, [r4, #8]
 8003226:	2e00      	cmp	r6, #0
 8003228:	bfa2      	ittt	ge
 800322a:	6821      	ldrge	r1, [r4, #0]
 800322c:	f021 0104 	bicge.w	r1, r1, #4
 8003230:	6021      	strge	r1, [r4, #0]
 8003232:	b90d      	cbnz	r5, 8003238 <_printf_i+0x118>
 8003234:	2e00      	cmp	r6, #0
 8003236:	d04d      	beq.n	80032d4 <_printf_i+0x1b4>
 8003238:	4616      	mov	r6, r2
 800323a:	fbb5 f1f3 	udiv	r1, r5, r3
 800323e:	fb03 5711 	mls	r7, r3, r1, r5
 8003242:	5dc7      	ldrb	r7, [r0, r7]
 8003244:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003248:	462f      	mov	r7, r5
 800324a:	42bb      	cmp	r3, r7
 800324c:	460d      	mov	r5, r1
 800324e:	d9f4      	bls.n	800323a <_printf_i+0x11a>
 8003250:	2b08      	cmp	r3, #8
 8003252:	d10b      	bne.n	800326c <_printf_i+0x14c>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	07df      	lsls	r7, r3, #31
 8003258:	d508      	bpl.n	800326c <_printf_i+0x14c>
 800325a:	6923      	ldr	r3, [r4, #16]
 800325c:	6861      	ldr	r1, [r4, #4]
 800325e:	4299      	cmp	r1, r3
 8003260:	bfde      	ittt	le
 8003262:	2330      	movle	r3, #48	; 0x30
 8003264:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003268:	f106 36ff 	addle.w	r6, r6, #4294967295
 800326c:	1b92      	subs	r2, r2, r6
 800326e:	6122      	str	r2, [r4, #16]
 8003270:	f8cd a000 	str.w	sl, [sp]
 8003274:	464b      	mov	r3, r9
 8003276:	aa03      	add	r2, sp, #12
 8003278:	4621      	mov	r1, r4
 800327a:	4640      	mov	r0, r8
 800327c:	f7ff fee2 	bl	8003044 <_printf_common>
 8003280:	3001      	adds	r0, #1
 8003282:	d14c      	bne.n	800331e <_printf_i+0x1fe>
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	b004      	add	sp, #16
 800328a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800328e:	4835      	ldr	r0, [pc, #212]	; (8003364 <_printf_i+0x244>)
 8003290:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	680e      	ldr	r6, [r1, #0]
 8003298:	061f      	lsls	r7, r3, #24
 800329a:	f856 5b04 	ldr.w	r5, [r6], #4
 800329e:	600e      	str	r6, [r1, #0]
 80032a0:	d514      	bpl.n	80032cc <_printf_i+0x1ac>
 80032a2:	07d9      	lsls	r1, r3, #31
 80032a4:	bf44      	itt	mi
 80032a6:	f043 0320 	orrmi.w	r3, r3, #32
 80032aa:	6023      	strmi	r3, [r4, #0]
 80032ac:	b91d      	cbnz	r5, 80032b6 <_printf_i+0x196>
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	f023 0320 	bic.w	r3, r3, #32
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	2310      	movs	r3, #16
 80032b8:	e7b0      	b.n	800321c <_printf_i+0xfc>
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	2378      	movs	r3, #120	; 0x78
 80032c4:	4828      	ldr	r0, [pc, #160]	; (8003368 <_printf_i+0x248>)
 80032c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032ca:	e7e3      	b.n	8003294 <_printf_i+0x174>
 80032cc:	065e      	lsls	r6, r3, #25
 80032ce:	bf48      	it	mi
 80032d0:	b2ad      	uxthmi	r5, r5
 80032d2:	e7e6      	b.n	80032a2 <_printf_i+0x182>
 80032d4:	4616      	mov	r6, r2
 80032d6:	e7bb      	b.n	8003250 <_printf_i+0x130>
 80032d8:	680b      	ldr	r3, [r1, #0]
 80032da:	6826      	ldr	r6, [r4, #0]
 80032dc:	6960      	ldr	r0, [r4, #20]
 80032de:	1d1d      	adds	r5, r3, #4
 80032e0:	600d      	str	r5, [r1, #0]
 80032e2:	0635      	lsls	r5, r6, #24
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	d501      	bpl.n	80032ec <_printf_i+0x1cc>
 80032e8:	6018      	str	r0, [r3, #0]
 80032ea:	e002      	b.n	80032f2 <_printf_i+0x1d2>
 80032ec:	0671      	lsls	r1, r6, #25
 80032ee:	d5fb      	bpl.n	80032e8 <_printf_i+0x1c8>
 80032f0:	8018      	strh	r0, [r3, #0]
 80032f2:	2300      	movs	r3, #0
 80032f4:	6123      	str	r3, [r4, #16]
 80032f6:	4616      	mov	r6, r2
 80032f8:	e7ba      	b.n	8003270 <_printf_i+0x150>
 80032fa:	680b      	ldr	r3, [r1, #0]
 80032fc:	1d1a      	adds	r2, r3, #4
 80032fe:	600a      	str	r2, [r1, #0]
 8003300:	681e      	ldr	r6, [r3, #0]
 8003302:	6862      	ldr	r2, [r4, #4]
 8003304:	2100      	movs	r1, #0
 8003306:	4630      	mov	r0, r6
 8003308:	f7fc ff6a 	bl	80001e0 <memchr>
 800330c:	b108      	cbz	r0, 8003312 <_printf_i+0x1f2>
 800330e:	1b80      	subs	r0, r0, r6
 8003310:	6060      	str	r0, [r4, #4]
 8003312:	6863      	ldr	r3, [r4, #4]
 8003314:	6123      	str	r3, [r4, #16]
 8003316:	2300      	movs	r3, #0
 8003318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800331c:	e7a8      	b.n	8003270 <_printf_i+0x150>
 800331e:	6923      	ldr	r3, [r4, #16]
 8003320:	4632      	mov	r2, r6
 8003322:	4649      	mov	r1, r9
 8003324:	4640      	mov	r0, r8
 8003326:	47d0      	blx	sl
 8003328:	3001      	adds	r0, #1
 800332a:	d0ab      	beq.n	8003284 <_printf_i+0x164>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	079b      	lsls	r3, r3, #30
 8003330:	d413      	bmi.n	800335a <_printf_i+0x23a>
 8003332:	68e0      	ldr	r0, [r4, #12]
 8003334:	9b03      	ldr	r3, [sp, #12]
 8003336:	4298      	cmp	r0, r3
 8003338:	bfb8      	it	lt
 800333a:	4618      	movlt	r0, r3
 800333c:	e7a4      	b.n	8003288 <_printf_i+0x168>
 800333e:	2301      	movs	r3, #1
 8003340:	4632      	mov	r2, r6
 8003342:	4649      	mov	r1, r9
 8003344:	4640      	mov	r0, r8
 8003346:	47d0      	blx	sl
 8003348:	3001      	adds	r0, #1
 800334a:	d09b      	beq.n	8003284 <_printf_i+0x164>
 800334c:	3501      	adds	r5, #1
 800334e:	68e3      	ldr	r3, [r4, #12]
 8003350:	9903      	ldr	r1, [sp, #12]
 8003352:	1a5b      	subs	r3, r3, r1
 8003354:	42ab      	cmp	r3, r5
 8003356:	dcf2      	bgt.n	800333e <_printf_i+0x21e>
 8003358:	e7eb      	b.n	8003332 <_printf_i+0x212>
 800335a:	2500      	movs	r5, #0
 800335c:	f104 0619 	add.w	r6, r4, #25
 8003360:	e7f5      	b.n	800334e <_printf_i+0x22e>
 8003362:	bf00      	nop
 8003364:	080073ce 	.word	0x080073ce
 8003368:	080073df 	.word	0x080073df

0800336c <_scanf_float>:
 800336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003370:	b087      	sub	sp, #28
 8003372:	4617      	mov	r7, r2
 8003374:	9303      	str	r3, [sp, #12]
 8003376:	688b      	ldr	r3, [r1, #8]
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800337e:	bf83      	ittte	hi
 8003380:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003384:	195b      	addhi	r3, r3, r5
 8003386:	9302      	strhi	r3, [sp, #8]
 8003388:	2300      	movls	r3, #0
 800338a:	bf86      	itte	hi
 800338c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003390:	608b      	strhi	r3, [r1, #8]
 8003392:	9302      	strls	r3, [sp, #8]
 8003394:	680b      	ldr	r3, [r1, #0]
 8003396:	468b      	mov	fp, r1
 8003398:	2500      	movs	r5, #0
 800339a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800339e:	f84b 3b1c 	str.w	r3, [fp], #28
 80033a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80033a6:	4680      	mov	r8, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	465e      	mov	r6, fp
 80033ac:	46aa      	mov	sl, r5
 80033ae:	46a9      	mov	r9, r5
 80033b0:	9501      	str	r5, [sp, #4]
 80033b2:	68a2      	ldr	r2, [r4, #8]
 80033b4:	b152      	cbz	r2, 80033cc <_scanf_float+0x60>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b4e      	cmp	r3, #78	; 0x4e
 80033bc:	d864      	bhi.n	8003488 <_scanf_float+0x11c>
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d83c      	bhi.n	800343c <_scanf_float+0xd0>
 80033c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80033c6:	b2c8      	uxtb	r0, r1
 80033c8:	280e      	cmp	r0, #14
 80033ca:	d93a      	bls.n	8003442 <_scanf_float+0xd6>
 80033cc:	f1b9 0f00 	cmp.w	r9, #0
 80033d0:	d003      	beq.n	80033da <_scanf_float+0x6e>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033de:	f1ba 0f01 	cmp.w	sl, #1
 80033e2:	f200 8113 	bhi.w	800360c <_scanf_float+0x2a0>
 80033e6:	455e      	cmp	r6, fp
 80033e8:	f200 8105 	bhi.w	80035f6 <_scanf_float+0x28a>
 80033ec:	2501      	movs	r5, #1
 80033ee:	4628      	mov	r0, r5
 80033f0:	b007      	add	sp, #28
 80033f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80033fa:	2a0d      	cmp	r2, #13
 80033fc:	d8e6      	bhi.n	80033cc <_scanf_float+0x60>
 80033fe:	a101      	add	r1, pc, #4	; (adr r1, 8003404 <_scanf_float+0x98>)
 8003400:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003404:	08003543 	.word	0x08003543
 8003408:	080033cd 	.word	0x080033cd
 800340c:	080033cd 	.word	0x080033cd
 8003410:	080033cd 	.word	0x080033cd
 8003414:	080035a3 	.word	0x080035a3
 8003418:	0800357b 	.word	0x0800357b
 800341c:	080033cd 	.word	0x080033cd
 8003420:	080033cd 	.word	0x080033cd
 8003424:	08003551 	.word	0x08003551
 8003428:	080033cd 	.word	0x080033cd
 800342c:	080033cd 	.word	0x080033cd
 8003430:	080033cd 	.word	0x080033cd
 8003434:	080033cd 	.word	0x080033cd
 8003438:	08003509 	.word	0x08003509
 800343c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003440:	e7db      	b.n	80033fa <_scanf_float+0x8e>
 8003442:	290e      	cmp	r1, #14
 8003444:	d8c2      	bhi.n	80033cc <_scanf_float+0x60>
 8003446:	a001      	add	r0, pc, #4	; (adr r0, 800344c <_scanf_float+0xe0>)
 8003448:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800344c:	080034fb 	.word	0x080034fb
 8003450:	080033cd 	.word	0x080033cd
 8003454:	080034fb 	.word	0x080034fb
 8003458:	0800358f 	.word	0x0800358f
 800345c:	080033cd 	.word	0x080033cd
 8003460:	080034a9 	.word	0x080034a9
 8003464:	080034e5 	.word	0x080034e5
 8003468:	080034e5 	.word	0x080034e5
 800346c:	080034e5 	.word	0x080034e5
 8003470:	080034e5 	.word	0x080034e5
 8003474:	080034e5 	.word	0x080034e5
 8003478:	080034e5 	.word	0x080034e5
 800347c:	080034e5 	.word	0x080034e5
 8003480:	080034e5 	.word	0x080034e5
 8003484:	080034e5 	.word	0x080034e5
 8003488:	2b6e      	cmp	r3, #110	; 0x6e
 800348a:	d809      	bhi.n	80034a0 <_scanf_float+0x134>
 800348c:	2b60      	cmp	r3, #96	; 0x60
 800348e:	d8b2      	bhi.n	80033f6 <_scanf_float+0x8a>
 8003490:	2b54      	cmp	r3, #84	; 0x54
 8003492:	d077      	beq.n	8003584 <_scanf_float+0x218>
 8003494:	2b59      	cmp	r3, #89	; 0x59
 8003496:	d199      	bne.n	80033cc <_scanf_float+0x60>
 8003498:	2d07      	cmp	r5, #7
 800349a:	d197      	bne.n	80033cc <_scanf_float+0x60>
 800349c:	2508      	movs	r5, #8
 800349e:	e029      	b.n	80034f4 <_scanf_float+0x188>
 80034a0:	2b74      	cmp	r3, #116	; 0x74
 80034a2:	d06f      	beq.n	8003584 <_scanf_float+0x218>
 80034a4:	2b79      	cmp	r3, #121	; 0x79
 80034a6:	e7f6      	b.n	8003496 <_scanf_float+0x12a>
 80034a8:	6821      	ldr	r1, [r4, #0]
 80034aa:	05c8      	lsls	r0, r1, #23
 80034ac:	d51a      	bpl.n	80034e4 <_scanf_float+0x178>
 80034ae:	9b02      	ldr	r3, [sp, #8]
 80034b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80034b4:	6021      	str	r1, [r4, #0]
 80034b6:	f109 0901 	add.w	r9, r9, #1
 80034ba:	b11b      	cbz	r3, 80034c4 <_scanf_float+0x158>
 80034bc:	3b01      	subs	r3, #1
 80034be:	3201      	adds	r2, #1
 80034c0:	9302      	str	r3, [sp, #8]
 80034c2:	60a2      	str	r2, [r4, #8]
 80034c4:	68a3      	ldr	r3, [r4, #8]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	60a3      	str	r3, [r4, #8]
 80034ca:	6923      	ldr	r3, [r4, #16]
 80034cc:	3301      	adds	r3, #1
 80034ce:	6123      	str	r3, [r4, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	f340 8084 	ble.w	80035e4 <_scanf_float+0x278>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	3301      	adds	r3, #1
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	e766      	b.n	80033b2 <_scanf_float+0x46>
 80034e4:	eb1a 0f05 	cmn.w	sl, r5
 80034e8:	f47f af70 	bne.w	80033cc <_scanf_float+0x60>
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80034f2:	6022      	str	r2, [r4, #0]
 80034f4:	f806 3b01 	strb.w	r3, [r6], #1
 80034f8:	e7e4      	b.n	80034c4 <_scanf_float+0x158>
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	0610      	lsls	r0, r2, #24
 80034fe:	f57f af65 	bpl.w	80033cc <_scanf_float+0x60>
 8003502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003506:	e7f4      	b.n	80034f2 <_scanf_float+0x186>
 8003508:	f1ba 0f00 	cmp.w	sl, #0
 800350c:	d10e      	bne.n	800352c <_scanf_float+0x1c0>
 800350e:	f1b9 0f00 	cmp.w	r9, #0
 8003512:	d10e      	bne.n	8003532 <_scanf_float+0x1c6>
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800351a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800351e:	d108      	bne.n	8003532 <_scanf_float+0x1c6>
 8003520:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003524:	6022      	str	r2, [r4, #0]
 8003526:	f04f 0a01 	mov.w	sl, #1
 800352a:	e7e3      	b.n	80034f4 <_scanf_float+0x188>
 800352c:	f1ba 0f02 	cmp.w	sl, #2
 8003530:	d055      	beq.n	80035de <_scanf_float+0x272>
 8003532:	2d01      	cmp	r5, #1
 8003534:	d002      	beq.n	800353c <_scanf_float+0x1d0>
 8003536:	2d04      	cmp	r5, #4
 8003538:	f47f af48 	bne.w	80033cc <_scanf_float+0x60>
 800353c:	3501      	adds	r5, #1
 800353e:	b2ed      	uxtb	r5, r5
 8003540:	e7d8      	b.n	80034f4 <_scanf_float+0x188>
 8003542:	f1ba 0f01 	cmp.w	sl, #1
 8003546:	f47f af41 	bne.w	80033cc <_scanf_float+0x60>
 800354a:	f04f 0a02 	mov.w	sl, #2
 800354e:	e7d1      	b.n	80034f4 <_scanf_float+0x188>
 8003550:	b97d      	cbnz	r5, 8003572 <_scanf_float+0x206>
 8003552:	f1b9 0f00 	cmp.w	r9, #0
 8003556:	f47f af3c 	bne.w	80033d2 <_scanf_float+0x66>
 800355a:	6822      	ldr	r2, [r4, #0]
 800355c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003560:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003564:	f47f af39 	bne.w	80033da <_scanf_float+0x6e>
 8003568:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800356c:	6022      	str	r2, [r4, #0]
 800356e:	2501      	movs	r5, #1
 8003570:	e7c0      	b.n	80034f4 <_scanf_float+0x188>
 8003572:	2d03      	cmp	r5, #3
 8003574:	d0e2      	beq.n	800353c <_scanf_float+0x1d0>
 8003576:	2d05      	cmp	r5, #5
 8003578:	e7de      	b.n	8003538 <_scanf_float+0x1cc>
 800357a:	2d02      	cmp	r5, #2
 800357c:	f47f af26 	bne.w	80033cc <_scanf_float+0x60>
 8003580:	2503      	movs	r5, #3
 8003582:	e7b7      	b.n	80034f4 <_scanf_float+0x188>
 8003584:	2d06      	cmp	r5, #6
 8003586:	f47f af21 	bne.w	80033cc <_scanf_float+0x60>
 800358a:	2507      	movs	r5, #7
 800358c:	e7b2      	b.n	80034f4 <_scanf_float+0x188>
 800358e:	6822      	ldr	r2, [r4, #0]
 8003590:	0591      	lsls	r1, r2, #22
 8003592:	f57f af1b 	bpl.w	80033cc <_scanf_float+0x60>
 8003596:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800359a:	6022      	str	r2, [r4, #0]
 800359c:	f8cd 9004 	str.w	r9, [sp, #4]
 80035a0:	e7a8      	b.n	80034f4 <_scanf_float+0x188>
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80035a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80035ac:	d006      	beq.n	80035bc <_scanf_float+0x250>
 80035ae:	0550      	lsls	r0, r2, #21
 80035b0:	f57f af0c 	bpl.w	80033cc <_scanf_float+0x60>
 80035b4:	f1b9 0f00 	cmp.w	r9, #0
 80035b8:	f43f af0f 	beq.w	80033da <_scanf_float+0x6e>
 80035bc:	0591      	lsls	r1, r2, #22
 80035be:	bf58      	it	pl
 80035c0:	9901      	ldrpl	r1, [sp, #4]
 80035c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035c6:	bf58      	it	pl
 80035c8:	eba9 0101 	subpl.w	r1, r9, r1
 80035cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80035d0:	bf58      	it	pl
 80035d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80035d6:	6022      	str	r2, [r4, #0]
 80035d8:	f04f 0900 	mov.w	r9, #0
 80035dc:	e78a      	b.n	80034f4 <_scanf_float+0x188>
 80035de:	f04f 0a03 	mov.w	sl, #3
 80035e2:	e787      	b.n	80034f4 <_scanf_float+0x188>
 80035e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80035e8:	4639      	mov	r1, r7
 80035ea:	4640      	mov	r0, r8
 80035ec:	4798      	blx	r3
 80035ee:	2800      	cmp	r0, #0
 80035f0:	f43f aedf 	beq.w	80033b2 <_scanf_float+0x46>
 80035f4:	e6ea      	b.n	80033cc <_scanf_float+0x60>
 80035f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80035fe:	463a      	mov	r2, r7
 8003600:	4640      	mov	r0, r8
 8003602:	4798      	blx	r3
 8003604:	6923      	ldr	r3, [r4, #16]
 8003606:	3b01      	subs	r3, #1
 8003608:	6123      	str	r3, [r4, #16]
 800360a:	e6ec      	b.n	80033e6 <_scanf_float+0x7a>
 800360c:	1e6b      	subs	r3, r5, #1
 800360e:	2b06      	cmp	r3, #6
 8003610:	d825      	bhi.n	800365e <_scanf_float+0x2f2>
 8003612:	2d02      	cmp	r5, #2
 8003614:	d836      	bhi.n	8003684 <_scanf_float+0x318>
 8003616:	455e      	cmp	r6, fp
 8003618:	f67f aee8 	bls.w	80033ec <_scanf_float+0x80>
 800361c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003620:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003624:	463a      	mov	r2, r7
 8003626:	4640      	mov	r0, r8
 8003628:	4798      	blx	r3
 800362a:	6923      	ldr	r3, [r4, #16]
 800362c:	3b01      	subs	r3, #1
 800362e:	6123      	str	r3, [r4, #16]
 8003630:	e7f1      	b.n	8003616 <_scanf_float+0x2aa>
 8003632:	9802      	ldr	r0, [sp, #8]
 8003634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003638:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800363c:	9002      	str	r0, [sp, #8]
 800363e:	463a      	mov	r2, r7
 8003640:	4640      	mov	r0, r8
 8003642:	4798      	blx	r3
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	3b01      	subs	r3, #1
 8003648:	6123      	str	r3, [r4, #16]
 800364a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800364e:	fa5f fa8a 	uxtb.w	sl, sl
 8003652:	f1ba 0f02 	cmp.w	sl, #2
 8003656:	d1ec      	bne.n	8003632 <_scanf_float+0x2c6>
 8003658:	3d03      	subs	r5, #3
 800365a:	b2ed      	uxtb	r5, r5
 800365c:	1b76      	subs	r6, r6, r5
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	05da      	lsls	r2, r3, #23
 8003662:	d52f      	bpl.n	80036c4 <_scanf_float+0x358>
 8003664:	055b      	lsls	r3, r3, #21
 8003666:	d510      	bpl.n	800368a <_scanf_float+0x31e>
 8003668:	455e      	cmp	r6, fp
 800366a:	f67f aebf 	bls.w	80033ec <_scanf_float+0x80>
 800366e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003676:	463a      	mov	r2, r7
 8003678:	4640      	mov	r0, r8
 800367a:	4798      	blx	r3
 800367c:	6923      	ldr	r3, [r4, #16]
 800367e:	3b01      	subs	r3, #1
 8003680:	6123      	str	r3, [r4, #16]
 8003682:	e7f1      	b.n	8003668 <_scanf_float+0x2fc>
 8003684:	46aa      	mov	sl, r5
 8003686:	9602      	str	r6, [sp, #8]
 8003688:	e7df      	b.n	800364a <_scanf_float+0x2de>
 800368a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800368e:	6923      	ldr	r3, [r4, #16]
 8003690:	2965      	cmp	r1, #101	; 0x65
 8003692:	f103 33ff 	add.w	r3, r3, #4294967295
 8003696:	f106 35ff 	add.w	r5, r6, #4294967295
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	d00c      	beq.n	80036b8 <_scanf_float+0x34c>
 800369e:	2945      	cmp	r1, #69	; 0x45
 80036a0:	d00a      	beq.n	80036b8 <_scanf_float+0x34c>
 80036a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036a6:	463a      	mov	r2, r7
 80036a8:	4640      	mov	r0, r8
 80036aa:	4798      	blx	r3
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	1eb5      	subs	r5, r6, #2
 80036b6:	6123      	str	r3, [r4, #16]
 80036b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036bc:	463a      	mov	r2, r7
 80036be:	4640      	mov	r0, r8
 80036c0:	4798      	blx	r3
 80036c2:	462e      	mov	r6, r5
 80036c4:	6825      	ldr	r5, [r4, #0]
 80036c6:	f015 0510 	ands.w	r5, r5, #16
 80036ca:	d158      	bne.n	800377e <_scanf_float+0x412>
 80036cc:	7035      	strb	r5, [r6, #0]
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d8:	d11c      	bne.n	8003714 <_scanf_float+0x3a8>
 80036da:	9b01      	ldr	r3, [sp, #4]
 80036dc:	454b      	cmp	r3, r9
 80036de:	eba3 0209 	sub.w	r2, r3, r9
 80036e2:	d124      	bne.n	800372e <_scanf_float+0x3c2>
 80036e4:	2200      	movs	r2, #0
 80036e6:	4659      	mov	r1, fp
 80036e8:	4640      	mov	r0, r8
 80036ea:	f000 fe9b 	bl	8004424 <_strtod_r>
 80036ee:	9b03      	ldr	r3, [sp, #12]
 80036f0:	6821      	ldr	r1, [r4, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f011 0f02 	tst.w	r1, #2
 80036f8:	ec57 6b10 	vmov	r6, r7, d0
 80036fc:	f103 0204 	add.w	r2, r3, #4
 8003700:	d020      	beq.n	8003744 <_scanf_float+0x3d8>
 8003702:	9903      	ldr	r1, [sp, #12]
 8003704:	600a      	str	r2, [r1, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e9c3 6700 	strd	r6, r7, [r3]
 800370c:	68e3      	ldr	r3, [r4, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60e3      	str	r3, [r4, #12]
 8003712:	e66c      	b.n	80033ee <_scanf_float+0x82>
 8003714:	9b04      	ldr	r3, [sp, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0e4      	beq.n	80036e4 <_scanf_float+0x378>
 800371a:	9905      	ldr	r1, [sp, #20]
 800371c:	230a      	movs	r3, #10
 800371e:	462a      	mov	r2, r5
 8003720:	3101      	adds	r1, #1
 8003722:	4640      	mov	r0, r8
 8003724:	f000 ff08 	bl	8004538 <_strtol_r>
 8003728:	9b04      	ldr	r3, [sp, #16]
 800372a:	9e05      	ldr	r6, [sp, #20]
 800372c:	1ac2      	subs	r2, r0, r3
 800372e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003732:	429e      	cmp	r6, r3
 8003734:	bf28      	it	cs
 8003736:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800373a:	4912      	ldr	r1, [pc, #72]	; (8003784 <_scanf_float+0x418>)
 800373c:	4630      	mov	r0, r6
 800373e:	f000 f82b 	bl	8003798 <siprintf>
 8003742:	e7cf      	b.n	80036e4 <_scanf_float+0x378>
 8003744:	f011 0f04 	tst.w	r1, #4
 8003748:	9903      	ldr	r1, [sp, #12]
 800374a:	600a      	str	r2, [r1, #0]
 800374c:	d1db      	bne.n	8003706 <_scanf_float+0x39a>
 800374e:	f8d3 8000 	ldr.w	r8, [r3]
 8003752:	ee10 2a10 	vmov	r2, s0
 8003756:	ee10 0a10 	vmov	r0, s0
 800375a:	463b      	mov	r3, r7
 800375c:	4639      	mov	r1, r7
 800375e:	f7fd f9e5 	bl	8000b2c <__aeabi_dcmpun>
 8003762:	b128      	cbz	r0, 8003770 <_scanf_float+0x404>
 8003764:	4808      	ldr	r0, [pc, #32]	; (8003788 <_scanf_float+0x41c>)
 8003766:	f000 f811 	bl	800378c <nanf>
 800376a:	ed88 0a00 	vstr	s0, [r8]
 800376e:	e7cd      	b.n	800370c <_scanf_float+0x3a0>
 8003770:	4630      	mov	r0, r6
 8003772:	4639      	mov	r1, r7
 8003774:	f7fd fa38 	bl	8000be8 <__aeabi_d2f>
 8003778:	f8c8 0000 	str.w	r0, [r8]
 800377c:	e7c6      	b.n	800370c <_scanf_float+0x3a0>
 800377e:	2500      	movs	r5, #0
 8003780:	e635      	b.n	80033ee <_scanf_float+0x82>
 8003782:	bf00      	nop
 8003784:	080073f0 	.word	0x080073f0
 8003788:	08007808 	.word	0x08007808

0800378c <nanf>:
 800378c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003794 <nanf+0x8>
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	7fc00000 	.word	0x7fc00000

08003798 <siprintf>:
 8003798:	b40e      	push	{r1, r2, r3}
 800379a:	b500      	push	{lr}
 800379c:	b09c      	sub	sp, #112	; 0x70
 800379e:	ab1d      	add	r3, sp, #116	; 0x74
 80037a0:	9002      	str	r0, [sp, #8]
 80037a2:	9006      	str	r0, [sp, #24]
 80037a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037a8:	4809      	ldr	r0, [pc, #36]	; (80037d0 <siprintf+0x38>)
 80037aa:	9107      	str	r1, [sp, #28]
 80037ac:	9104      	str	r1, [sp, #16]
 80037ae:	4909      	ldr	r1, [pc, #36]	; (80037d4 <siprintf+0x3c>)
 80037b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b4:	9105      	str	r1, [sp, #20]
 80037b6:	6800      	ldr	r0, [r0, #0]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	a902      	add	r1, sp, #8
 80037bc:	f002 fea4 	bl	8006508 <_svfiprintf_r>
 80037c0:	9b02      	ldr	r3, [sp, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	b01c      	add	sp, #112	; 0x70
 80037c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037cc:	b003      	add	sp, #12
 80037ce:	4770      	bx	lr
 80037d0:	20000004 	.word	0x20000004
 80037d4:	ffff0208 	.word	0xffff0208

080037d8 <sulp>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4604      	mov	r4, r0
 80037dc:	460d      	mov	r5, r1
 80037de:	ec45 4b10 	vmov	d0, r4, r5
 80037e2:	4616      	mov	r6, r2
 80037e4:	f002 fc2c 	bl	8006040 <__ulp>
 80037e8:	ec51 0b10 	vmov	r0, r1, d0
 80037ec:	b17e      	cbz	r6, 800380e <sulp+0x36>
 80037ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80037f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dd09      	ble.n	800380e <sulp+0x36>
 80037fa:	051b      	lsls	r3, r3, #20
 80037fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003800:	2400      	movs	r4, #0
 8003802:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003806:	4622      	mov	r2, r4
 8003808:	462b      	mov	r3, r5
 800380a:	f7fc fef5 	bl	80005f8 <__aeabi_dmul>
 800380e:	bd70      	pop	{r4, r5, r6, pc}

08003810 <_strtod_l>:
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	b0a3      	sub	sp, #140	; 0x8c
 8003816:	461f      	mov	r7, r3
 8003818:	2300      	movs	r3, #0
 800381a:	931e      	str	r3, [sp, #120]	; 0x78
 800381c:	4ba4      	ldr	r3, [pc, #656]	; (8003ab0 <_strtod_l+0x2a0>)
 800381e:	9219      	str	r2, [sp, #100]	; 0x64
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	9307      	str	r3, [sp, #28]
 8003824:	4604      	mov	r4, r0
 8003826:	4618      	mov	r0, r3
 8003828:	4688      	mov	r8, r1
 800382a:	f7fc fcd1 	bl	80001d0 <strlen>
 800382e:	f04f 0a00 	mov.w	sl, #0
 8003832:	4605      	mov	r5, r0
 8003834:	f04f 0b00 	mov.w	fp, #0
 8003838:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800383c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	2a2b      	cmp	r2, #43	; 0x2b
 8003842:	d04c      	beq.n	80038de <_strtod_l+0xce>
 8003844:	d839      	bhi.n	80038ba <_strtod_l+0xaa>
 8003846:	2a0d      	cmp	r2, #13
 8003848:	d832      	bhi.n	80038b0 <_strtod_l+0xa0>
 800384a:	2a08      	cmp	r2, #8
 800384c:	d832      	bhi.n	80038b4 <_strtod_l+0xa4>
 800384e:	2a00      	cmp	r2, #0
 8003850:	d03c      	beq.n	80038cc <_strtod_l+0xbc>
 8003852:	2300      	movs	r3, #0
 8003854:	930e      	str	r3, [sp, #56]	; 0x38
 8003856:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003858:	7833      	ldrb	r3, [r6, #0]
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	f040 80b4 	bne.w	80039c8 <_strtod_l+0x1b8>
 8003860:	7873      	ldrb	r3, [r6, #1]
 8003862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003866:	2b58      	cmp	r3, #88	; 0x58
 8003868:	d16c      	bne.n	8003944 <_strtod_l+0x134>
 800386a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	ab1e      	add	r3, sp, #120	; 0x78
 8003870:	9702      	str	r7, [sp, #8]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4a8f      	ldr	r2, [pc, #572]	; (8003ab4 <_strtod_l+0x2a4>)
 8003876:	ab1f      	add	r3, sp, #124	; 0x7c
 8003878:	a91d      	add	r1, sp, #116	; 0x74
 800387a:	4620      	mov	r0, r4
 800387c:	f001 fd40 	bl	8005300 <__gethex>
 8003880:	f010 0707 	ands.w	r7, r0, #7
 8003884:	4605      	mov	r5, r0
 8003886:	d005      	beq.n	8003894 <_strtod_l+0x84>
 8003888:	2f06      	cmp	r7, #6
 800388a:	d12a      	bne.n	80038e2 <_strtod_l+0xd2>
 800388c:	3601      	adds	r6, #1
 800388e:	2300      	movs	r3, #0
 8003890:	961d      	str	r6, [sp, #116]	; 0x74
 8003892:	930e      	str	r3, [sp, #56]	; 0x38
 8003894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 8596 	bne.w	80043c8 <_strtod_l+0xbb8>
 800389c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800389e:	b1db      	cbz	r3, 80038d8 <_strtod_l+0xc8>
 80038a0:	4652      	mov	r2, sl
 80038a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80038a6:	ec43 2b10 	vmov	d0, r2, r3
 80038aa:	b023      	add	sp, #140	; 0x8c
 80038ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b0:	2a20      	cmp	r2, #32
 80038b2:	d1ce      	bne.n	8003852 <_strtod_l+0x42>
 80038b4:	3301      	adds	r3, #1
 80038b6:	931d      	str	r3, [sp, #116]	; 0x74
 80038b8:	e7c0      	b.n	800383c <_strtod_l+0x2c>
 80038ba:	2a2d      	cmp	r2, #45	; 0x2d
 80038bc:	d1c9      	bne.n	8003852 <_strtod_l+0x42>
 80038be:	2201      	movs	r2, #1
 80038c0:	920e      	str	r2, [sp, #56]	; 0x38
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	921d      	str	r2, [sp, #116]	; 0x74
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1c4      	bne.n	8003856 <_strtod_l+0x46>
 80038cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 8576 	bne.w	80043c4 <_strtod_l+0xbb4>
 80038d8:	4652      	mov	r2, sl
 80038da:	465b      	mov	r3, fp
 80038dc:	e7e3      	b.n	80038a6 <_strtod_l+0x96>
 80038de:	2200      	movs	r2, #0
 80038e0:	e7ee      	b.n	80038c0 <_strtod_l+0xb0>
 80038e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80038e4:	b13a      	cbz	r2, 80038f6 <_strtod_l+0xe6>
 80038e6:	2135      	movs	r1, #53	; 0x35
 80038e8:	a820      	add	r0, sp, #128	; 0x80
 80038ea:	f002 fcb4 	bl	8006256 <__copybits>
 80038ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80038f0:	4620      	mov	r0, r4
 80038f2:	f002 f879 	bl	80059e8 <_Bfree>
 80038f6:	3f01      	subs	r7, #1
 80038f8:	2f05      	cmp	r7, #5
 80038fa:	d807      	bhi.n	800390c <_strtod_l+0xfc>
 80038fc:	e8df f007 	tbb	[pc, r7]
 8003900:	1d180b0e 	.word	0x1d180b0e
 8003904:	030e      	.short	0x030e
 8003906:	f04f 0b00 	mov.w	fp, #0
 800390a:	46da      	mov	sl, fp
 800390c:	0728      	lsls	r0, r5, #28
 800390e:	d5c1      	bpl.n	8003894 <_strtod_l+0x84>
 8003910:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003914:	e7be      	b.n	8003894 <_strtod_l+0x84>
 8003916:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800391a:	e7f7      	b.n	800390c <_strtod_l+0xfc>
 800391c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8003920:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003922:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003926:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800392a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800392e:	e7ed      	b.n	800390c <_strtod_l+0xfc>
 8003930:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003ab8 <_strtod_l+0x2a8>
 8003934:	f04f 0a00 	mov.w	sl, #0
 8003938:	e7e8      	b.n	800390c <_strtod_l+0xfc>
 800393a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800393e:	f04f 3aff 	mov.w	sl, #4294967295
 8003942:	e7e3      	b.n	800390c <_strtod_l+0xfc>
 8003944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	921d      	str	r2, [sp, #116]	; 0x74
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d0f9      	beq.n	8003944 <_strtod_l+0x134>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d09f      	beq.n	8003894 <_strtod_l+0x84>
 8003954:	2301      	movs	r3, #1
 8003956:	f04f 0900 	mov.w	r9, #0
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800395e:	930a      	str	r3, [sp, #40]	; 0x28
 8003960:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003964:	464f      	mov	r7, r9
 8003966:	220a      	movs	r2, #10
 8003968:	981d      	ldr	r0, [sp, #116]	; 0x74
 800396a:	7806      	ldrb	r6, [r0, #0]
 800396c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	2909      	cmp	r1, #9
 8003974:	d92a      	bls.n	80039cc <_strtod_l+0x1bc>
 8003976:	9907      	ldr	r1, [sp, #28]
 8003978:	462a      	mov	r2, r5
 800397a:	f002 fedd 	bl	8006738 <strncmp>
 800397e:	b398      	cbz	r0, 80039e8 <_strtod_l+0x1d8>
 8003980:	2000      	movs	r0, #0
 8003982:	4633      	mov	r3, r6
 8003984:	463d      	mov	r5, r7
 8003986:	9007      	str	r0, [sp, #28]
 8003988:	4602      	mov	r2, r0
 800398a:	2b65      	cmp	r3, #101	; 0x65
 800398c:	d001      	beq.n	8003992 <_strtod_l+0x182>
 800398e:	2b45      	cmp	r3, #69	; 0x45
 8003990:	d118      	bne.n	80039c4 <_strtod_l+0x1b4>
 8003992:	b91d      	cbnz	r5, 800399c <_strtod_l+0x18c>
 8003994:	9b04      	ldr	r3, [sp, #16]
 8003996:	4303      	orrs	r3, r0
 8003998:	d098      	beq.n	80038cc <_strtod_l+0xbc>
 800399a:	2500      	movs	r5, #0
 800399c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80039a0:	f108 0301 	add.w	r3, r8, #1
 80039a4:	931d      	str	r3, [sp, #116]	; 0x74
 80039a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039aa:	2b2b      	cmp	r3, #43	; 0x2b
 80039ac:	d075      	beq.n	8003a9a <_strtod_l+0x28a>
 80039ae:	2b2d      	cmp	r3, #45	; 0x2d
 80039b0:	d07b      	beq.n	8003aaa <_strtod_l+0x29a>
 80039b2:	f04f 0c00 	mov.w	ip, #0
 80039b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80039ba:	2909      	cmp	r1, #9
 80039bc:	f240 8082 	bls.w	8003ac4 <_strtod_l+0x2b4>
 80039c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80039c4:	2600      	movs	r6, #0
 80039c6:	e09d      	b.n	8003b04 <_strtod_l+0x2f4>
 80039c8:	2300      	movs	r3, #0
 80039ca:	e7c4      	b.n	8003956 <_strtod_l+0x146>
 80039cc:	2f08      	cmp	r7, #8
 80039ce:	bfd8      	it	le
 80039d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80039d2:	f100 0001 	add.w	r0, r0, #1
 80039d6:	bfda      	itte	le
 80039d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80039dc:	9309      	strle	r3, [sp, #36]	; 0x24
 80039de:	fb02 3909 	mlagt	r9, r2, r9, r3
 80039e2:	3701      	adds	r7, #1
 80039e4:	901d      	str	r0, [sp, #116]	; 0x74
 80039e6:	e7bf      	b.n	8003968 <_strtod_l+0x158>
 80039e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80039ea:	195a      	adds	r2, r3, r5
 80039ec:	921d      	str	r2, [sp, #116]	; 0x74
 80039ee:	5d5b      	ldrb	r3, [r3, r5]
 80039f0:	2f00      	cmp	r7, #0
 80039f2:	d037      	beq.n	8003a64 <_strtod_l+0x254>
 80039f4:	9007      	str	r0, [sp, #28]
 80039f6:	463d      	mov	r5, r7
 80039f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80039fc:	2a09      	cmp	r2, #9
 80039fe:	d912      	bls.n	8003a26 <_strtod_l+0x216>
 8003a00:	2201      	movs	r2, #1
 8003a02:	e7c2      	b.n	800398a <_strtod_l+0x17a>
 8003a04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	921d      	str	r2, [sp, #116]	; 0x74
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	2b30      	cmp	r3, #48	; 0x30
 8003a10:	d0f8      	beq.n	8003a04 <_strtod_l+0x1f4>
 8003a12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003a16:	2a08      	cmp	r2, #8
 8003a18:	f200 84db 	bhi.w	80043d2 <_strtod_l+0xbc2>
 8003a1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003a1e:	9007      	str	r0, [sp, #28]
 8003a20:	2000      	movs	r0, #0
 8003a22:	920a      	str	r2, [sp, #40]	; 0x28
 8003a24:	4605      	mov	r5, r0
 8003a26:	3b30      	subs	r3, #48	; 0x30
 8003a28:	f100 0201 	add.w	r2, r0, #1
 8003a2c:	d014      	beq.n	8003a58 <_strtod_l+0x248>
 8003a2e:	9907      	ldr	r1, [sp, #28]
 8003a30:	4411      	add	r1, r2
 8003a32:	9107      	str	r1, [sp, #28]
 8003a34:	462a      	mov	r2, r5
 8003a36:	eb00 0e05 	add.w	lr, r0, r5
 8003a3a:	210a      	movs	r1, #10
 8003a3c:	4572      	cmp	r2, lr
 8003a3e:	d113      	bne.n	8003a68 <_strtod_l+0x258>
 8003a40:	182a      	adds	r2, r5, r0
 8003a42:	2a08      	cmp	r2, #8
 8003a44:	f105 0501 	add.w	r5, r5, #1
 8003a48:	4405      	add	r5, r0
 8003a4a:	dc1c      	bgt.n	8003a86 <_strtod_l+0x276>
 8003a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a4e:	220a      	movs	r2, #10
 8003a50:	fb02 3301 	mla	r3, r2, r1, r3
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
 8003a56:	2200      	movs	r2, #0
 8003a58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a5a:	1c59      	adds	r1, r3, #1
 8003a5c:	911d      	str	r1, [sp, #116]	; 0x74
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	4610      	mov	r0, r2
 8003a62:	e7c9      	b.n	80039f8 <_strtod_l+0x1e8>
 8003a64:	4638      	mov	r0, r7
 8003a66:	e7d2      	b.n	8003a0e <_strtod_l+0x1fe>
 8003a68:	2a08      	cmp	r2, #8
 8003a6a:	dc04      	bgt.n	8003a76 <_strtod_l+0x266>
 8003a6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003a6e:	434e      	muls	r6, r1
 8003a70:	9609      	str	r6, [sp, #36]	; 0x24
 8003a72:	3201      	adds	r2, #1
 8003a74:	e7e2      	b.n	8003a3c <_strtod_l+0x22c>
 8003a76:	f102 0c01 	add.w	ip, r2, #1
 8003a7a:	f1bc 0f10 	cmp.w	ip, #16
 8003a7e:	bfd8      	it	le
 8003a80:	fb01 f909 	mulle.w	r9, r1, r9
 8003a84:	e7f5      	b.n	8003a72 <_strtod_l+0x262>
 8003a86:	2d10      	cmp	r5, #16
 8003a88:	bfdc      	itt	le
 8003a8a:	220a      	movle	r2, #10
 8003a8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8003a90:	e7e1      	b.n	8003a56 <_strtod_l+0x246>
 8003a92:	2300      	movs	r3, #0
 8003a94:	9307      	str	r3, [sp, #28]
 8003a96:	2201      	movs	r2, #1
 8003a98:	e77c      	b.n	8003994 <_strtod_l+0x184>
 8003a9a:	f04f 0c00 	mov.w	ip, #0
 8003a9e:	f108 0302 	add.w	r3, r8, #2
 8003aa2:	931d      	str	r3, [sp, #116]	; 0x74
 8003aa4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8003aa8:	e785      	b.n	80039b6 <_strtod_l+0x1a6>
 8003aaa:	f04f 0c01 	mov.w	ip, #1
 8003aae:	e7f6      	b.n	8003a9e <_strtod_l+0x28e>
 8003ab0:	08007648 	.word	0x08007648
 8003ab4:	080073f8 	.word	0x080073f8
 8003ab8:	7ff00000 	.word	0x7ff00000
 8003abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003abe:	1c59      	adds	r1, r3, #1
 8003ac0:	911d      	str	r1, [sp, #116]	; 0x74
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d0f9      	beq.n	8003abc <_strtod_l+0x2ac>
 8003ac8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003acc:	2908      	cmp	r1, #8
 8003ace:	f63f af79 	bhi.w	80039c4 <_strtod_l+0x1b4>
 8003ad2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ad8:	9308      	str	r3, [sp, #32]
 8003ada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003adc:	1c59      	adds	r1, r3, #1
 8003ade:	911d      	str	r1, [sp, #116]	; 0x74
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003ae6:	2e09      	cmp	r6, #9
 8003ae8:	d937      	bls.n	8003b5a <_strtod_l+0x34a>
 8003aea:	9e08      	ldr	r6, [sp, #32]
 8003aec:	1b89      	subs	r1, r1, r6
 8003aee:	2908      	cmp	r1, #8
 8003af0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003af4:	dc02      	bgt.n	8003afc <_strtod_l+0x2ec>
 8003af6:	4576      	cmp	r6, lr
 8003af8:	bfa8      	it	ge
 8003afa:	4676      	movge	r6, lr
 8003afc:	f1bc 0f00 	cmp.w	ip, #0
 8003b00:	d000      	beq.n	8003b04 <_strtod_l+0x2f4>
 8003b02:	4276      	negs	r6, r6
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	d14f      	bne.n	8003ba8 <_strtod_l+0x398>
 8003b08:	9904      	ldr	r1, [sp, #16]
 8003b0a:	4301      	orrs	r1, r0
 8003b0c:	f47f aec2 	bne.w	8003894 <_strtod_l+0x84>
 8003b10:	2a00      	cmp	r2, #0
 8003b12:	f47f aedb 	bne.w	80038cc <_strtod_l+0xbc>
 8003b16:	2b69      	cmp	r3, #105	; 0x69
 8003b18:	d027      	beq.n	8003b6a <_strtod_l+0x35a>
 8003b1a:	dc24      	bgt.n	8003b66 <_strtod_l+0x356>
 8003b1c:	2b49      	cmp	r3, #73	; 0x49
 8003b1e:	d024      	beq.n	8003b6a <_strtod_l+0x35a>
 8003b20:	2b4e      	cmp	r3, #78	; 0x4e
 8003b22:	f47f aed3 	bne.w	80038cc <_strtod_l+0xbc>
 8003b26:	499e      	ldr	r1, [pc, #632]	; (8003da0 <_strtod_l+0x590>)
 8003b28:	a81d      	add	r0, sp, #116	; 0x74
 8003b2a:	f001 fe41 	bl	80057b0 <__match>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	f43f aecc 	beq.w	80038cc <_strtod_l+0xbc>
 8003b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b28      	cmp	r3, #40	; 0x28
 8003b3a:	d12d      	bne.n	8003b98 <_strtod_l+0x388>
 8003b3c:	4999      	ldr	r1, [pc, #612]	; (8003da4 <_strtod_l+0x594>)
 8003b3e:	aa20      	add	r2, sp, #128	; 0x80
 8003b40:	a81d      	add	r0, sp, #116	; 0x74
 8003b42:	f001 fe49 	bl	80057d8 <__hexnan>
 8003b46:	2805      	cmp	r0, #5
 8003b48:	d126      	bne.n	8003b98 <_strtod_l+0x388>
 8003b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8003b50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003b54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003b58:	e69c      	b.n	8003894 <_strtod_l+0x84>
 8003b5a:	210a      	movs	r1, #10
 8003b5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003b60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003b64:	e7b9      	b.n	8003ada <_strtod_l+0x2ca>
 8003b66:	2b6e      	cmp	r3, #110	; 0x6e
 8003b68:	e7db      	b.n	8003b22 <_strtod_l+0x312>
 8003b6a:	498f      	ldr	r1, [pc, #572]	; (8003da8 <_strtod_l+0x598>)
 8003b6c:	a81d      	add	r0, sp, #116	; 0x74
 8003b6e:	f001 fe1f 	bl	80057b0 <__match>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f43f aeaa 	beq.w	80038cc <_strtod_l+0xbc>
 8003b78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b7a:	498c      	ldr	r1, [pc, #560]	; (8003dac <_strtod_l+0x59c>)
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	a81d      	add	r0, sp, #116	; 0x74
 8003b80:	931d      	str	r3, [sp, #116]	; 0x74
 8003b82:	f001 fe15 	bl	80057b0 <__match>
 8003b86:	b910      	cbnz	r0, 8003b8e <_strtod_l+0x37e>
 8003b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	931d      	str	r3, [sp, #116]	; 0x74
 8003b8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8003dbc <_strtod_l+0x5ac>
 8003b92:	f04f 0a00 	mov.w	sl, #0
 8003b96:	e67d      	b.n	8003894 <_strtod_l+0x84>
 8003b98:	4885      	ldr	r0, [pc, #532]	; (8003db0 <_strtod_l+0x5a0>)
 8003b9a:	f002 fdb5 	bl	8006708 <nan>
 8003b9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003ba2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003ba6:	e675      	b.n	8003894 <_strtod_l+0x84>
 8003ba8:	9b07      	ldr	r3, [sp, #28]
 8003baa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bac:	1af3      	subs	r3, r6, r3
 8003bae:	2f00      	cmp	r7, #0
 8003bb0:	bf08      	it	eq
 8003bb2:	462f      	moveq	r7, r5
 8003bb4:	2d10      	cmp	r5, #16
 8003bb6:	9308      	str	r3, [sp, #32]
 8003bb8:	46a8      	mov	r8, r5
 8003bba:	bfa8      	it	ge
 8003bbc:	f04f 0810 	movge.w	r8, #16
 8003bc0:	f7fc fca0 	bl	8000504 <__aeabi_ui2d>
 8003bc4:	2d09      	cmp	r5, #9
 8003bc6:	4682      	mov	sl, r0
 8003bc8:	468b      	mov	fp, r1
 8003bca:	dd13      	ble.n	8003bf4 <_strtod_l+0x3e4>
 8003bcc:	4b79      	ldr	r3, [pc, #484]	; (8003db4 <_strtod_l+0x5a4>)
 8003bce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003bd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003bd6:	f7fc fd0f 	bl	80005f8 <__aeabi_dmul>
 8003bda:	4682      	mov	sl, r0
 8003bdc:	4648      	mov	r0, r9
 8003bde:	468b      	mov	fp, r1
 8003be0:	f7fc fc90 	bl	8000504 <__aeabi_ui2d>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4650      	mov	r0, sl
 8003bea:	4659      	mov	r1, fp
 8003bec:	f7fc fb4e 	bl	800028c <__adddf3>
 8003bf0:	4682      	mov	sl, r0
 8003bf2:	468b      	mov	fp, r1
 8003bf4:	2d0f      	cmp	r5, #15
 8003bf6:	dc38      	bgt.n	8003c6a <_strtod_l+0x45a>
 8003bf8:	9b08      	ldr	r3, [sp, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f43f ae4a 	beq.w	8003894 <_strtod_l+0x84>
 8003c00:	dd24      	ble.n	8003c4c <_strtod_l+0x43c>
 8003c02:	2b16      	cmp	r3, #22
 8003c04:	dc0b      	bgt.n	8003c1e <_strtod_l+0x40e>
 8003c06:	4d6b      	ldr	r5, [pc, #428]	; (8003db4 <_strtod_l+0x5a4>)
 8003c08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8003c0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003c10:	4652      	mov	r2, sl
 8003c12:	465b      	mov	r3, fp
 8003c14:	f7fc fcf0 	bl	80005f8 <__aeabi_dmul>
 8003c18:	4682      	mov	sl, r0
 8003c1a:	468b      	mov	fp, r1
 8003c1c:	e63a      	b.n	8003894 <_strtod_l+0x84>
 8003c1e:	9a08      	ldr	r2, [sp, #32]
 8003c20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003c24:	4293      	cmp	r3, r2
 8003c26:	db20      	blt.n	8003c6a <_strtod_l+0x45a>
 8003c28:	4c62      	ldr	r4, [pc, #392]	; (8003db4 <_strtod_l+0x5a4>)
 8003c2a:	f1c5 050f 	rsb	r5, r5, #15
 8003c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003c32:	4652      	mov	r2, sl
 8003c34:	465b      	mov	r3, fp
 8003c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c3a:	f7fc fcdd 	bl	80005f8 <__aeabi_dmul>
 8003c3e:	9b08      	ldr	r3, [sp, #32]
 8003c40:	1b5d      	subs	r5, r3, r5
 8003c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003c46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003c4a:	e7e3      	b.n	8003c14 <_strtod_l+0x404>
 8003c4c:	9b08      	ldr	r3, [sp, #32]
 8003c4e:	3316      	adds	r3, #22
 8003c50:	db0b      	blt.n	8003c6a <_strtod_l+0x45a>
 8003c52:	9b07      	ldr	r3, [sp, #28]
 8003c54:	4a57      	ldr	r2, [pc, #348]	; (8003db4 <_strtod_l+0x5a4>)
 8003c56:	1b9e      	subs	r6, r3, r6
 8003c58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c60:	4650      	mov	r0, sl
 8003c62:	4659      	mov	r1, fp
 8003c64:	f7fc fdf2 	bl	800084c <__aeabi_ddiv>
 8003c68:	e7d6      	b.n	8003c18 <_strtod_l+0x408>
 8003c6a:	9b08      	ldr	r3, [sp, #32]
 8003c6c:	eba5 0808 	sub.w	r8, r5, r8
 8003c70:	4498      	add	r8, r3
 8003c72:	f1b8 0f00 	cmp.w	r8, #0
 8003c76:	dd71      	ble.n	8003d5c <_strtod_l+0x54c>
 8003c78:	f018 030f 	ands.w	r3, r8, #15
 8003c7c:	d00a      	beq.n	8003c94 <_strtod_l+0x484>
 8003c7e:	494d      	ldr	r1, [pc, #308]	; (8003db4 <_strtod_l+0x5a4>)
 8003c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c84:	4652      	mov	r2, sl
 8003c86:	465b      	mov	r3, fp
 8003c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c8c:	f7fc fcb4 	bl	80005f8 <__aeabi_dmul>
 8003c90:	4682      	mov	sl, r0
 8003c92:	468b      	mov	fp, r1
 8003c94:	f038 080f 	bics.w	r8, r8, #15
 8003c98:	d04d      	beq.n	8003d36 <_strtod_l+0x526>
 8003c9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003c9e:	dd22      	ble.n	8003ce6 <_strtod_l+0x4d6>
 8003ca0:	2500      	movs	r5, #0
 8003ca2:	462e      	mov	r6, r5
 8003ca4:	9509      	str	r5, [sp, #36]	; 0x24
 8003ca6:	9507      	str	r5, [sp, #28]
 8003ca8:	2322      	movs	r3, #34	; 0x22
 8003caa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8003dbc <_strtod_l+0x5ac>
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	f04f 0a00 	mov.w	sl, #0
 8003cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f43f adec 	beq.w	8003894 <_strtod_l+0x84>
 8003cbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f001 fe92 	bl	80059e8 <_Bfree>
 8003cc4:	9907      	ldr	r1, [sp, #28]
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f001 fe8e 	bl	80059e8 <_Bfree>
 8003ccc:	4631      	mov	r1, r6
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f001 fe8a 	bl	80059e8 <_Bfree>
 8003cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f001 fe86 	bl	80059e8 <_Bfree>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f001 fe82 	bl	80059e8 <_Bfree>
 8003ce4:	e5d6      	b.n	8003894 <_strtod_l+0x84>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003cec:	4650      	mov	r0, sl
 8003cee:	4659      	mov	r1, fp
 8003cf0:	4699      	mov	r9, r3
 8003cf2:	f1b8 0f01 	cmp.w	r8, #1
 8003cf6:	dc21      	bgt.n	8003d3c <_strtod_l+0x52c>
 8003cf8:	b10b      	cbz	r3, 8003cfe <_strtod_l+0x4ee>
 8003cfa:	4682      	mov	sl, r0
 8003cfc:	468b      	mov	fp, r1
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <_strtod_l+0x5a8>)
 8003d00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003d04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003d08:	4652      	mov	r2, sl
 8003d0a:	465b      	mov	r3, fp
 8003d0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003d10:	f7fc fc72 	bl	80005f8 <__aeabi_dmul>
 8003d14:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <_strtod_l+0x5ac>)
 8003d16:	460a      	mov	r2, r1
 8003d18:	400b      	ands	r3, r1
 8003d1a:	4929      	ldr	r1, [pc, #164]	; (8003dc0 <_strtod_l+0x5b0>)
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	4682      	mov	sl, r0
 8003d20:	d8be      	bhi.n	8003ca0 <_strtod_l+0x490>
 8003d22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003d26:	428b      	cmp	r3, r1
 8003d28:	bf86      	itte	hi
 8003d2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8003dc4 <_strtod_l+0x5b4>
 8003d2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8003d32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003d36:	2300      	movs	r3, #0
 8003d38:	9304      	str	r3, [sp, #16]
 8003d3a:	e081      	b.n	8003e40 <_strtod_l+0x630>
 8003d3c:	f018 0f01 	tst.w	r8, #1
 8003d40:	d007      	beq.n	8003d52 <_strtod_l+0x542>
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <_strtod_l+0x5a8>)
 8003d44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fc54 	bl	80005f8 <__aeabi_dmul>
 8003d50:	2301      	movs	r3, #1
 8003d52:	f109 0901 	add.w	r9, r9, #1
 8003d56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003d5a:	e7ca      	b.n	8003cf2 <_strtod_l+0x4e2>
 8003d5c:	d0eb      	beq.n	8003d36 <_strtod_l+0x526>
 8003d5e:	f1c8 0800 	rsb	r8, r8, #0
 8003d62:	f018 020f 	ands.w	r2, r8, #15
 8003d66:	d00a      	beq.n	8003d7e <_strtod_l+0x56e>
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <_strtod_l+0x5a4>)
 8003d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d6e:	4650      	mov	r0, sl
 8003d70:	4659      	mov	r1, fp
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc fd69 	bl	800084c <__aeabi_ddiv>
 8003d7a:	4682      	mov	sl, r0
 8003d7c:	468b      	mov	fp, r1
 8003d7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003d82:	d0d8      	beq.n	8003d36 <_strtod_l+0x526>
 8003d84:	f1b8 0f1f 	cmp.w	r8, #31
 8003d88:	dd1e      	ble.n	8003dc8 <_strtod_l+0x5b8>
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	462e      	mov	r6, r5
 8003d8e:	9509      	str	r5, [sp, #36]	; 0x24
 8003d90:	9507      	str	r5, [sp, #28]
 8003d92:	2322      	movs	r3, #34	; 0x22
 8003d94:	f04f 0a00 	mov.w	sl, #0
 8003d98:	f04f 0b00 	mov.w	fp, #0
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	e789      	b.n	8003cb4 <_strtod_l+0x4a4>
 8003da0:	080073c9 	.word	0x080073c9
 8003da4:	0800740c 	.word	0x0800740c
 8003da8:	080073c1 	.word	0x080073c1
 8003dac:	0800754c 	.word	0x0800754c
 8003db0:	08007808 	.word	0x08007808
 8003db4:	080076e8 	.word	0x080076e8
 8003db8:	080076c0 	.word	0x080076c0
 8003dbc:	7ff00000 	.word	0x7ff00000
 8003dc0:	7ca00000 	.word	0x7ca00000
 8003dc4:	7fefffff 	.word	0x7fefffff
 8003dc8:	f018 0310 	ands.w	r3, r8, #16
 8003dcc:	bf18      	it	ne
 8003dce:	236a      	movne	r3, #106	; 0x6a
 8003dd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004188 <_strtod_l+0x978>
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	4650      	mov	r0, sl
 8003dd8:	4659      	mov	r1, fp
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f018 0f01 	tst.w	r8, #1
 8003de0:	d004      	beq.n	8003dec <_strtod_l+0x5dc>
 8003de2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003de6:	f7fc fc07 	bl	80005f8 <__aeabi_dmul>
 8003dea:	2301      	movs	r3, #1
 8003dec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003df0:	f109 0908 	add.w	r9, r9, #8
 8003df4:	d1f2      	bne.n	8003ddc <_strtod_l+0x5cc>
 8003df6:	b10b      	cbz	r3, 8003dfc <_strtod_l+0x5ec>
 8003df8:	4682      	mov	sl, r0
 8003dfa:	468b      	mov	fp, r1
 8003dfc:	9b04      	ldr	r3, [sp, #16]
 8003dfe:	b1bb      	cbz	r3, 8003e30 <_strtod_l+0x620>
 8003e00:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003e04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	4659      	mov	r1, fp
 8003e0c:	dd10      	ble.n	8003e30 <_strtod_l+0x620>
 8003e0e:	2b1f      	cmp	r3, #31
 8003e10:	f340 8128 	ble.w	8004064 <_strtod_l+0x854>
 8003e14:	2b34      	cmp	r3, #52	; 0x34
 8003e16:	bfde      	ittt	le
 8003e18:	3b20      	suble	r3, #32
 8003e1a:	f04f 32ff 	movle.w	r2, #4294967295
 8003e1e:	fa02 f303 	lslle.w	r3, r2, r3
 8003e22:	f04f 0a00 	mov.w	sl, #0
 8003e26:	bfcc      	ite	gt
 8003e28:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003e2c:	ea03 0b01 	andle.w	fp, r3, r1
 8003e30:	2200      	movs	r2, #0
 8003e32:	2300      	movs	r3, #0
 8003e34:	4650      	mov	r0, sl
 8003e36:	4659      	mov	r1, fp
 8003e38:	f7fc fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1a4      	bne.n	8003d8a <_strtod_l+0x57a>
 8003e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e46:	462b      	mov	r3, r5
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f001 fe38 	bl	8005ac0 <__s2b>
 8003e50:	9009      	str	r0, [sp, #36]	; 0x24
 8003e52:	2800      	cmp	r0, #0
 8003e54:	f43f af24 	beq.w	8003ca0 <_strtod_l+0x490>
 8003e58:	9b07      	ldr	r3, [sp, #28]
 8003e5a:	1b9e      	subs	r6, r3, r6
 8003e5c:	9b08      	ldr	r3, [sp, #32]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfb4      	ite	lt
 8003e62:	4633      	movlt	r3, r6
 8003e64:	2300      	movge	r3, #0
 8003e66:	9310      	str	r3, [sp, #64]	; 0x40
 8003e68:	9b08      	ldr	r3, [sp, #32]
 8003e6a:	2500      	movs	r5, #0
 8003e6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e70:	9318      	str	r3, [sp, #96]	; 0x60
 8003e72:	462e      	mov	r6, r5
 8003e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e76:	4620      	mov	r0, r4
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	f001 fd75 	bl	8005968 <_Balloc>
 8003e7e:	9007      	str	r0, [sp, #28]
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f43f af11 	beq.w	8003ca8 <_strtod_l+0x498>
 8003e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	3202      	adds	r2, #2
 8003e8c:	f103 010c 	add.w	r1, r3, #12
 8003e90:	0092      	lsls	r2, r2, #2
 8003e92:	300c      	adds	r0, #12
 8003e94:	f001 fd5a 	bl	800594c <memcpy>
 8003e98:	ec4b ab10 	vmov	d0, sl, fp
 8003e9c:	aa20      	add	r2, sp, #128	; 0x80
 8003e9e:	a91f      	add	r1, sp, #124	; 0x7c
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003ea6:	f002 f947 	bl	8006138 <__d2b>
 8003eaa:	901e      	str	r0, [sp, #120]	; 0x78
 8003eac:	2800      	cmp	r0, #0
 8003eae:	f43f aefb 	beq.w	8003ca8 <_strtod_l+0x498>
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 fe9d 	bl	8005bf4 <__i2b>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	f43f aef3 	beq.w	8003ca8 <_strtod_l+0x498>
 8003ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ec4:	9904      	ldr	r1, [sp, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bfab      	itete	ge
 8003eca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8003ecc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8003ece:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8003ed0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8003ed4:	bfac      	ite	ge
 8003ed6:	eb03 0902 	addge.w	r9, r3, r2
 8003eda:	1ad7      	sublt	r7, r2, r3
 8003edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ede:	eba3 0801 	sub.w	r8, r3, r1
 8003ee2:	4490      	add	r8, r2
 8003ee4:	4ba3      	ldr	r3, [pc, #652]	; (8004174 <_strtod_l+0x964>)
 8003ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003eea:	4598      	cmp	r8, r3
 8003eec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003ef0:	f280 80cc 	bge.w	800408c <_strtod_l+0x87c>
 8003ef4:	eba3 0308 	sub.w	r3, r3, r8
 8003ef8:	2b1f      	cmp	r3, #31
 8003efa:	eba2 0203 	sub.w	r2, r2, r3
 8003efe:	f04f 0101 	mov.w	r1, #1
 8003f02:	f300 80b6 	bgt.w	8004072 <_strtod_l+0x862>
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f10:	eb09 0802 	add.w	r8, r9, r2
 8003f14:	9b04      	ldr	r3, [sp, #16]
 8003f16:	45c1      	cmp	r9, r8
 8003f18:	4417      	add	r7, r2
 8003f1a:	441f      	add	r7, r3
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	bfa8      	it	ge
 8003f20:	4643      	movge	r3, r8
 8003f22:	42bb      	cmp	r3, r7
 8003f24:	bfa8      	it	ge
 8003f26:	463b      	movge	r3, r7
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfc2      	ittt	gt
 8003f2c:	eba8 0803 	subgt.w	r8, r8, r3
 8003f30:	1aff      	subgt	r7, r7, r3
 8003f32:	eba9 0903 	subgt.w	r9, r9, r3
 8003f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dd17      	ble.n	8003f6c <_strtod_l+0x75c>
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4620      	mov	r0, r4
 8003f42:	f001 ff13 	bl	8005d6c <__pow5mult>
 8003f46:	4606      	mov	r6, r0
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	f43f aead 	beq.w	8003ca8 <_strtod_l+0x498>
 8003f4e:	4601      	mov	r1, r0
 8003f50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003f52:	4620      	mov	r0, r4
 8003f54:	f001 fe64 	bl	8005c20 <__multiply>
 8003f58:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	f43f aea4 	beq.w	8003ca8 <_strtod_l+0x498>
 8003f60:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003f62:	4620      	mov	r0, r4
 8003f64:	f001 fd40 	bl	80059e8 <_Bfree>
 8003f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f6a:	931e      	str	r3, [sp, #120]	; 0x78
 8003f6c:	f1b8 0f00 	cmp.w	r8, #0
 8003f70:	f300 8091 	bgt.w	8004096 <_strtod_l+0x886>
 8003f74:	9b08      	ldr	r3, [sp, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	dd08      	ble.n	8003f8c <_strtod_l+0x77c>
 8003f7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003f7c:	9907      	ldr	r1, [sp, #28]
 8003f7e:	4620      	mov	r0, r4
 8003f80:	f001 fef4 	bl	8005d6c <__pow5mult>
 8003f84:	9007      	str	r0, [sp, #28]
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f43f ae8e 	beq.w	8003ca8 <_strtod_l+0x498>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	dd08      	ble.n	8003fa2 <_strtod_l+0x792>
 8003f90:	9907      	ldr	r1, [sp, #28]
 8003f92:	463a      	mov	r2, r7
 8003f94:	4620      	mov	r0, r4
 8003f96:	f001 ff43 	bl	8005e20 <__lshift>
 8003f9a:	9007      	str	r0, [sp, #28]
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f43f ae83 	beq.w	8003ca8 <_strtod_l+0x498>
 8003fa2:	f1b9 0f00 	cmp.w	r9, #0
 8003fa6:	dd08      	ble.n	8003fba <_strtod_l+0x7aa>
 8003fa8:	4631      	mov	r1, r6
 8003faa:	464a      	mov	r2, r9
 8003fac:	4620      	mov	r0, r4
 8003fae:	f001 ff37 	bl	8005e20 <__lshift>
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	f43f ae77 	beq.w	8003ca8 <_strtod_l+0x498>
 8003fba:	9a07      	ldr	r2, [sp, #28]
 8003fbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f001 ffb6 	bl	8005f30 <__mdiff>
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	f43f ae6e 	beq.w	8003ca8 <_strtod_l+0x498>
 8003fcc:	68c3      	ldr	r3, [r0, #12]
 8003fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60c3      	str	r3, [r0, #12]
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	f001 ff8f 	bl	8005ef8 <__mcmp>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	da65      	bge.n	80040aa <_strtod_l+0x89a>
 8003fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fe0:	ea53 030a 	orrs.w	r3, r3, sl
 8003fe4:	f040 8087 	bne.w	80040f6 <_strtod_l+0x8e6>
 8003fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 8082 	bne.w	80040f6 <_strtod_l+0x8e6>
 8003ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003ff6:	0d1b      	lsrs	r3, r3, #20
 8003ff8:	051b      	lsls	r3, r3, #20
 8003ffa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003ffe:	d97a      	bls.n	80040f6 <_strtod_l+0x8e6>
 8004000:	696b      	ldr	r3, [r5, #20]
 8004002:	b913      	cbnz	r3, 800400a <_strtod_l+0x7fa>
 8004004:	692b      	ldr	r3, [r5, #16]
 8004006:	2b01      	cmp	r3, #1
 8004008:	dd75      	ble.n	80040f6 <_strtod_l+0x8e6>
 800400a:	4629      	mov	r1, r5
 800400c:	2201      	movs	r2, #1
 800400e:	4620      	mov	r0, r4
 8004010:	f001 ff06 	bl	8005e20 <__lshift>
 8004014:	4631      	mov	r1, r6
 8004016:	4605      	mov	r5, r0
 8004018:	f001 ff6e 	bl	8005ef8 <__mcmp>
 800401c:	2800      	cmp	r0, #0
 800401e:	dd6a      	ble.n	80040f6 <_strtod_l+0x8e6>
 8004020:	9904      	ldr	r1, [sp, #16]
 8004022:	4a55      	ldr	r2, [pc, #340]	; (8004178 <_strtod_l+0x968>)
 8004024:	465b      	mov	r3, fp
 8004026:	2900      	cmp	r1, #0
 8004028:	f000 8085 	beq.w	8004136 <_strtod_l+0x926>
 800402c:	ea02 010b 	and.w	r1, r2, fp
 8004030:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004034:	dc7f      	bgt.n	8004136 <_strtod_l+0x926>
 8004036:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800403a:	f77f aeaa 	ble.w	8003d92 <_strtod_l+0x582>
 800403e:	4a4f      	ldr	r2, [pc, #316]	; (800417c <_strtod_l+0x96c>)
 8004040:	2300      	movs	r3, #0
 8004042:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004046:	4650      	mov	r0, sl
 8004048:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800404c:	4659      	mov	r1, fp
 800404e:	f7fc fad3 	bl	80005f8 <__aeabi_dmul>
 8004052:	460b      	mov	r3, r1
 8004054:	4303      	orrs	r3, r0
 8004056:	bf08      	it	eq
 8004058:	2322      	moveq	r3, #34	; 0x22
 800405a:	4682      	mov	sl, r0
 800405c:	468b      	mov	fp, r1
 800405e:	bf08      	it	eq
 8004060:	6023      	streq	r3, [r4, #0]
 8004062:	e62b      	b.n	8003cbc <_strtod_l+0x4ac>
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	ea03 0a0a 	and.w	sl, r3, sl
 8004070:	e6de      	b.n	8003e30 <_strtod_l+0x620>
 8004072:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004076:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800407a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800407e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004082:	fa01 f308 	lsl.w	r3, r1, r8
 8004086:	930c      	str	r3, [sp, #48]	; 0x30
 8004088:	9111      	str	r1, [sp, #68]	; 0x44
 800408a:	e741      	b.n	8003f10 <_strtod_l+0x700>
 800408c:	2300      	movs	r3, #0
 800408e:	930c      	str	r3, [sp, #48]	; 0x30
 8004090:	2301      	movs	r3, #1
 8004092:	9311      	str	r3, [sp, #68]	; 0x44
 8004094:	e73c      	b.n	8003f10 <_strtod_l+0x700>
 8004096:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004098:	4642      	mov	r2, r8
 800409a:	4620      	mov	r0, r4
 800409c:	f001 fec0 	bl	8005e20 <__lshift>
 80040a0:	901e      	str	r0, [sp, #120]	; 0x78
 80040a2:	2800      	cmp	r0, #0
 80040a4:	f47f af66 	bne.w	8003f74 <_strtod_l+0x764>
 80040a8:	e5fe      	b.n	8003ca8 <_strtod_l+0x498>
 80040aa:	465f      	mov	r7, fp
 80040ac:	d16e      	bne.n	800418c <_strtod_l+0x97c>
 80040ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80040b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040b4:	b342      	cbz	r2, 8004108 <_strtod_l+0x8f8>
 80040b6:	4a32      	ldr	r2, [pc, #200]	; (8004180 <_strtod_l+0x970>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d128      	bne.n	800410e <_strtod_l+0x8fe>
 80040bc:	9b04      	ldr	r3, [sp, #16]
 80040be:	4650      	mov	r0, sl
 80040c0:	b1eb      	cbz	r3, 80040fe <_strtod_l+0x8ee>
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <_strtod_l+0x968>)
 80040c4:	403a      	ands	r2, r7
 80040c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80040ca:	f04f 31ff 	mov.w	r1, #4294967295
 80040ce:	d819      	bhi.n	8004104 <_strtod_l+0x8f4>
 80040d0:	0d12      	lsrs	r2, r2, #20
 80040d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	4298      	cmp	r0, r3
 80040dc:	d117      	bne.n	800410e <_strtod_l+0x8fe>
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <_strtod_l+0x974>)
 80040e0:	429f      	cmp	r7, r3
 80040e2:	d102      	bne.n	80040ea <_strtod_l+0x8da>
 80040e4:	3001      	adds	r0, #1
 80040e6:	f43f addf 	beq.w	8003ca8 <_strtod_l+0x498>
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <_strtod_l+0x968>)
 80040ec:	403b      	ands	r3, r7
 80040ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80040f2:	f04f 0a00 	mov.w	sl, #0
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1a0      	bne.n	800403e <_strtod_l+0x82e>
 80040fc:	e5de      	b.n	8003cbc <_strtod_l+0x4ac>
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	e7ea      	b.n	80040da <_strtod_l+0x8ca>
 8004104:	460b      	mov	r3, r1
 8004106:	e7e8      	b.n	80040da <_strtod_l+0x8ca>
 8004108:	ea53 030a 	orrs.w	r3, r3, sl
 800410c:	d088      	beq.n	8004020 <_strtod_l+0x810>
 800410e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004110:	b1db      	cbz	r3, 800414a <_strtod_l+0x93a>
 8004112:	423b      	tst	r3, r7
 8004114:	d0ef      	beq.n	80040f6 <_strtod_l+0x8e6>
 8004116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004118:	9a04      	ldr	r2, [sp, #16]
 800411a:	4650      	mov	r0, sl
 800411c:	4659      	mov	r1, fp
 800411e:	b1c3      	cbz	r3, 8004152 <_strtod_l+0x942>
 8004120:	f7ff fb5a 	bl	80037d8 <sulp>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800412c:	f7fc f8ae 	bl	800028c <__adddf3>
 8004130:	4682      	mov	sl, r0
 8004132:	468b      	mov	fp, r1
 8004134:	e7df      	b.n	80040f6 <_strtod_l+0x8e6>
 8004136:	4013      	ands	r3, r2
 8004138:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800413c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004140:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004144:	f04f 3aff 	mov.w	sl, #4294967295
 8004148:	e7d5      	b.n	80040f6 <_strtod_l+0x8e6>
 800414a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800414c:	ea13 0f0a 	tst.w	r3, sl
 8004150:	e7e0      	b.n	8004114 <_strtod_l+0x904>
 8004152:	f7ff fb41 	bl	80037d8 <sulp>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800415e:	f7fc f893 	bl	8000288 <__aeabi_dsub>
 8004162:	2200      	movs	r2, #0
 8004164:	2300      	movs	r3, #0
 8004166:	4682      	mov	sl, r0
 8004168:	468b      	mov	fp, r1
 800416a:	f7fc fcad 	bl	8000ac8 <__aeabi_dcmpeq>
 800416e:	2800      	cmp	r0, #0
 8004170:	d0c1      	beq.n	80040f6 <_strtod_l+0x8e6>
 8004172:	e60e      	b.n	8003d92 <_strtod_l+0x582>
 8004174:	fffffc02 	.word	0xfffffc02
 8004178:	7ff00000 	.word	0x7ff00000
 800417c:	39500000 	.word	0x39500000
 8004180:	000fffff 	.word	0x000fffff
 8004184:	7fefffff 	.word	0x7fefffff
 8004188:	08007420 	.word	0x08007420
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	f002 f82e 	bl	80061f0 <__ratio>
 8004194:	ec59 8b10 	vmov	r8, r9, d0
 8004198:	ee10 0a10 	vmov	r0, s0
 800419c:	2200      	movs	r2, #0
 800419e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041a2:	4649      	mov	r1, r9
 80041a4:	f7fc fca4 	bl	8000af0 <__aeabi_dcmple>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d07c      	beq.n	80042a6 <_strtod_l+0xa96>
 80041ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04c      	beq.n	800424c <_strtod_l+0xa3c>
 80041b2:	4b95      	ldr	r3, [pc, #596]	; (8004408 <_strtod_l+0xbf8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80041ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004408 <_strtod_l+0xbf8>
 80041be:	f04f 0800 	mov.w	r8, #0
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <_strtod_l+0xbfc>)
 80041c4:	403b      	ands	r3, r7
 80041c6:	9311      	str	r3, [sp, #68]	; 0x44
 80041c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80041ca:	4b91      	ldr	r3, [pc, #580]	; (8004410 <_strtod_l+0xc00>)
 80041cc:	429a      	cmp	r2, r3
 80041ce:	f040 80b2 	bne.w	8004336 <_strtod_l+0xb26>
 80041d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80041de:	ec4b ab10 	vmov	d0, sl, fp
 80041e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80041e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80041ea:	f001 ff29 	bl	8006040 <__ulp>
 80041ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041f2:	ec53 2b10 	vmov	r2, r3, d0
 80041f6:	f7fc f9ff 	bl	80005f8 <__aeabi_dmul>
 80041fa:	4652      	mov	r2, sl
 80041fc:	465b      	mov	r3, fp
 80041fe:	f7fc f845 	bl	800028c <__adddf3>
 8004202:	460b      	mov	r3, r1
 8004204:	4981      	ldr	r1, [pc, #516]	; (800440c <_strtod_l+0xbfc>)
 8004206:	4a83      	ldr	r2, [pc, #524]	; (8004414 <_strtod_l+0xc04>)
 8004208:	4019      	ands	r1, r3
 800420a:	4291      	cmp	r1, r2
 800420c:	4682      	mov	sl, r0
 800420e:	d95e      	bls.n	80042ce <_strtod_l+0xabe>
 8004210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004212:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004216:	4293      	cmp	r3, r2
 8004218:	d103      	bne.n	8004222 <_strtod_l+0xa12>
 800421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800421c:	3301      	adds	r3, #1
 800421e:	f43f ad43 	beq.w	8003ca8 <_strtod_l+0x498>
 8004222:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004420 <_strtod_l+0xc10>
 8004226:	f04f 3aff 	mov.w	sl, #4294967295
 800422a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800422c:	4620      	mov	r0, r4
 800422e:	f001 fbdb 	bl	80059e8 <_Bfree>
 8004232:	9907      	ldr	r1, [sp, #28]
 8004234:	4620      	mov	r0, r4
 8004236:	f001 fbd7 	bl	80059e8 <_Bfree>
 800423a:	4631      	mov	r1, r6
 800423c:	4620      	mov	r0, r4
 800423e:	f001 fbd3 	bl	80059e8 <_Bfree>
 8004242:	4629      	mov	r1, r5
 8004244:	4620      	mov	r0, r4
 8004246:	f001 fbcf 	bl	80059e8 <_Bfree>
 800424a:	e613      	b.n	8003e74 <_strtod_l+0x664>
 800424c:	f1ba 0f00 	cmp.w	sl, #0
 8004250:	d11b      	bne.n	800428a <_strtod_l+0xa7a>
 8004252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004256:	b9f3      	cbnz	r3, 8004296 <_strtod_l+0xa86>
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <_strtod_l+0xbf8>)
 800425a:	2200      	movs	r2, #0
 800425c:	4640      	mov	r0, r8
 800425e:	4649      	mov	r1, r9
 8004260:	f7fc fc3c 	bl	8000adc <__aeabi_dcmplt>
 8004264:	b9d0      	cbnz	r0, 800429c <_strtod_l+0xa8c>
 8004266:	4640      	mov	r0, r8
 8004268:	4649      	mov	r1, r9
 800426a:	4b6b      	ldr	r3, [pc, #428]	; (8004418 <_strtod_l+0xc08>)
 800426c:	2200      	movs	r2, #0
 800426e:	f7fc f9c3 	bl	80005f8 <__aeabi_dmul>
 8004272:	4680      	mov	r8, r0
 8004274:	4689      	mov	r9, r1
 8004276:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800427a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800427e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004280:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8004284:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004288:	e79b      	b.n	80041c2 <_strtod_l+0x9b2>
 800428a:	f1ba 0f01 	cmp.w	sl, #1
 800428e:	d102      	bne.n	8004296 <_strtod_l+0xa86>
 8004290:	2f00      	cmp	r7, #0
 8004292:	f43f ad7e 	beq.w	8003d92 <_strtod_l+0x582>
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <_strtod_l+0xc0c>)
 8004298:	2200      	movs	r2, #0
 800429a:	e78c      	b.n	80041b6 <_strtod_l+0x9a6>
 800429c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004418 <_strtod_l+0xc08>
 80042a0:	f04f 0800 	mov.w	r8, #0
 80042a4:	e7e7      	b.n	8004276 <_strtod_l+0xa66>
 80042a6:	4b5c      	ldr	r3, [pc, #368]	; (8004418 <_strtod_l+0xc08>)
 80042a8:	4640      	mov	r0, r8
 80042aa:	4649      	mov	r1, r9
 80042ac:	2200      	movs	r2, #0
 80042ae:	f7fc f9a3 	bl	80005f8 <__aeabi_dmul>
 80042b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042b4:	4680      	mov	r8, r0
 80042b6:	4689      	mov	r9, r1
 80042b8:	b933      	cbnz	r3, 80042c8 <_strtod_l+0xab8>
 80042ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042be:	9012      	str	r0, [sp, #72]	; 0x48
 80042c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80042c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80042c6:	e7dd      	b.n	8004284 <_strtod_l+0xa74>
 80042c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80042cc:	e7f9      	b.n	80042c2 <_strtod_l+0xab2>
 80042ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80042d2:	9b04      	ldr	r3, [sp, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1a8      	bne.n	800422a <_strtod_l+0xa1a>
 80042d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80042dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042de:	0d1b      	lsrs	r3, r3, #20
 80042e0:	051b      	lsls	r3, r3, #20
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d1a1      	bne.n	800422a <_strtod_l+0xa1a>
 80042e6:	4640      	mov	r0, r8
 80042e8:	4649      	mov	r1, r9
 80042ea:	f7fc fccd 	bl	8000c88 <__aeabi_d2lz>
 80042ee:	f7fc f955 	bl	800059c <__aeabi_l2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f7fb ffc5 	bl	8000288 <__aeabi_dsub>
 80042fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004304:	ea43 030a 	orr.w	r3, r3, sl
 8004308:	4313      	orrs	r3, r2
 800430a:	4680      	mov	r8, r0
 800430c:	4689      	mov	r9, r1
 800430e:	d053      	beq.n	80043b8 <_strtod_l+0xba8>
 8004310:	a335      	add	r3, pc, #212	; (adr r3, 80043e8 <_strtod_l+0xbd8>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f7fc fbe1 	bl	8000adc <__aeabi_dcmplt>
 800431a:	2800      	cmp	r0, #0
 800431c:	f47f acce 	bne.w	8003cbc <_strtod_l+0x4ac>
 8004320:	a333      	add	r3, pc, #204	; (adr r3, 80043f0 <_strtod_l+0xbe0>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	f7fc fbf5 	bl	8000b18 <__aeabi_dcmpgt>
 800432e:	2800      	cmp	r0, #0
 8004330:	f43f af7b 	beq.w	800422a <_strtod_l+0xa1a>
 8004334:	e4c2      	b.n	8003cbc <_strtod_l+0x4ac>
 8004336:	9b04      	ldr	r3, [sp, #16]
 8004338:	b333      	cbz	r3, 8004388 <_strtod_l+0xb78>
 800433a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800433c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004340:	d822      	bhi.n	8004388 <_strtod_l+0xb78>
 8004342:	a32d      	add	r3, pc, #180	; (adr r3, 80043f8 <_strtod_l+0xbe8>)
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	4640      	mov	r0, r8
 800434a:	4649      	mov	r1, r9
 800434c:	f7fc fbd0 	bl	8000af0 <__aeabi_dcmple>
 8004350:	b1a0      	cbz	r0, 800437c <_strtod_l+0xb6c>
 8004352:	4649      	mov	r1, r9
 8004354:	4640      	mov	r0, r8
 8004356:	f7fc fc27 	bl	8000ba8 <__aeabi_d2uiz>
 800435a:	2801      	cmp	r0, #1
 800435c:	bf38      	it	cc
 800435e:	2001      	movcc	r0, #1
 8004360:	f7fc f8d0 	bl	8000504 <__aeabi_ui2d>
 8004364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004366:	4680      	mov	r8, r0
 8004368:	4689      	mov	r9, r1
 800436a:	bb13      	cbnz	r3, 80043b2 <_strtod_l+0xba2>
 800436c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004370:	9014      	str	r0, [sp, #80]	; 0x50
 8004372:	9315      	str	r3, [sp, #84]	; 0x54
 8004374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004378:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800437c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800437e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004380:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	930d      	str	r3, [sp, #52]	; 0x34
 8004388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800438c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004390:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004394:	f001 fe54 	bl	8006040 <__ulp>
 8004398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800439c:	ec53 2b10 	vmov	r2, r3, d0
 80043a0:	f7fc f92a 	bl	80005f8 <__aeabi_dmul>
 80043a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043a8:	f7fb ff70 	bl	800028c <__adddf3>
 80043ac:	4682      	mov	sl, r0
 80043ae:	468b      	mov	fp, r1
 80043b0:	e78f      	b.n	80042d2 <_strtod_l+0xac2>
 80043b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80043b6:	e7dd      	b.n	8004374 <_strtod_l+0xb64>
 80043b8:	a311      	add	r3, pc, #68	; (adr r3, 8004400 <_strtod_l+0xbf0>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fc fb8d 	bl	8000adc <__aeabi_dcmplt>
 80043c2:	e7b4      	b.n	800432e <_strtod_l+0xb1e>
 80043c4:	2300      	movs	r3, #0
 80043c6:	930e      	str	r3, [sp, #56]	; 0x38
 80043c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	f7ff ba65 	b.w	800389c <_strtod_l+0x8c>
 80043d2:	2b65      	cmp	r3, #101	; 0x65
 80043d4:	f43f ab5d 	beq.w	8003a92 <_strtod_l+0x282>
 80043d8:	2b45      	cmp	r3, #69	; 0x45
 80043da:	f43f ab5a 	beq.w	8003a92 <_strtod_l+0x282>
 80043de:	2201      	movs	r2, #1
 80043e0:	f7ff bb92 	b.w	8003b08 <_strtod_l+0x2f8>
 80043e4:	f3af 8000 	nop.w
 80043e8:	94a03595 	.word	0x94a03595
 80043ec:	3fdfffff 	.word	0x3fdfffff
 80043f0:	35afe535 	.word	0x35afe535
 80043f4:	3fe00000 	.word	0x3fe00000
 80043f8:	ffc00000 	.word	0xffc00000
 80043fc:	41dfffff 	.word	0x41dfffff
 8004400:	94a03595 	.word	0x94a03595
 8004404:	3fcfffff 	.word	0x3fcfffff
 8004408:	3ff00000 	.word	0x3ff00000
 800440c:	7ff00000 	.word	0x7ff00000
 8004410:	7fe00000 	.word	0x7fe00000
 8004414:	7c9fffff 	.word	0x7c9fffff
 8004418:	3fe00000 	.word	0x3fe00000
 800441c:	bff00000 	.word	0xbff00000
 8004420:	7fefffff 	.word	0x7fefffff

08004424 <_strtod_r>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <_strtod_r+0x8>)
 8004426:	f7ff b9f3 	b.w	8003810 <_strtod_l>
 800442a:	bf00      	nop
 800442c:	2000006c 	.word	0x2000006c

08004430 <_strtol_l.isra.0>:
 8004430:	2b01      	cmp	r3, #1
 8004432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004436:	d001      	beq.n	800443c <_strtol_l.isra.0+0xc>
 8004438:	2b24      	cmp	r3, #36	; 0x24
 800443a:	d906      	bls.n	800444a <_strtol_l.isra.0+0x1a>
 800443c:	f7fe fafa 	bl	8002a34 <__errno>
 8004440:	2316      	movs	r3, #22
 8004442:	6003      	str	r3, [r0, #0]
 8004444:	2000      	movs	r0, #0
 8004446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444a:	4f3a      	ldr	r7, [pc, #232]	; (8004534 <_strtol_l.isra.0+0x104>)
 800444c:	468e      	mov	lr, r1
 800444e:	4676      	mov	r6, lr
 8004450:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004454:	5de5      	ldrb	r5, [r4, r7]
 8004456:	f015 0508 	ands.w	r5, r5, #8
 800445a:	d1f8      	bne.n	800444e <_strtol_l.isra.0+0x1e>
 800445c:	2c2d      	cmp	r4, #45	; 0x2d
 800445e:	d134      	bne.n	80044ca <_strtol_l.isra.0+0x9a>
 8004460:	f89e 4000 	ldrb.w	r4, [lr]
 8004464:	f04f 0801 	mov.w	r8, #1
 8004468:	f106 0e02 	add.w	lr, r6, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d05c      	beq.n	800452a <_strtol_l.isra.0+0xfa>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d10c      	bne.n	800448e <_strtol_l.isra.0+0x5e>
 8004474:	2c30      	cmp	r4, #48	; 0x30
 8004476:	d10a      	bne.n	800448e <_strtol_l.isra.0+0x5e>
 8004478:	f89e 4000 	ldrb.w	r4, [lr]
 800447c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004480:	2c58      	cmp	r4, #88	; 0x58
 8004482:	d14d      	bne.n	8004520 <_strtol_l.isra.0+0xf0>
 8004484:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004488:	2310      	movs	r3, #16
 800448a:	f10e 0e02 	add.w	lr, lr, #2
 800448e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004492:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004496:	2600      	movs	r6, #0
 8004498:	fbbc f9f3 	udiv	r9, ip, r3
 800449c:	4635      	mov	r5, r6
 800449e:	fb03 ca19 	mls	sl, r3, r9, ip
 80044a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80044a6:	2f09      	cmp	r7, #9
 80044a8:	d818      	bhi.n	80044dc <_strtol_l.isra.0+0xac>
 80044aa:	463c      	mov	r4, r7
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	dd24      	ble.n	80044fa <_strtol_l.isra.0+0xca>
 80044b0:	2e00      	cmp	r6, #0
 80044b2:	db1f      	blt.n	80044f4 <_strtol_l.isra.0+0xc4>
 80044b4:	45a9      	cmp	r9, r5
 80044b6:	d31d      	bcc.n	80044f4 <_strtol_l.isra.0+0xc4>
 80044b8:	d101      	bne.n	80044be <_strtol_l.isra.0+0x8e>
 80044ba:	45a2      	cmp	sl, r4
 80044bc:	db1a      	blt.n	80044f4 <_strtol_l.isra.0+0xc4>
 80044be:	fb05 4503 	mla	r5, r5, r3, r4
 80044c2:	2601      	movs	r6, #1
 80044c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80044c8:	e7eb      	b.n	80044a2 <_strtol_l.isra.0+0x72>
 80044ca:	2c2b      	cmp	r4, #43	; 0x2b
 80044cc:	bf08      	it	eq
 80044ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 80044d2:	46a8      	mov	r8, r5
 80044d4:	bf08      	it	eq
 80044d6:	f106 0e02 	addeq.w	lr, r6, #2
 80044da:	e7c7      	b.n	800446c <_strtol_l.isra.0+0x3c>
 80044dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80044e0:	2f19      	cmp	r7, #25
 80044e2:	d801      	bhi.n	80044e8 <_strtol_l.isra.0+0xb8>
 80044e4:	3c37      	subs	r4, #55	; 0x37
 80044e6:	e7e1      	b.n	80044ac <_strtol_l.isra.0+0x7c>
 80044e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80044ec:	2f19      	cmp	r7, #25
 80044ee:	d804      	bhi.n	80044fa <_strtol_l.isra.0+0xca>
 80044f0:	3c57      	subs	r4, #87	; 0x57
 80044f2:	e7db      	b.n	80044ac <_strtol_l.isra.0+0x7c>
 80044f4:	f04f 36ff 	mov.w	r6, #4294967295
 80044f8:	e7e4      	b.n	80044c4 <_strtol_l.isra.0+0x94>
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	da05      	bge.n	800450a <_strtol_l.isra.0+0xda>
 80044fe:	2322      	movs	r3, #34	; 0x22
 8004500:	6003      	str	r3, [r0, #0]
 8004502:	4665      	mov	r5, ip
 8004504:	b942      	cbnz	r2, 8004518 <_strtol_l.isra.0+0xe8>
 8004506:	4628      	mov	r0, r5
 8004508:	e79d      	b.n	8004446 <_strtol_l.isra.0+0x16>
 800450a:	f1b8 0f00 	cmp.w	r8, #0
 800450e:	d000      	beq.n	8004512 <_strtol_l.isra.0+0xe2>
 8004510:	426d      	negs	r5, r5
 8004512:	2a00      	cmp	r2, #0
 8004514:	d0f7      	beq.n	8004506 <_strtol_l.isra.0+0xd6>
 8004516:	b10e      	cbz	r6, 800451c <_strtol_l.isra.0+0xec>
 8004518:	f10e 31ff 	add.w	r1, lr, #4294967295
 800451c:	6011      	str	r1, [r2, #0]
 800451e:	e7f2      	b.n	8004506 <_strtol_l.isra.0+0xd6>
 8004520:	2430      	movs	r4, #48	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1b3      	bne.n	800448e <_strtol_l.isra.0+0x5e>
 8004526:	2308      	movs	r3, #8
 8004528:	e7b1      	b.n	800448e <_strtol_l.isra.0+0x5e>
 800452a:	2c30      	cmp	r4, #48	; 0x30
 800452c:	d0a4      	beq.n	8004478 <_strtol_l.isra.0+0x48>
 800452e:	230a      	movs	r3, #10
 8004530:	e7ad      	b.n	800448e <_strtol_l.isra.0+0x5e>
 8004532:	bf00      	nop
 8004534:	08007449 	.word	0x08007449

08004538 <_strtol_r>:
 8004538:	f7ff bf7a 	b.w	8004430 <_strtol_l.isra.0>

0800453c <quorem>:
 800453c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	6903      	ldr	r3, [r0, #16]
 8004542:	690c      	ldr	r4, [r1, #16]
 8004544:	42a3      	cmp	r3, r4
 8004546:	4607      	mov	r7, r0
 8004548:	f2c0 8081 	blt.w	800464e <quorem+0x112>
 800454c:	3c01      	subs	r4, #1
 800454e:	f101 0814 	add.w	r8, r1, #20
 8004552:	f100 0514 	add.w	r5, r0, #20
 8004556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004564:	3301      	adds	r3, #1
 8004566:	429a      	cmp	r2, r3
 8004568:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800456c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004570:	fbb2 f6f3 	udiv	r6, r2, r3
 8004574:	d331      	bcc.n	80045da <quorem+0x9e>
 8004576:	f04f 0e00 	mov.w	lr, #0
 800457a:	4640      	mov	r0, r8
 800457c:	46ac      	mov	ip, r5
 800457e:	46f2      	mov	sl, lr
 8004580:	f850 2b04 	ldr.w	r2, [r0], #4
 8004584:	b293      	uxth	r3, r2
 8004586:	fb06 e303 	mla	r3, r6, r3, lr
 800458a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800458e:	b29b      	uxth	r3, r3
 8004590:	ebaa 0303 	sub.w	r3, sl, r3
 8004594:	0c12      	lsrs	r2, r2, #16
 8004596:	f8dc a000 	ldr.w	sl, [ip]
 800459a:	fb06 e202 	mla	r2, r6, r2, lr
 800459e:	fa13 f38a 	uxtah	r3, r3, sl
 80045a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045a6:	fa1f fa82 	uxth.w	sl, r2
 80045aa:	f8dc 2000 	ldr.w	r2, [ip]
 80045ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80045b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045bc:	4581      	cmp	r9, r0
 80045be:	f84c 3b04 	str.w	r3, [ip], #4
 80045c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80045c6:	d2db      	bcs.n	8004580 <quorem+0x44>
 80045c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80045cc:	b92b      	cbnz	r3, 80045da <quorem+0x9e>
 80045ce:	9b01      	ldr	r3, [sp, #4]
 80045d0:	3b04      	subs	r3, #4
 80045d2:	429d      	cmp	r5, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	d32e      	bcc.n	8004636 <quorem+0xfa>
 80045d8:	613c      	str	r4, [r7, #16]
 80045da:	4638      	mov	r0, r7
 80045dc:	f001 fc8c 	bl	8005ef8 <__mcmp>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	db24      	blt.n	800462e <quorem+0xf2>
 80045e4:	3601      	adds	r6, #1
 80045e6:	4628      	mov	r0, r5
 80045e8:	f04f 0c00 	mov.w	ip, #0
 80045ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80045f0:	f8d0 e000 	ldr.w	lr, [r0]
 80045f4:	b293      	uxth	r3, r2
 80045f6:	ebac 0303 	sub.w	r3, ip, r3
 80045fa:	0c12      	lsrs	r2, r2, #16
 80045fc:	fa13 f38e 	uxtah	r3, r3, lr
 8004600:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004608:	b29b      	uxth	r3, r3
 800460a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800460e:	45c1      	cmp	r9, r8
 8004610:	f840 3b04 	str.w	r3, [r0], #4
 8004614:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004618:	d2e8      	bcs.n	80045ec <quorem+0xb0>
 800461a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800461e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004622:	b922      	cbnz	r2, 800462e <quorem+0xf2>
 8004624:	3b04      	subs	r3, #4
 8004626:	429d      	cmp	r5, r3
 8004628:	461a      	mov	r2, r3
 800462a:	d30a      	bcc.n	8004642 <quorem+0x106>
 800462c:	613c      	str	r4, [r7, #16]
 800462e:	4630      	mov	r0, r6
 8004630:	b003      	add	sp, #12
 8004632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	3b04      	subs	r3, #4
 800463a:	2a00      	cmp	r2, #0
 800463c:	d1cc      	bne.n	80045d8 <quorem+0x9c>
 800463e:	3c01      	subs	r4, #1
 8004640:	e7c7      	b.n	80045d2 <quorem+0x96>
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	3b04      	subs	r3, #4
 8004646:	2a00      	cmp	r2, #0
 8004648:	d1f0      	bne.n	800462c <quorem+0xf0>
 800464a:	3c01      	subs	r4, #1
 800464c:	e7eb      	b.n	8004626 <quorem+0xea>
 800464e:	2000      	movs	r0, #0
 8004650:	e7ee      	b.n	8004630 <quorem+0xf4>
 8004652:	0000      	movs	r0, r0
 8004654:	0000      	movs	r0, r0
	...

08004658 <_dtoa_r>:
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	ed2d 8b02 	vpush	{d8}
 8004660:	ec57 6b10 	vmov	r6, r7, d0
 8004664:	b095      	sub	sp, #84	; 0x54
 8004666:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004668:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004672:	4604      	mov	r4, r0
 8004674:	9209      	str	r2, [sp, #36]	; 0x24
 8004676:	930f      	str	r3, [sp, #60]	; 0x3c
 8004678:	b975      	cbnz	r5, 8004698 <_dtoa_r+0x40>
 800467a:	2010      	movs	r0, #16
 800467c:	f001 f94c 	bl	8005918 <malloc>
 8004680:	4602      	mov	r2, r0
 8004682:	6260      	str	r0, [r4, #36]	; 0x24
 8004684:	b920      	cbnz	r0, 8004690 <_dtoa_r+0x38>
 8004686:	4bb2      	ldr	r3, [pc, #712]	; (8004950 <_dtoa_r+0x2f8>)
 8004688:	21ea      	movs	r1, #234	; 0xea
 800468a:	48b2      	ldr	r0, [pc, #712]	; (8004954 <_dtoa_r+0x2fc>)
 800468c:	f002 f874 	bl	8006778 <__assert_func>
 8004690:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004694:	6005      	str	r5, [r0, #0]
 8004696:	60c5      	str	r5, [r0, #12]
 8004698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	b151      	cbz	r1, 80046b4 <_dtoa_r+0x5c>
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	604a      	str	r2, [r1, #4]
 80046a2:	2301      	movs	r3, #1
 80046a4:	4093      	lsls	r3, r2
 80046a6:	608b      	str	r3, [r1, #8]
 80046a8:	4620      	mov	r0, r4
 80046aa:	f001 f99d 	bl	80059e8 <_Bfree>
 80046ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	1e3b      	subs	r3, r7, #0
 80046b6:	bfb9      	ittee	lt
 80046b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046bc:	9303      	strlt	r3, [sp, #12]
 80046be:	2300      	movge	r3, #0
 80046c0:	f8c8 3000 	strge.w	r3, [r8]
 80046c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80046c8:	4ba3      	ldr	r3, [pc, #652]	; (8004958 <_dtoa_r+0x300>)
 80046ca:	bfbc      	itt	lt
 80046cc:	2201      	movlt	r2, #1
 80046ce:	f8c8 2000 	strlt.w	r2, [r8]
 80046d2:	ea33 0309 	bics.w	r3, r3, r9
 80046d6:	d11b      	bne.n	8004710 <_dtoa_r+0xb8>
 80046d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046da:	f242 730f 	movw	r3, #9999	; 0x270f
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046e4:	4333      	orrs	r3, r6
 80046e6:	f000 857a 	beq.w	80051de <_dtoa_r+0xb86>
 80046ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046ec:	b963      	cbnz	r3, 8004708 <_dtoa_r+0xb0>
 80046ee:	4b9b      	ldr	r3, [pc, #620]	; (800495c <_dtoa_r+0x304>)
 80046f0:	e024      	b.n	800473c <_dtoa_r+0xe4>
 80046f2:	4b9b      	ldr	r3, [pc, #620]	; (8004960 <_dtoa_r+0x308>)
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	9800      	ldr	r0, [sp, #0]
 80046fe:	b015      	add	sp, #84	; 0x54
 8004700:	ecbd 8b02 	vpop	{d8}
 8004704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004708:	4b94      	ldr	r3, [pc, #592]	; (800495c <_dtoa_r+0x304>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	3303      	adds	r3, #3
 800470e:	e7f3      	b.n	80046f8 <_dtoa_r+0xa0>
 8004710:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	ec51 0b17 	vmov	r0, r1, d7
 800471a:	2300      	movs	r3, #0
 800471c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004720:	f7fc f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004724:	4680      	mov	r8, r0
 8004726:	b158      	cbz	r0, 8004740 <_dtoa_r+0xe8>
 8004728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800472a:	2301      	movs	r3, #1
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8551 	beq.w	80051d8 <_dtoa_r+0xb80>
 8004736:	488b      	ldr	r0, [pc, #556]	; (8004964 <_dtoa_r+0x30c>)
 8004738:	6018      	str	r0, [r3, #0]
 800473a:	1e43      	subs	r3, r0, #1
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	e7dd      	b.n	80046fc <_dtoa_r+0xa4>
 8004740:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004744:	aa12      	add	r2, sp, #72	; 0x48
 8004746:	a913      	add	r1, sp, #76	; 0x4c
 8004748:	4620      	mov	r0, r4
 800474a:	f001 fcf5 	bl	8006138 <__d2b>
 800474e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004752:	4683      	mov	fp, r0
 8004754:	2d00      	cmp	r5, #0
 8004756:	d07c      	beq.n	8004852 <_dtoa_r+0x1fa>
 8004758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800475a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800475e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004762:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004766:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800476a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800476e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004772:	4b7d      	ldr	r3, [pc, #500]	; (8004968 <_dtoa_r+0x310>)
 8004774:	2200      	movs	r2, #0
 8004776:	4630      	mov	r0, r6
 8004778:	4639      	mov	r1, r7
 800477a:	f7fb fd85 	bl	8000288 <__aeabi_dsub>
 800477e:	a36e      	add	r3, pc, #440	; (adr r3, 8004938 <_dtoa_r+0x2e0>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f7fb ff38 	bl	80005f8 <__aeabi_dmul>
 8004788:	a36d      	add	r3, pc, #436	; (adr r3, 8004940 <_dtoa_r+0x2e8>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fb fd7d 	bl	800028c <__adddf3>
 8004792:	4606      	mov	r6, r0
 8004794:	4628      	mov	r0, r5
 8004796:	460f      	mov	r7, r1
 8004798:	f7fb fec4 	bl	8000524 <__aeabi_i2d>
 800479c:	a36a      	add	r3, pc, #424	; (adr r3, 8004948 <_dtoa_r+0x2f0>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fb ff29 	bl	80005f8 <__aeabi_dmul>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4630      	mov	r0, r6
 80047ac:	4639      	mov	r1, r7
 80047ae:	f7fb fd6d 	bl	800028c <__adddf3>
 80047b2:	4606      	mov	r6, r0
 80047b4:	460f      	mov	r7, r1
 80047b6:	f7fc f9cf 	bl	8000b58 <__aeabi_d2iz>
 80047ba:	2200      	movs	r2, #0
 80047bc:	4682      	mov	sl, r0
 80047be:	2300      	movs	r3, #0
 80047c0:	4630      	mov	r0, r6
 80047c2:	4639      	mov	r1, r7
 80047c4:	f7fc f98a 	bl	8000adc <__aeabi_dcmplt>
 80047c8:	b148      	cbz	r0, 80047de <_dtoa_r+0x186>
 80047ca:	4650      	mov	r0, sl
 80047cc:	f7fb feaa 	bl	8000524 <__aeabi_i2d>
 80047d0:	4632      	mov	r2, r6
 80047d2:	463b      	mov	r3, r7
 80047d4:	f7fc f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80047d8:	b908      	cbnz	r0, 80047de <_dtoa_r+0x186>
 80047da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047de:	f1ba 0f16 	cmp.w	sl, #22
 80047e2:	d854      	bhi.n	800488e <_dtoa_r+0x236>
 80047e4:	4b61      	ldr	r3, [pc, #388]	; (800496c <_dtoa_r+0x314>)
 80047e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047f2:	f7fc f973 	bl	8000adc <__aeabi_dcmplt>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d04b      	beq.n	8004892 <_dtoa_r+0x23a>
 80047fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047fe:	2300      	movs	r3, #0
 8004800:	930e      	str	r3, [sp, #56]	; 0x38
 8004802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004804:	1b5d      	subs	r5, r3, r5
 8004806:	1e6b      	subs	r3, r5, #1
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	bf43      	ittte	mi
 800480c:	2300      	movmi	r3, #0
 800480e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004812:	9304      	strmi	r3, [sp, #16]
 8004814:	f04f 0800 	movpl.w	r8, #0
 8004818:	f1ba 0f00 	cmp.w	sl, #0
 800481c:	db3b      	blt.n	8004896 <_dtoa_r+0x23e>
 800481e:	9b04      	ldr	r3, [sp, #16]
 8004820:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004824:	4453      	add	r3, sl
 8004826:	9304      	str	r3, [sp, #16]
 8004828:	2300      	movs	r3, #0
 800482a:	9306      	str	r3, [sp, #24]
 800482c:	9b05      	ldr	r3, [sp, #20]
 800482e:	2b09      	cmp	r3, #9
 8004830:	d869      	bhi.n	8004906 <_dtoa_r+0x2ae>
 8004832:	2b05      	cmp	r3, #5
 8004834:	bfc4      	itt	gt
 8004836:	3b04      	subgt	r3, #4
 8004838:	9305      	strgt	r3, [sp, #20]
 800483a:	9b05      	ldr	r3, [sp, #20]
 800483c:	f1a3 0302 	sub.w	r3, r3, #2
 8004840:	bfcc      	ite	gt
 8004842:	2500      	movgt	r5, #0
 8004844:	2501      	movle	r5, #1
 8004846:	2b03      	cmp	r3, #3
 8004848:	d869      	bhi.n	800491e <_dtoa_r+0x2c6>
 800484a:	e8df f003 	tbb	[pc, r3]
 800484e:	4e2c      	.short	0x4e2c
 8004850:	5a4c      	.short	0x5a4c
 8004852:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004856:	441d      	add	r5, r3
 8004858:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800485c:	2b20      	cmp	r3, #32
 800485e:	bfc1      	itttt	gt
 8004860:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004864:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004868:	fa09 f303 	lslgt.w	r3, r9, r3
 800486c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004870:	bfda      	itte	le
 8004872:	f1c3 0320 	rsble	r3, r3, #32
 8004876:	fa06 f003 	lslle.w	r0, r6, r3
 800487a:	4318      	orrgt	r0, r3
 800487c:	f7fb fe42 	bl	8000504 <__aeabi_ui2d>
 8004880:	2301      	movs	r3, #1
 8004882:	4606      	mov	r6, r0
 8004884:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004888:	3d01      	subs	r5, #1
 800488a:	9310      	str	r3, [sp, #64]	; 0x40
 800488c:	e771      	b.n	8004772 <_dtoa_r+0x11a>
 800488e:	2301      	movs	r3, #1
 8004890:	e7b6      	b.n	8004800 <_dtoa_r+0x1a8>
 8004892:	900e      	str	r0, [sp, #56]	; 0x38
 8004894:	e7b5      	b.n	8004802 <_dtoa_r+0x1aa>
 8004896:	f1ca 0300 	rsb	r3, sl, #0
 800489a:	9306      	str	r3, [sp, #24]
 800489c:	2300      	movs	r3, #0
 800489e:	eba8 080a 	sub.w	r8, r8, sl
 80048a2:	930d      	str	r3, [sp, #52]	; 0x34
 80048a4:	e7c2      	b.n	800482c <_dtoa_r+0x1d4>
 80048a6:	2300      	movs	r3, #0
 80048a8:	9308      	str	r3, [sp, #32]
 80048aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dc39      	bgt.n	8004924 <_dtoa_r+0x2cc>
 80048b0:	f04f 0901 	mov.w	r9, #1
 80048b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80048b8:	464b      	mov	r3, r9
 80048ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80048be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80048c0:	2200      	movs	r2, #0
 80048c2:	6042      	str	r2, [r0, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	f102 0614 	add.w	r6, r2, #20
 80048ca:	429e      	cmp	r6, r3
 80048cc:	6841      	ldr	r1, [r0, #4]
 80048ce:	d92f      	bls.n	8004930 <_dtoa_r+0x2d8>
 80048d0:	4620      	mov	r0, r4
 80048d2:	f001 f849 	bl	8005968 <_Balloc>
 80048d6:	9000      	str	r0, [sp, #0]
 80048d8:	2800      	cmp	r0, #0
 80048da:	d14b      	bne.n	8004974 <_dtoa_r+0x31c>
 80048dc:	4b24      	ldr	r3, [pc, #144]	; (8004970 <_dtoa_r+0x318>)
 80048de:	4602      	mov	r2, r0
 80048e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80048e4:	e6d1      	b.n	800468a <_dtoa_r+0x32>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e7de      	b.n	80048a8 <_dtoa_r+0x250>
 80048ea:	2300      	movs	r3, #0
 80048ec:	9308      	str	r3, [sp, #32]
 80048ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f0:	eb0a 0903 	add.w	r9, sl, r3
 80048f4:	f109 0301 	add.w	r3, r9, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	bfb8      	it	lt
 80048fe:	2301      	movlt	r3, #1
 8004900:	e7dd      	b.n	80048be <_dtoa_r+0x266>
 8004902:	2301      	movs	r3, #1
 8004904:	e7f2      	b.n	80048ec <_dtoa_r+0x294>
 8004906:	2501      	movs	r5, #1
 8004908:	2300      	movs	r3, #0
 800490a:	9305      	str	r3, [sp, #20]
 800490c:	9508      	str	r5, [sp, #32]
 800490e:	f04f 39ff 	mov.w	r9, #4294967295
 8004912:	2200      	movs	r2, #0
 8004914:	f8cd 9004 	str.w	r9, [sp, #4]
 8004918:	2312      	movs	r3, #18
 800491a:	9209      	str	r2, [sp, #36]	; 0x24
 800491c:	e7cf      	b.n	80048be <_dtoa_r+0x266>
 800491e:	2301      	movs	r3, #1
 8004920:	9308      	str	r3, [sp, #32]
 8004922:	e7f4      	b.n	800490e <_dtoa_r+0x2b6>
 8004924:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004928:	f8cd 9004 	str.w	r9, [sp, #4]
 800492c:	464b      	mov	r3, r9
 800492e:	e7c6      	b.n	80048be <_dtoa_r+0x266>
 8004930:	3101      	adds	r1, #1
 8004932:	6041      	str	r1, [r0, #4]
 8004934:	0052      	lsls	r2, r2, #1
 8004936:	e7c6      	b.n	80048c6 <_dtoa_r+0x26e>
 8004938:	636f4361 	.word	0x636f4361
 800493c:	3fd287a7 	.word	0x3fd287a7
 8004940:	8b60c8b3 	.word	0x8b60c8b3
 8004944:	3fc68a28 	.word	0x3fc68a28
 8004948:	509f79fb 	.word	0x509f79fb
 800494c:	3fd34413 	.word	0x3fd34413
 8004950:	08007556 	.word	0x08007556
 8004954:	0800756d 	.word	0x0800756d
 8004958:	7ff00000 	.word	0x7ff00000
 800495c:	08007552 	.word	0x08007552
 8004960:	08007549 	.word	0x08007549
 8004964:	080073cd 	.word	0x080073cd
 8004968:	3ff80000 	.word	0x3ff80000
 800496c:	080076e8 	.word	0x080076e8
 8004970:	080075cc 	.word	0x080075cc
 8004974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004976:	9a00      	ldr	r2, [sp, #0]
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	9b01      	ldr	r3, [sp, #4]
 800497c:	2b0e      	cmp	r3, #14
 800497e:	f200 80ad 	bhi.w	8004adc <_dtoa_r+0x484>
 8004982:	2d00      	cmp	r5, #0
 8004984:	f000 80aa 	beq.w	8004adc <_dtoa_r+0x484>
 8004988:	f1ba 0f00 	cmp.w	sl, #0
 800498c:	dd36      	ble.n	80049fc <_dtoa_r+0x3a4>
 800498e:	4ac3      	ldr	r2, [pc, #780]	; (8004c9c <_dtoa_r+0x644>)
 8004990:	f00a 030f 	and.w	r3, sl, #15
 8004994:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004998:	ed93 7b00 	vldr	d7, [r3]
 800499c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80049a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80049a4:	eeb0 8a47 	vmov.f32	s16, s14
 80049a8:	eef0 8a67 	vmov.f32	s17, s15
 80049ac:	d016      	beq.n	80049dc <_dtoa_r+0x384>
 80049ae:	4bbc      	ldr	r3, [pc, #752]	; (8004ca0 <_dtoa_r+0x648>)
 80049b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049b8:	f7fb ff48 	bl	800084c <__aeabi_ddiv>
 80049bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049c0:	f007 070f 	and.w	r7, r7, #15
 80049c4:	2503      	movs	r5, #3
 80049c6:	4eb6      	ldr	r6, [pc, #728]	; (8004ca0 <_dtoa_r+0x648>)
 80049c8:	b957      	cbnz	r7, 80049e0 <_dtoa_r+0x388>
 80049ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ce:	ec53 2b18 	vmov	r2, r3, d8
 80049d2:	f7fb ff3b 	bl	800084c <__aeabi_ddiv>
 80049d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049da:	e029      	b.n	8004a30 <_dtoa_r+0x3d8>
 80049dc:	2502      	movs	r5, #2
 80049de:	e7f2      	b.n	80049c6 <_dtoa_r+0x36e>
 80049e0:	07f9      	lsls	r1, r7, #31
 80049e2:	d508      	bpl.n	80049f6 <_dtoa_r+0x39e>
 80049e4:	ec51 0b18 	vmov	r0, r1, d8
 80049e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049ec:	f7fb fe04 	bl	80005f8 <__aeabi_dmul>
 80049f0:	ec41 0b18 	vmov	d8, r0, r1
 80049f4:	3501      	adds	r5, #1
 80049f6:	107f      	asrs	r7, r7, #1
 80049f8:	3608      	adds	r6, #8
 80049fa:	e7e5      	b.n	80049c8 <_dtoa_r+0x370>
 80049fc:	f000 80a6 	beq.w	8004b4c <_dtoa_r+0x4f4>
 8004a00:	f1ca 0600 	rsb	r6, sl, #0
 8004a04:	4ba5      	ldr	r3, [pc, #660]	; (8004c9c <_dtoa_r+0x644>)
 8004a06:	4fa6      	ldr	r7, [pc, #664]	; (8004ca0 <_dtoa_r+0x648>)
 8004a08:	f006 020f 	and.w	r2, r6, #15
 8004a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a18:	f7fb fdee 	bl	80005f8 <__aeabi_dmul>
 8004a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a20:	1136      	asrs	r6, r6, #4
 8004a22:	2300      	movs	r3, #0
 8004a24:	2502      	movs	r5, #2
 8004a26:	2e00      	cmp	r6, #0
 8004a28:	f040 8085 	bne.w	8004b36 <_dtoa_r+0x4de>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1d2      	bne.n	80049d6 <_dtoa_r+0x37e>
 8004a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 808c 	beq.w	8004b50 <_dtoa_r+0x4f8>
 8004a38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a3c:	4b99      	ldr	r3, [pc, #612]	; (8004ca4 <_dtoa_r+0x64c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4630      	mov	r0, r6
 8004a42:	4639      	mov	r1, r7
 8004a44:	f7fc f84a 	bl	8000adc <__aeabi_dcmplt>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	f000 8081 	beq.w	8004b50 <_dtoa_r+0x4f8>
 8004a4e:	9b01      	ldr	r3, [sp, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d07d      	beq.n	8004b50 <_dtoa_r+0x4f8>
 8004a54:	f1b9 0f00 	cmp.w	r9, #0
 8004a58:	dd3c      	ble.n	8004ad4 <_dtoa_r+0x47c>
 8004a5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004a5e:	9307      	str	r3, [sp, #28]
 8004a60:	2200      	movs	r2, #0
 8004a62:	4b91      	ldr	r3, [pc, #580]	; (8004ca8 <_dtoa_r+0x650>)
 8004a64:	4630      	mov	r0, r6
 8004a66:	4639      	mov	r1, r7
 8004a68:	f7fb fdc6 	bl	80005f8 <__aeabi_dmul>
 8004a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a70:	3501      	adds	r5, #1
 8004a72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004a76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f7fb fd52 	bl	8000524 <__aeabi_i2d>
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	f7fb fdb8 	bl	80005f8 <__aeabi_dmul>
 8004a88:	4b88      	ldr	r3, [pc, #544]	; (8004cac <_dtoa_r+0x654>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f7fb fbfe 	bl	800028c <__adddf3>
 8004a90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d15c      	bne.n	8004b5a <_dtoa_r+0x502>
 8004aa0:	4b83      	ldr	r3, [pc, #524]	; (8004cb0 <_dtoa_r+0x658>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	f7fb fbee 	bl	8000288 <__aeabi_dsub>
 8004aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	460f      	mov	r7, r1
 8004ab4:	f7fc f830 	bl	8000b18 <__aeabi_dcmpgt>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	f040 8296 	bne.w	8004fea <_dtoa_r+0x992>
 8004abe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f7fc f807 	bl	8000adc <__aeabi_dcmplt>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f040 8288 	bne.w	8004fe4 <_dtoa_r+0x98c>
 8004ad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004adc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f2c0 8158 	blt.w	8004d94 <_dtoa_r+0x73c>
 8004ae4:	f1ba 0f0e 	cmp.w	sl, #14
 8004ae8:	f300 8154 	bgt.w	8004d94 <_dtoa_r+0x73c>
 8004aec:	4b6b      	ldr	r3, [pc, #428]	; (8004c9c <_dtoa_r+0x644>)
 8004aee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004af2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f280 80e3 	bge.w	8004cc4 <_dtoa_r+0x66c>
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f300 80df 	bgt.w	8004cc4 <_dtoa_r+0x66c>
 8004b06:	f040 826d 	bne.w	8004fe4 <_dtoa_r+0x98c>
 8004b0a:	4b69      	ldr	r3, [pc, #420]	; (8004cb0 <_dtoa_r+0x658>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4640      	mov	r0, r8
 8004b10:	4649      	mov	r1, r9
 8004b12:	f7fb fd71 	bl	80005f8 <__aeabi_dmul>
 8004b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b1a:	f7fb fff3 	bl	8000b04 <__aeabi_dcmpge>
 8004b1e:	9e01      	ldr	r6, [sp, #4]
 8004b20:	4637      	mov	r7, r6
 8004b22:	2800      	cmp	r0, #0
 8004b24:	f040 8243 	bne.w	8004fae <_dtoa_r+0x956>
 8004b28:	9d00      	ldr	r5, [sp, #0]
 8004b2a:	2331      	movs	r3, #49	; 0x31
 8004b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8004b30:	f10a 0a01 	add.w	sl, sl, #1
 8004b34:	e23f      	b.n	8004fb6 <_dtoa_r+0x95e>
 8004b36:	07f2      	lsls	r2, r6, #31
 8004b38:	d505      	bpl.n	8004b46 <_dtoa_r+0x4ee>
 8004b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b3e:	f7fb fd5b 	bl	80005f8 <__aeabi_dmul>
 8004b42:	3501      	adds	r5, #1
 8004b44:	2301      	movs	r3, #1
 8004b46:	1076      	asrs	r6, r6, #1
 8004b48:	3708      	adds	r7, #8
 8004b4a:	e76c      	b.n	8004a26 <_dtoa_r+0x3ce>
 8004b4c:	2502      	movs	r5, #2
 8004b4e:	e76f      	b.n	8004a30 <_dtoa_r+0x3d8>
 8004b50:	9b01      	ldr	r3, [sp, #4]
 8004b52:	f8cd a01c 	str.w	sl, [sp, #28]
 8004b56:	930c      	str	r3, [sp, #48]	; 0x30
 8004b58:	e78d      	b.n	8004a76 <_dtoa_r+0x41e>
 8004b5a:	9900      	ldr	r1, [sp, #0]
 8004b5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b60:	4b4e      	ldr	r3, [pc, #312]	; (8004c9c <_dtoa_r+0x644>)
 8004b62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b66:	4401      	add	r1, r0
 8004b68:	9102      	str	r1, [sp, #8]
 8004b6a:	9908      	ldr	r1, [sp, #32]
 8004b6c:	eeb0 8a47 	vmov.f32	s16, s14
 8004b70:	eef0 8a67 	vmov.f32	s17, s15
 8004b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	d045      	beq.n	8004c0c <_dtoa_r+0x5b4>
 8004b80:	494c      	ldr	r1, [pc, #304]	; (8004cb4 <_dtoa_r+0x65c>)
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7fb fe62 	bl	800084c <__aeabi_ddiv>
 8004b88:	ec53 2b18 	vmov	r2, r3, d8
 8004b8c:	f7fb fb7c 	bl	8000288 <__aeabi_dsub>
 8004b90:	9d00      	ldr	r5, [sp, #0]
 8004b92:	ec41 0b18 	vmov	d8, r0, r1
 8004b96:	4639      	mov	r1, r7
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f7fb ffdd 	bl	8000b58 <__aeabi_d2iz>
 8004b9e:	900c      	str	r0, [sp, #48]	; 0x30
 8004ba0:	f7fb fcc0 	bl	8000524 <__aeabi_i2d>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4630      	mov	r0, r6
 8004baa:	4639      	mov	r1, r7
 8004bac:	f7fb fb6c 	bl	8000288 <__aeabi_dsub>
 8004bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bb2:	3330      	adds	r3, #48	; 0x30
 8004bb4:	f805 3b01 	strb.w	r3, [r5], #1
 8004bb8:	ec53 2b18 	vmov	r2, r3, d8
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	460f      	mov	r7, r1
 8004bc0:	f7fb ff8c 	bl	8000adc <__aeabi_dcmplt>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d165      	bne.n	8004c94 <_dtoa_r+0x63c>
 8004bc8:	4632      	mov	r2, r6
 8004bca:	463b      	mov	r3, r7
 8004bcc:	4935      	ldr	r1, [pc, #212]	; (8004ca4 <_dtoa_r+0x64c>)
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7fb fb5a 	bl	8000288 <__aeabi_dsub>
 8004bd4:	ec53 2b18 	vmov	r2, r3, d8
 8004bd8:	f7fb ff80 	bl	8000adc <__aeabi_dcmplt>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f040 80b9 	bne.w	8004d54 <_dtoa_r+0x6fc>
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	429d      	cmp	r5, r3
 8004be6:	f43f af75 	beq.w	8004ad4 <_dtoa_r+0x47c>
 8004bea:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <_dtoa_r+0x650>)
 8004bec:	ec51 0b18 	vmov	r0, r1, d8
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f7fb fd01 	bl	80005f8 <__aeabi_dmul>
 8004bf6:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <_dtoa_r+0x650>)
 8004bf8:	ec41 0b18 	vmov	d8, r0, r1
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4630      	mov	r0, r6
 8004c00:	4639      	mov	r1, r7
 8004c02:	f7fb fcf9 	bl	80005f8 <__aeabi_dmul>
 8004c06:	4606      	mov	r6, r0
 8004c08:	460f      	mov	r7, r1
 8004c0a:	e7c4      	b.n	8004b96 <_dtoa_r+0x53e>
 8004c0c:	ec51 0b17 	vmov	r0, r1, d7
 8004c10:	f7fb fcf2 	bl	80005f8 <__aeabi_dmul>
 8004c14:	9b02      	ldr	r3, [sp, #8]
 8004c16:	9d00      	ldr	r5, [sp, #0]
 8004c18:	930c      	str	r3, [sp, #48]	; 0x30
 8004c1a:	ec41 0b18 	vmov	d8, r0, r1
 8004c1e:	4639      	mov	r1, r7
 8004c20:	4630      	mov	r0, r6
 8004c22:	f7fb ff99 	bl	8000b58 <__aeabi_d2iz>
 8004c26:	9011      	str	r0, [sp, #68]	; 0x44
 8004c28:	f7fb fc7c 	bl	8000524 <__aeabi_i2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4630      	mov	r0, r6
 8004c32:	4639      	mov	r1, r7
 8004c34:	f7fb fb28 	bl	8000288 <__aeabi_dsub>
 8004c38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c3a:	3330      	adds	r3, #48	; 0x30
 8004c3c:	f805 3b01 	strb.w	r3, [r5], #1
 8004c40:	9b02      	ldr	r3, [sp, #8]
 8004c42:	429d      	cmp	r5, r3
 8004c44:	4606      	mov	r6, r0
 8004c46:	460f      	mov	r7, r1
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	d134      	bne.n	8004cb8 <_dtoa_r+0x660>
 8004c4e:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <_dtoa_r+0x65c>)
 8004c50:	ec51 0b18 	vmov	r0, r1, d8
 8004c54:	f7fb fb1a 	bl	800028c <__adddf3>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f7fb ff5a 	bl	8000b18 <__aeabi_dcmpgt>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d175      	bne.n	8004d54 <_dtoa_r+0x6fc>
 8004c68:	ec53 2b18 	vmov	r2, r3, d8
 8004c6c:	4911      	ldr	r1, [pc, #68]	; (8004cb4 <_dtoa_r+0x65c>)
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7fb fb0a 	bl	8000288 <__aeabi_dsub>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4630      	mov	r0, r6
 8004c7a:	4639      	mov	r1, r7
 8004c7c:	f7fb ff2e 	bl	8000adc <__aeabi_dcmplt>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f43f af27 	beq.w	8004ad4 <_dtoa_r+0x47c>
 8004c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c88:	1e6b      	subs	r3, r5, #1
 8004c8a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	d0f8      	beq.n	8004c86 <_dtoa_r+0x62e>
 8004c94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004c98:	e04a      	b.n	8004d30 <_dtoa_r+0x6d8>
 8004c9a:	bf00      	nop
 8004c9c:	080076e8 	.word	0x080076e8
 8004ca0:	080076c0 	.word	0x080076c0
 8004ca4:	3ff00000 	.word	0x3ff00000
 8004ca8:	40240000 	.word	0x40240000
 8004cac:	401c0000 	.word	0x401c0000
 8004cb0:	40140000 	.word	0x40140000
 8004cb4:	3fe00000 	.word	0x3fe00000
 8004cb8:	4baf      	ldr	r3, [pc, #700]	; (8004f78 <_dtoa_r+0x920>)
 8004cba:	f7fb fc9d 	bl	80005f8 <__aeabi_dmul>
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460f      	mov	r7, r1
 8004cc2:	e7ac      	b.n	8004c1e <_dtoa_r+0x5c6>
 8004cc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cc8:	9d00      	ldr	r5, [sp, #0]
 8004cca:	4642      	mov	r2, r8
 8004ccc:	464b      	mov	r3, r9
 8004cce:	4630      	mov	r0, r6
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	f7fb fdbb 	bl	800084c <__aeabi_ddiv>
 8004cd6:	f7fb ff3f 	bl	8000b58 <__aeabi_d2iz>
 8004cda:	9002      	str	r0, [sp, #8]
 8004cdc:	f7fb fc22 	bl	8000524 <__aeabi_i2d>
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	f7fb fc88 	bl	80005f8 <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4630      	mov	r0, r6
 8004cee:	4639      	mov	r1, r7
 8004cf0:	f7fb faca 	bl	8000288 <__aeabi_dsub>
 8004cf4:	9e02      	ldr	r6, [sp, #8]
 8004cf6:	9f01      	ldr	r7, [sp, #4]
 8004cf8:	3630      	adds	r6, #48	; 0x30
 8004cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8004cfe:	9e00      	ldr	r6, [sp, #0]
 8004d00:	1bae      	subs	r6, r5, r6
 8004d02:	42b7      	cmp	r7, r6
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	d137      	bne.n	8004d7a <_dtoa_r+0x722>
 8004d0a:	f7fb fabf 	bl	800028c <__adddf3>
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	4606      	mov	r6, r0
 8004d14:	460f      	mov	r7, r1
 8004d16:	f7fb feff 	bl	8000b18 <__aeabi_dcmpgt>
 8004d1a:	b9c8      	cbnz	r0, 8004d50 <_dtoa_r+0x6f8>
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	4630      	mov	r0, r6
 8004d22:	4639      	mov	r1, r7
 8004d24:	f7fb fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d28:	b110      	cbz	r0, 8004d30 <_dtoa_r+0x6d8>
 8004d2a:	9b02      	ldr	r3, [sp, #8]
 8004d2c:	07d9      	lsls	r1, r3, #31
 8004d2e:	d40f      	bmi.n	8004d50 <_dtoa_r+0x6f8>
 8004d30:	4620      	mov	r0, r4
 8004d32:	4659      	mov	r1, fp
 8004d34:	f000 fe58 	bl	80059e8 <_Bfree>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	702b      	strb	r3, [r5, #0]
 8004d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d3e:	f10a 0001 	add.w	r0, sl, #1
 8004d42:	6018      	str	r0, [r3, #0]
 8004d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f43f acd8 	beq.w	80046fc <_dtoa_r+0xa4>
 8004d4c:	601d      	str	r5, [r3, #0]
 8004d4e:	e4d5      	b.n	80046fc <_dtoa_r+0xa4>
 8004d50:	f8cd a01c 	str.w	sl, [sp, #28]
 8004d54:	462b      	mov	r3, r5
 8004d56:	461d      	mov	r5, r3
 8004d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d5c:	2a39      	cmp	r2, #57	; 0x39
 8004d5e:	d108      	bne.n	8004d72 <_dtoa_r+0x71a>
 8004d60:	9a00      	ldr	r2, [sp, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d1f7      	bne.n	8004d56 <_dtoa_r+0x6fe>
 8004d66:	9a07      	ldr	r2, [sp, #28]
 8004d68:	9900      	ldr	r1, [sp, #0]
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	9207      	str	r2, [sp, #28]
 8004d6e:	2230      	movs	r2, #48	; 0x30
 8004d70:	700a      	strb	r2, [r1, #0]
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	3201      	adds	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e78c      	b.n	8004c94 <_dtoa_r+0x63c>
 8004d7a:	4b7f      	ldr	r3, [pc, #508]	; (8004f78 <_dtoa_r+0x920>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f7fb fc3b 	bl	80005f8 <__aeabi_dmul>
 8004d82:	2200      	movs	r2, #0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4606      	mov	r6, r0
 8004d88:	460f      	mov	r7, r1
 8004d8a:	f7fb fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d09b      	beq.n	8004cca <_dtoa_r+0x672>
 8004d92:	e7cd      	b.n	8004d30 <_dtoa_r+0x6d8>
 8004d94:	9a08      	ldr	r2, [sp, #32]
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	f000 80c4 	beq.w	8004f24 <_dtoa_r+0x8cc>
 8004d9c:	9a05      	ldr	r2, [sp, #20]
 8004d9e:	2a01      	cmp	r2, #1
 8004da0:	f300 80a8 	bgt.w	8004ef4 <_dtoa_r+0x89c>
 8004da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	f000 80a0 	beq.w	8004eec <_dtoa_r+0x894>
 8004dac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004db0:	9e06      	ldr	r6, [sp, #24]
 8004db2:	4645      	mov	r5, r8
 8004db4:	9a04      	ldr	r2, [sp, #16]
 8004db6:	2101      	movs	r1, #1
 8004db8:	441a      	add	r2, r3
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4498      	add	r8, r3
 8004dbe:	9204      	str	r2, [sp, #16]
 8004dc0:	f000 ff18 	bl	8005bf4 <__i2b>
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	dd0b      	ble.n	8004de2 <_dtoa_r+0x78a>
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dd08      	ble.n	8004de2 <_dtoa_r+0x78a>
 8004dd0:	42ab      	cmp	r3, r5
 8004dd2:	9a04      	ldr	r2, [sp, #16]
 8004dd4:	bfa8      	it	ge
 8004dd6:	462b      	movge	r3, r5
 8004dd8:	eba8 0803 	sub.w	r8, r8, r3
 8004ddc:	1aed      	subs	r5, r5, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	9b06      	ldr	r3, [sp, #24]
 8004de4:	b1fb      	cbz	r3, 8004e26 <_dtoa_r+0x7ce>
 8004de6:	9b08      	ldr	r3, [sp, #32]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 809f 	beq.w	8004f2c <_dtoa_r+0x8d4>
 8004dee:	2e00      	cmp	r6, #0
 8004df0:	dd11      	ble.n	8004e16 <_dtoa_r+0x7be>
 8004df2:	4639      	mov	r1, r7
 8004df4:	4632      	mov	r2, r6
 8004df6:	4620      	mov	r0, r4
 8004df8:	f000 ffb8 	bl	8005d6c <__pow5mult>
 8004dfc:	465a      	mov	r2, fp
 8004dfe:	4601      	mov	r1, r0
 8004e00:	4607      	mov	r7, r0
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 ff0c 	bl	8005c20 <__multiply>
 8004e08:	4659      	mov	r1, fp
 8004e0a:	9007      	str	r0, [sp, #28]
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f000 fdeb 	bl	80059e8 <_Bfree>
 8004e12:	9b07      	ldr	r3, [sp, #28]
 8004e14:	469b      	mov	fp, r3
 8004e16:	9b06      	ldr	r3, [sp, #24]
 8004e18:	1b9a      	subs	r2, r3, r6
 8004e1a:	d004      	beq.n	8004e26 <_dtoa_r+0x7ce>
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 ffa4 	bl	8005d6c <__pow5mult>
 8004e24:	4683      	mov	fp, r0
 8004e26:	2101      	movs	r1, #1
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 fee3 	bl	8005bf4 <__i2b>
 8004e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	4606      	mov	r6, r0
 8004e34:	dd7c      	ble.n	8004f30 <_dtoa_r+0x8d8>
 8004e36:	461a      	mov	r2, r3
 8004e38:	4601      	mov	r1, r0
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 ff96 	bl	8005d6c <__pow5mult>
 8004e40:	9b05      	ldr	r3, [sp, #20]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	4606      	mov	r6, r0
 8004e46:	dd76      	ble.n	8004f36 <_dtoa_r+0x8de>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9306      	str	r3, [sp, #24]
 8004e4c:	6933      	ldr	r3, [r6, #16]
 8004e4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004e52:	6918      	ldr	r0, [r3, #16]
 8004e54:	f000 fe7e 	bl	8005b54 <__hi0bits>
 8004e58:	f1c0 0020 	rsb	r0, r0, #32
 8004e5c:	9b04      	ldr	r3, [sp, #16]
 8004e5e:	4418      	add	r0, r3
 8004e60:	f010 001f 	ands.w	r0, r0, #31
 8004e64:	f000 8086 	beq.w	8004f74 <_dtoa_r+0x91c>
 8004e68:	f1c0 0320 	rsb	r3, r0, #32
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	dd7f      	ble.n	8004f70 <_dtoa_r+0x918>
 8004e70:	f1c0 001c 	rsb	r0, r0, #28
 8004e74:	9b04      	ldr	r3, [sp, #16]
 8004e76:	4403      	add	r3, r0
 8004e78:	4480      	add	r8, r0
 8004e7a:	4405      	add	r5, r0
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	f1b8 0f00 	cmp.w	r8, #0
 8004e82:	dd05      	ble.n	8004e90 <_dtoa_r+0x838>
 8004e84:	4659      	mov	r1, fp
 8004e86:	4642      	mov	r2, r8
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 ffc9 	bl	8005e20 <__lshift>
 8004e8e:	4683      	mov	fp, r0
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dd05      	ble.n	8004ea2 <_dtoa_r+0x84a>
 8004e96:	4631      	mov	r1, r6
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 ffc0 	bl	8005e20 <__lshift>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d069      	beq.n	8004f7c <_dtoa_r+0x924>
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4658      	mov	r0, fp
 8004eac:	f001 f824 	bl	8005ef8 <__mcmp>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	da63      	bge.n	8004f7c <_dtoa_r+0x924>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4659      	mov	r1, fp
 8004eb8:	220a      	movs	r2, #10
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 fdb6 	bl	8005a2c <__multadd>
 8004ec0:	9b08      	ldr	r3, [sp, #32]
 8004ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ec6:	4683      	mov	fp, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 818f 	beq.w	80051ec <_dtoa_r+0xb94>
 8004ece:	4639      	mov	r1, r7
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f000 fda9 	bl	8005a2c <__multadd>
 8004eda:	f1b9 0f00 	cmp.w	r9, #0
 8004ede:	4607      	mov	r7, r0
 8004ee0:	f300 808e 	bgt.w	8005000 <_dtoa_r+0x9a8>
 8004ee4:	9b05      	ldr	r3, [sp, #20]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	dc50      	bgt.n	8004f8c <_dtoa_r+0x934>
 8004eea:	e089      	b.n	8005000 <_dtoa_r+0x9a8>
 8004eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ef2:	e75d      	b.n	8004db0 <_dtoa_r+0x758>
 8004ef4:	9b01      	ldr	r3, [sp, #4]
 8004ef6:	1e5e      	subs	r6, r3, #1
 8004ef8:	9b06      	ldr	r3, [sp, #24]
 8004efa:	42b3      	cmp	r3, r6
 8004efc:	bfbf      	itttt	lt
 8004efe:	9b06      	ldrlt	r3, [sp, #24]
 8004f00:	9606      	strlt	r6, [sp, #24]
 8004f02:	1af2      	sublt	r2, r6, r3
 8004f04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004f06:	bfb6      	itet	lt
 8004f08:	189b      	addlt	r3, r3, r2
 8004f0a:	1b9e      	subge	r6, r3, r6
 8004f0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	bfb8      	it	lt
 8004f12:	2600      	movlt	r6, #0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfb5      	itete	lt
 8004f18:	eba8 0503 	sublt.w	r5, r8, r3
 8004f1c:	9b01      	ldrge	r3, [sp, #4]
 8004f1e:	2300      	movlt	r3, #0
 8004f20:	4645      	movge	r5, r8
 8004f22:	e747      	b.n	8004db4 <_dtoa_r+0x75c>
 8004f24:	9e06      	ldr	r6, [sp, #24]
 8004f26:	9f08      	ldr	r7, [sp, #32]
 8004f28:	4645      	mov	r5, r8
 8004f2a:	e74c      	b.n	8004dc6 <_dtoa_r+0x76e>
 8004f2c:	9a06      	ldr	r2, [sp, #24]
 8004f2e:	e775      	b.n	8004e1c <_dtoa_r+0x7c4>
 8004f30:	9b05      	ldr	r3, [sp, #20]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	dc18      	bgt.n	8004f68 <_dtoa_r+0x910>
 8004f36:	9b02      	ldr	r3, [sp, #8]
 8004f38:	b9b3      	cbnz	r3, 8004f68 <_dtoa_r+0x910>
 8004f3a:	9b03      	ldr	r3, [sp, #12]
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	b9a3      	cbnz	r3, 8004f6c <_dtoa_r+0x914>
 8004f42:	9b03      	ldr	r3, [sp, #12]
 8004f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f48:	0d1b      	lsrs	r3, r3, #20
 8004f4a:	051b      	lsls	r3, r3, #20
 8004f4c:	b12b      	cbz	r3, 8004f5a <_dtoa_r+0x902>
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	3301      	adds	r3, #1
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	f108 0801 	add.w	r8, r8, #1
 8004f58:	2301      	movs	r3, #1
 8004f5a:	9306      	str	r3, [sp, #24]
 8004f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f47f af74 	bne.w	8004e4c <_dtoa_r+0x7f4>
 8004f64:	2001      	movs	r0, #1
 8004f66:	e779      	b.n	8004e5c <_dtoa_r+0x804>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e7f6      	b.n	8004f5a <_dtoa_r+0x902>
 8004f6c:	9b02      	ldr	r3, [sp, #8]
 8004f6e:	e7f4      	b.n	8004f5a <_dtoa_r+0x902>
 8004f70:	d085      	beq.n	8004e7e <_dtoa_r+0x826>
 8004f72:	4618      	mov	r0, r3
 8004f74:	301c      	adds	r0, #28
 8004f76:	e77d      	b.n	8004e74 <_dtoa_r+0x81c>
 8004f78:	40240000 	.word	0x40240000
 8004f7c:	9b01      	ldr	r3, [sp, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dc38      	bgt.n	8004ff4 <_dtoa_r+0x99c>
 8004f82:	9b05      	ldr	r3, [sp, #20]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	dd35      	ble.n	8004ff4 <_dtoa_r+0x99c>
 8004f88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004f8c:	f1b9 0f00 	cmp.w	r9, #0
 8004f90:	d10d      	bne.n	8004fae <_dtoa_r+0x956>
 8004f92:	4631      	mov	r1, r6
 8004f94:	464b      	mov	r3, r9
 8004f96:	2205      	movs	r2, #5
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 fd47 	bl	8005a2c <__multadd>
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	4658      	mov	r0, fp
 8004fa4:	f000 ffa8 	bl	8005ef8 <__mcmp>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f73f adbd 	bgt.w	8004b28 <_dtoa_r+0x4d0>
 8004fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb0:	9d00      	ldr	r5, [sp, #0]
 8004fb2:	ea6f 0a03 	mvn.w	sl, r3
 8004fb6:	f04f 0800 	mov.w	r8, #0
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f000 fd13 	bl	80059e8 <_Bfree>
 8004fc2:	2f00      	cmp	r7, #0
 8004fc4:	f43f aeb4 	beq.w	8004d30 <_dtoa_r+0x6d8>
 8004fc8:	f1b8 0f00 	cmp.w	r8, #0
 8004fcc:	d005      	beq.n	8004fda <_dtoa_r+0x982>
 8004fce:	45b8      	cmp	r8, r7
 8004fd0:	d003      	beq.n	8004fda <_dtoa_r+0x982>
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 fd07 	bl	80059e8 <_Bfree>
 8004fda:	4639      	mov	r1, r7
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f000 fd03 	bl	80059e8 <_Bfree>
 8004fe2:	e6a5      	b.n	8004d30 <_dtoa_r+0x6d8>
 8004fe4:	2600      	movs	r6, #0
 8004fe6:	4637      	mov	r7, r6
 8004fe8:	e7e1      	b.n	8004fae <_dtoa_r+0x956>
 8004fea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004fec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004ff0:	4637      	mov	r7, r6
 8004ff2:	e599      	b.n	8004b28 <_dtoa_r+0x4d0>
 8004ff4:	9b08      	ldr	r3, [sp, #32]
 8004ff6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80fd 	beq.w	80051fa <_dtoa_r+0xba2>
 8005000:	2d00      	cmp	r5, #0
 8005002:	dd05      	ble.n	8005010 <_dtoa_r+0x9b8>
 8005004:	4639      	mov	r1, r7
 8005006:	462a      	mov	r2, r5
 8005008:	4620      	mov	r0, r4
 800500a:	f000 ff09 	bl	8005e20 <__lshift>
 800500e:	4607      	mov	r7, r0
 8005010:	9b06      	ldr	r3, [sp, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d05c      	beq.n	80050d0 <_dtoa_r+0xa78>
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fca5 	bl	8005968 <_Balloc>
 800501e:	4605      	mov	r5, r0
 8005020:	b928      	cbnz	r0, 800502e <_dtoa_r+0x9d6>
 8005022:	4b80      	ldr	r3, [pc, #512]	; (8005224 <_dtoa_r+0xbcc>)
 8005024:	4602      	mov	r2, r0
 8005026:	f240 21ea 	movw	r1, #746	; 0x2ea
 800502a:	f7ff bb2e 	b.w	800468a <_dtoa_r+0x32>
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	3202      	adds	r2, #2
 8005032:	0092      	lsls	r2, r2, #2
 8005034:	f107 010c 	add.w	r1, r7, #12
 8005038:	300c      	adds	r0, #12
 800503a:	f000 fc87 	bl	800594c <memcpy>
 800503e:	2201      	movs	r2, #1
 8005040:	4629      	mov	r1, r5
 8005042:	4620      	mov	r0, r4
 8005044:	f000 feec 	bl	8005e20 <__lshift>
 8005048:	9b00      	ldr	r3, [sp, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	9b00      	ldr	r3, [sp, #0]
 8005050:	444b      	add	r3, r9
 8005052:	9307      	str	r3, [sp, #28]
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	46b8      	mov	r8, r7
 800505c:	9306      	str	r3, [sp, #24]
 800505e:	4607      	mov	r7, r0
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	4631      	mov	r1, r6
 8005064:	3b01      	subs	r3, #1
 8005066:	4658      	mov	r0, fp
 8005068:	9302      	str	r3, [sp, #8]
 800506a:	f7ff fa67 	bl	800453c <quorem>
 800506e:	4603      	mov	r3, r0
 8005070:	3330      	adds	r3, #48	; 0x30
 8005072:	9004      	str	r0, [sp, #16]
 8005074:	4641      	mov	r1, r8
 8005076:	4658      	mov	r0, fp
 8005078:	9308      	str	r3, [sp, #32]
 800507a:	f000 ff3d 	bl	8005ef8 <__mcmp>
 800507e:	463a      	mov	r2, r7
 8005080:	4681      	mov	r9, r0
 8005082:	4631      	mov	r1, r6
 8005084:	4620      	mov	r0, r4
 8005086:	f000 ff53 	bl	8005f30 <__mdiff>
 800508a:	68c2      	ldr	r2, [r0, #12]
 800508c:	9b08      	ldr	r3, [sp, #32]
 800508e:	4605      	mov	r5, r0
 8005090:	bb02      	cbnz	r2, 80050d4 <_dtoa_r+0xa7c>
 8005092:	4601      	mov	r1, r0
 8005094:	4658      	mov	r0, fp
 8005096:	f000 ff2f 	bl	8005ef8 <__mcmp>
 800509a:	9b08      	ldr	r3, [sp, #32]
 800509c:	4602      	mov	r2, r0
 800509e:	4629      	mov	r1, r5
 80050a0:	4620      	mov	r0, r4
 80050a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80050a6:	f000 fc9f 	bl	80059e8 <_Bfree>
 80050aa:	9b05      	ldr	r3, [sp, #20]
 80050ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ae:	9d01      	ldr	r5, [sp, #4]
 80050b0:	ea43 0102 	orr.w	r1, r3, r2
 80050b4:	9b06      	ldr	r3, [sp, #24]
 80050b6:	430b      	orrs	r3, r1
 80050b8:	9b08      	ldr	r3, [sp, #32]
 80050ba:	d10d      	bne.n	80050d8 <_dtoa_r+0xa80>
 80050bc:	2b39      	cmp	r3, #57	; 0x39
 80050be:	d029      	beq.n	8005114 <_dtoa_r+0xabc>
 80050c0:	f1b9 0f00 	cmp.w	r9, #0
 80050c4:	dd01      	ble.n	80050ca <_dtoa_r+0xa72>
 80050c6:	9b04      	ldr	r3, [sp, #16]
 80050c8:	3331      	adds	r3, #49	; 0x31
 80050ca:	9a02      	ldr	r2, [sp, #8]
 80050cc:	7013      	strb	r3, [r2, #0]
 80050ce:	e774      	b.n	8004fba <_dtoa_r+0x962>
 80050d0:	4638      	mov	r0, r7
 80050d2:	e7b9      	b.n	8005048 <_dtoa_r+0x9f0>
 80050d4:	2201      	movs	r2, #1
 80050d6:	e7e2      	b.n	800509e <_dtoa_r+0xa46>
 80050d8:	f1b9 0f00 	cmp.w	r9, #0
 80050dc:	db06      	blt.n	80050ec <_dtoa_r+0xa94>
 80050de:	9905      	ldr	r1, [sp, #20]
 80050e0:	ea41 0909 	orr.w	r9, r1, r9
 80050e4:	9906      	ldr	r1, [sp, #24]
 80050e6:	ea59 0101 	orrs.w	r1, r9, r1
 80050ea:	d120      	bne.n	800512e <_dtoa_r+0xad6>
 80050ec:	2a00      	cmp	r2, #0
 80050ee:	ddec      	ble.n	80050ca <_dtoa_r+0xa72>
 80050f0:	4659      	mov	r1, fp
 80050f2:	2201      	movs	r2, #1
 80050f4:	4620      	mov	r0, r4
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	f000 fe92 	bl	8005e20 <__lshift>
 80050fc:	4631      	mov	r1, r6
 80050fe:	4683      	mov	fp, r0
 8005100:	f000 fefa 	bl	8005ef8 <__mcmp>
 8005104:	2800      	cmp	r0, #0
 8005106:	9b01      	ldr	r3, [sp, #4]
 8005108:	dc02      	bgt.n	8005110 <_dtoa_r+0xab8>
 800510a:	d1de      	bne.n	80050ca <_dtoa_r+0xa72>
 800510c:	07da      	lsls	r2, r3, #31
 800510e:	d5dc      	bpl.n	80050ca <_dtoa_r+0xa72>
 8005110:	2b39      	cmp	r3, #57	; 0x39
 8005112:	d1d8      	bne.n	80050c6 <_dtoa_r+0xa6e>
 8005114:	9a02      	ldr	r2, [sp, #8]
 8005116:	2339      	movs	r3, #57	; 0x39
 8005118:	7013      	strb	r3, [r2, #0]
 800511a:	462b      	mov	r3, r5
 800511c:	461d      	mov	r5, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005124:	2a39      	cmp	r2, #57	; 0x39
 8005126:	d050      	beq.n	80051ca <_dtoa_r+0xb72>
 8005128:	3201      	adds	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e745      	b.n	8004fba <_dtoa_r+0x962>
 800512e:	2a00      	cmp	r2, #0
 8005130:	dd03      	ble.n	800513a <_dtoa_r+0xae2>
 8005132:	2b39      	cmp	r3, #57	; 0x39
 8005134:	d0ee      	beq.n	8005114 <_dtoa_r+0xabc>
 8005136:	3301      	adds	r3, #1
 8005138:	e7c7      	b.n	80050ca <_dtoa_r+0xa72>
 800513a:	9a01      	ldr	r2, [sp, #4]
 800513c:	9907      	ldr	r1, [sp, #28]
 800513e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005142:	428a      	cmp	r2, r1
 8005144:	d02a      	beq.n	800519c <_dtoa_r+0xb44>
 8005146:	4659      	mov	r1, fp
 8005148:	2300      	movs	r3, #0
 800514a:	220a      	movs	r2, #10
 800514c:	4620      	mov	r0, r4
 800514e:	f000 fc6d 	bl	8005a2c <__multadd>
 8005152:	45b8      	cmp	r8, r7
 8005154:	4683      	mov	fp, r0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	f04f 020a 	mov.w	r2, #10
 800515e:	4641      	mov	r1, r8
 8005160:	4620      	mov	r0, r4
 8005162:	d107      	bne.n	8005174 <_dtoa_r+0xb1c>
 8005164:	f000 fc62 	bl	8005a2c <__multadd>
 8005168:	4680      	mov	r8, r0
 800516a:	4607      	mov	r7, r0
 800516c:	9b01      	ldr	r3, [sp, #4]
 800516e:	3301      	adds	r3, #1
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	e775      	b.n	8005060 <_dtoa_r+0xa08>
 8005174:	f000 fc5a 	bl	8005a2c <__multadd>
 8005178:	4639      	mov	r1, r7
 800517a:	4680      	mov	r8, r0
 800517c:	2300      	movs	r3, #0
 800517e:	220a      	movs	r2, #10
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fc53 	bl	8005a2c <__multadd>
 8005186:	4607      	mov	r7, r0
 8005188:	e7f0      	b.n	800516c <_dtoa_r+0xb14>
 800518a:	f1b9 0f00 	cmp.w	r9, #0
 800518e:	9a00      	ldr	r2, [sp, #0]
 8005190:	bfcc      	ite	gt
 8005192:	464d      	movgt	r5, r9
 8005194:	2501      	movle	r5, #1
 8005196:	4415      	add	r5, r2
 8005198:	f04f 0800 	mov.w	r8, #0
 800519c:	4659      	mov	r1, fp
 800519e:	2201      	movs	r2, #1
 80051a0:	4620      	mov	r0, r4
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	f000 fe3c 	bl	8005e20 <__lshift>
 80051a8:	4631      	mov	r1, r6
 80051aa:	4683      	mov	fp, r0
 80051ac:	f000 fea4 	bl	8005ef8 <__mcmp>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	dcb2      	bgt.n	800511a <_dtoa_r+0xac2>
 80051b4:	d102      	bne.n	80051bc <_dtoa_r+0xb64>
 80051b6:	9b01      	ldr	r3, [sp, #4]
 80051b8:	07db      	lsls	r3, r3, #31
 80051ba:	d4ae      	bmi.n	800511a <_dtoa_r+0xac2>
 80051bc:	462b      	mov	r3, r5
 80051be:	461d      	mov	r5, r3
 80051c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051c4:	2a30      	cmp	r2, #48	; 0x30
 80051c6:	d0fa      	beq.n	80051be <_dtoa_r+0xb66>
 80051c8:	e6f7      	b.n	8004fba <_dtoa_r+0x962>
 80051ca:	9a00      	ldr	r2, [sp, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d1a5      	bne.n	800511c <_dtoa_r+0xac4>
 80051d0:	f10a 0a01 	add.w	sl, sl, #1
 80051d4:	2331      	movs	r3, #49	; 0x31
 80051d6:	e779      	b.n	80050cc <_dtoa_r+0xa74>
 80051d8:	4b13      	ldr	r3, [pc, #76]	; (8005228 <_dtoa_r+0xbd0>)
 80051da:	f7ff baaf 	b.w	800473c <_dtoa_r+0xe4>
 80051de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f47f aa86 	bne.w	80046f2 <_dtoa_r+0x9a>
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <_dtoa_r+0xbd4>)
 80051e8:	f7ff baa8 	b.w	800473c <_dtoa_r+0xe4>
 80051ec:	f1b9 0f00 	cmp.w	r9, #0
 80051f0:	dc03      	bgt.n	80051fa <_dtoa_r+0xba2>
 80051f2:	9b05      	ldr	r3, [sp, #20]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f73f aec9 	bgt.w	8004f8c <_dtoa_r+0x934>
 80051fa:	9d00      	ldr	r5, [sp, #0]
 80051fc:	4631      	mov	r1, r6
 80051fe:	4658      	mov	r0, fp
 8005200:	f7ff f99c 	bl	800453c <quorem>
 8005204:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005208:	f805 3b01 	strb.w	r3, [r5], #1
 800520c:	9a00      	ldr	r2, [sp, #0]
 800520e:	1aaa      	subs	r2, r5, r2
 8005210:	4591      	cmp	r9, r2
 8005212:	ddba      	ble.n	800518a <_dtoa_r+0xb32>
 8005214:	4659      	mov	r1, fp
 8005216:	2300      	movs	r3, #0
 8005218:	220a      	movs	r2, #10
 800521a:	4620      	mov	r0, r4
 800521c:	f000 fc06 	bl	8005a2c <__multadd>
 8005220:	4683      	mov	fp, r0
 8005222:	e7eb      	b.n	80051fc <_dtoa_r+0xba4>
 8005224:	080075cc 	.word	0x080075cc
 8005228:	080073cc 	.word	0x080073cc
 800522c:	08007549 	.word	0x08007549

08005230 <rshift>:
 8005230:	6903      	ldr	r3, [r0, #16]
 8005232:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005236:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800523a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800523e:	f100 0414 	add.w	r4, r0, #20
 8005242:	dd45      	ble.n	80052d0 <rshift+0xa0>
 8005244:	f011 011f 	ands.w	r1, r1, #31
 8005248:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800524c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005250:	d10c      	bne.n	800526c <rshift+0x3c>
 8005252:	f100 0710 	add.w	r7, r0, #16
 8005256:	4629      	mov	r1, r5
 8005258:	42b1      	cmp	r1, r6
 800525a:	d334      	bcc.n	80052c6 <rshift+0x96>
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	1eea      	subs	r2, r5, #3
 8005262:	4296      	cmp	r6, r2
 8005264:	bf38      	it	cc
 8005266:	2300      	movcc	r3, #0
 8005268:	4423      	add	r3, r4
 800526a:	e015      	b.n	8005298 <rshift+0x68>
 800526c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005270:	f1c1 0820 	rsb	r8, r1, #32
 8005274:	40cf      	lsrs	r7, r1
 8005276:	f105 0e04 	add.w	lr, r5, #4
 800527a:	46a1      	mov	r9, r4
 800527c:	4576      	cmp	r6, lr
 800527e:	46f4      	mov	ip, lr
 8005280:	d815      	bhi.n	80052ae <rshift+0x7e>
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009a      	lsls	r2, r3, #2
 8005286:	3a04      	subs	r2, #4
 8005288:	3501      	adds	r5, #1
 800528a:	42ae      	cmp	r6, r5
 800528c:	bf38      	it	cc
 800528e:	2200      	movcc	r2, #0
 8005290:	18a3      	adds	r3, r4, r2
 8005292:	50a7      	str	r7, [r4, r2]
 8005294:	b107      	cbz	r7, 8005298 <rshift+0x68>
 8005296:	3304      	adds	r3, #4
 8005298:	1b1a      	subs	r2, r3, r4
 800529a:	42a3      	cmp	r3, r4
 800529c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80052a0:	bf08      	it	eq
 80052a2:	2300      	moveq	r3, #0
 80052a4:	6102      	str	r2, [r0, #16]
 80052a6:	bf08      	it	eq
 80052a8:	6143      	streq	r3, [r0, #20]
 80052aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ae:	f8dc c000 	ldr.w	ip, [ip]
 80052b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80052b6:	ea4c 0707 	orr.w	r7, ip, r7
 80052ba:	f849 7b04 	str.w	r7, [r9], #4
 80052be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80052c2:	40cf      	lsrs	r7, r1
 80052c4:	e7da      	b.n	800527c <rshift+0x4c>
 80052c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80052ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80052ce:	e7c3      	b.n	8005258 <rshift+0x28>
 80052d0:	4623      	mov	r3, r4
 80052d2:	e7e1      	b.n	8005298 <rshift+0x68>

080052d4 <__hexdig_fun>:
 80052d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d802      	bhi.n	80052e2 <__hexdig_fun+0xe>
 80052dc:	3820      	subs	r0, #32
 80052de:	b2c0      	uxtb	r0, r0
 80052e0:	4770      	bx	lr
 80052e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d801      	bhi.n	80052ee <__hexdig_fun+0x1a>
 80052ea:	3847      	subs	r0, #71	; 0x47
 80052ec:	e7f7      	b.n	80052de <__hexdig_fun+0xa>
 80052ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d801      	bhi.n	80052fa <__hexdig_fun+0x26>
 80052f6:	3827      	subs	r0, #39	; 0x27
 80052f8:	e7f1      	b.n	80052de <__hexdig_fun+0xa>
 80052fa:	2000      	movs	r0, #0
 80052fc:	4770      	bx	lr
	...

08005300 <__gethex>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	ed2d 8b02 	vpush	{d8}
 8005308:	b089      	sub	sp, #36	; 0x24
 800530a:	ee08 0a10 	vmov	s16, r0
 800530e:	9304      	str	r3, [sp, #16]
 8005310:	4bbc      	ldr	r3, [pc, #752]	; (8005604 <__gethex+0x304>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	468b      	mov	fp, r1
 800531a:	4690      	mov	r8, r2
 800531c:	f7fa ff58 	bl	80001d0 <strlen>
 8005320:	9b01      	ldr	r3, [sp, #4]
 8005322:	f8db 2000 	ldr.w	r2, [fp]
 8005326:	4403      	add	r3, r0
 8005328:	4682      	mov	sl, r0
 800532a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800532e:	9305      	str	r3, [sp, #20]
 8005330:	1c93      	adds	r3, r2, #2
 8005332:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005336:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800533a:	32fe      	adds	r2, #254	; 0xfe
 800533c:	18d1      	adds	r1, r2, r3
 800533e:	461f      	mov	r7, r3
 8005340:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005344:	9100      	str	r1, [sp, #0]
 8005346:	2830      	cmp	r0, #48	; 0x30
 8005348:	d0f8      	beq.n	800533c <__gethex+0x3c>
 800534a:	f7ff ffc3 	bl	80052d4 <__hexdig_fun>
 800534e:	4604      	mov	r4, r0
 8005350:	2800      	cmp	r0, #0
 8005352:	d13a      	bne.n	80053ca <__gethex+0xca>
 8005354:	9901      	ldr	r1, [sp, #4]
 8005356:	4652      	mov	r2, sl
 8005358:	4638      	mov	r0, r7
 800535a:	f001 f9ed 	bl	8006738 <strncmp>
 800535e:	4605      	mov	r5, r0
 8005360:	2800      	cmp	r0, #0
 8005362:	d168      	bne.n	8005436 <__gethex+0x136>
 8005364:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005368:	eb07 060a 	add.w	r6, r7, sl
 800536c:	f7ff ffb2 	bl	80052d4 <__hexdig_fun>
 8005370:	2800      	cmp	r0, #0
 8005372:	d062      	beq.n	800543a <__gethex+0x13a>
 8005374:	4633      	mov	r3, r6
 8005376:	7818      	ldrb	r0, [r3, #0]
 8005378:	2830      	cmp	r0, #48	; 0x30
 800537a:	461f      	mov	r7, r3
 800537c:	f103 0301 	add.w	r3, r3, #1
 8005380:	d0f9      	beq.n	8005376 <__gethex+0x76>
 8005382:	f7ff ffa7 	bl	80052d4 <__hexdig_fun>
 8005386:	2301      	movs	r3, #1
 8005388:	fab0 f480 	clz	r4, r0
 800538c:	0964      	lsrs	r4, r4, #5
 800538e:	4635      	mov	r5, r6
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	463a      	mov	r2, r7
 8005394:	4616      	mov	r6, r2
 8005396:	3201      	adds	r2, #1
 8005398:	7830      	ldrb	r0, [r6, #0]
 800539a:	f7ff ff9b 	bl	80052d4 <__hexdig_fun>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d1f8      	bne.n	8005394 <__gethex+0x94>
 80053a2:	9901      	ldr	r1, [sp, #4]
 80053a4:	4652      	mov	r2, sl
 80053a6:	4630      	mov	r0, r6
 80053a8:	f001 f9c6 	bl	8006738 <strncmp>
 80053ac:	b980      	cbnz	r0, 80053d0 <__gethex+0xd0>
 80053ae:	b94d      	cbnz	r5, 80053c4 <__gethex+0xc4>
 80053b0:	eb06 050a 	add.w	r5, r6, sl
 80053b4:	462a      	mov	r2, r5
 80053b6:	4616      	mov	r6, r2
 80053b8:	3201      	adds	r2, #1
 80053ba:	7830      	ldrb	r0, [r6, #0]
 80053bc:	f7ff ff8a 	bl	80052d4 <__hexdig_fun>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d1f8      	bne.n	80053b6 <__gethex+0xb6>
 80053c4:	1bad      	subs	r5, r5, r6
 80053c6:	00ad      	lsls	r5, r5, #2
 80053c8:	e004      	b.n	80053d4 <__gethex+0xd4>
 80053ca:	2400      	movs	r4, #0
 80053cc:	4625      	mov	r5, r4
 80053ce:	e7e0      	b.n	8005392 <__gethex+0x92>
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	d1f7      	bne.n	80053c4 <__gethex+0xc4>
 80053d4:	7833      	ldrb	r3, [r6, #0]
 80053d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80053da:	2b50      	cmp	r3, #80	; 0x50
 80053dc:	d13b      	bne.n	8005456 <__gethex+0x156>
 80053de:	7873      	ldrb	r3, [r6, #1]
 80053e0:	2b2b      	cmp	r3, #43	; 0x2b
 80053e2:	d02c      	beq.n	800543e <__gethex+0x13e>
 80053e4:	2b2d      	cmp	r3, #45	; 0x2d
 80053e6:	d02e      	beq.n	8005446 <__gethex+0x146>
 80053e8:	1c71      	adds	r1, r6, #1
 80053ea:	f04f 0900 	mov.w	r9, #0
 80053ee:	7808      	ldrb	r0, [r1, #0]
 80053f0:	f7ff ff70 	bl	80052d4 <__hexdig_fun>
 80053f4:	1e43      	subs	r3, r0, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b18      	cmp	r3, #24
 80053fa:	d82c      	bhi.n	8005456 <__gethex+0x156>
 80053fc:	f1a0 0210 	sub.w	r2, r0, #16
 8005400:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005404:	f7ff ff66 	bl	80052d4 <__hexdig_fun>
 8005408:	1e43      	subs	r3, r0, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b18      	cmp	r3, #24
 800540e:	d91d      	bls.n	800544c <__gethex+0x14c>
 8005410:	f1b9 0f00 	cmp.w	r9, #0
 8005414:	d000      	beq.n	8005418 <__gethex+0x118>
 8005416:	4252      	negs	r2, r2
 8005418:	4415      	add	r5, r2
 800541a:	f8cb 1000 	str.w	r1, [fp]
 800541e:	b1e4      	cbz	r4, 800545a <__gethex+0x15a>
 8005420:	9b00      	ldr	r3, [sp, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	bf14      	ite	ne
 8005426:	2700      	movne	r7, #0
 8005428:	2706      	moveq	r7, #6
 800542a:	4638      	mov	r0, r7
 800542c:	b009      	add	sp, #36	; 0x24
 800542e:	ecbd 8b02 	vpop	{d8}
 8005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005436:	463e      	mov	r6, r7
 8005438:	4625      	mov	r5, r4
 800543a:	2401      	movs	r4, #1
 800543c:	e7ca      	b.n	80053d4 <__gethex+0xd4>
 800543e:	f04f 0900 	mov.w	r9, #0
 8005442:	1cb1      	adds	r1, r6, #2
 8005444:	e7d3      	b.n	80053ee <__gethex+0xee>
 8005446:	f04f 0901 	mov.w	r9, #1
 800544a:	e7fa      	b.n	8005442 <__gethex+0x142>
 800544c:	230a      	movs	r3, #10
 800544e:	fb03 0202 	mla	r2, r3, r2, r0
 8005452:	3a10      	subs	r2, #16
 8005454:	e7d4      	b.n	8005400 <__gethex+0x100>
 8005456:	4631      	mov	r1, r6
 8005458:	e7df      	b.n	800541a <__gethex+0x11a>
 800545a:	1bf3      	subs	r3, r6, r7
 800545c:	3b01      	subs	r3, #1
 800545e:	4621      	mov	r1, r4
 8005460:	2b07      	cmp	r3, #7
 8005462:	dc0b      	bgt.n	800547c <__gethex+0x17c>
 8005464:	ee18 0a10 	vmov	r0, s16
 8005468:	f000 fa7e 	bl	8005968 <_Balloc>
 800546c:	4604      	mov	r4, r0
 800546e:	b940      	cbnz	r0, 8005482 <__gethex+0x182>
 8005470:	4b65      	ldr	r3, [pc, #404]	; (8005608 <__gethex+0x308>)
 8005472:	4602      	mov	r2, r0
 8005474:	21de      	movs	r1, #222	; 0xde
 8005476:	4865      	ldr	r0, [pc, #404]	; (800560c <__gethex+0x30c>)
 8005478:	f001 f97e 	bl	8006778 <__assert_func>
 800547c:	3101      	adds	r1, #1
 800547e:	105b      	asrs	r3, r3, #1
 8005480:	e7ee      	b.n	8005460 <__gethex+0x160>
 8005482:	f100 0914 	add.w	r9, r0, #20
 8005486:	f04f 0b00 	mov.w	fp, #0
 800548a:	f1ca 0301 	rsb	r3, sl, #1
 800548e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005492:	f8cd b000 	str.w	fp, [sp]
 8005496:	9306      	str	r3, [sp, #24]
 8005498:	42b7      	cmp	r7, r6
 800549a:	d340      	bcc.n	800551e <__gethex+0x21e>
 800549c:	9802      	ldr	r0, [sp, #8]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	f840 3b04 	str.w	r3, [r0], #4
 80054a4:	eba0 0009 	sub.w	r0, r0, r9
 80054a8:	1080      	asrs	r0, r0, #2
 80054aa:	0146      	lsls	r6, r0, #5
 80054ac:	6120      	str	r0, [r4, #16]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fb50 	bl	8005b54 <__hi0bits>
 80054b4:	1a30      	subs	r0, r6, r0
 80054b6:	f8d8 6000 	ldr.w	r6, [r8]
 80054ba:	42b0      	cmp	r0, r6
 80054bc:	dd63      	ble.n	8005586 <__gethex+0x286>
 80054be:	1b87      	subs	r7, r0, r6
 80054c0:	4639      	mov	r1, r7
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 feea 	bl	800629c <__any_on>
 80054c8:	4682      	mov	sl, r0
 80054ca:	b1a8      	cbz	r0, 80054f8 <__gethex+0x1f8>
 80054cc:	1e7b      	subs	r3, r7, #1
 80054ce:	1159      	asrs	r1, r3, #5
 80054d0:	f003 021f 	and.w	r2, r3, #31
 80054d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80054d8:	f04f 0a01 	mov.w	sl, #1
 80054dc:	fa0a f202 	lsl.w	r2, sl, r2
 80054e0:	420a      	tst	r2, r1
 80054e2:	d009      	beq.n	80054f8 <__gethex+0x1f8>
 80054e4:	4553      	cmp	r3, sl
 80054e6:	dd05      	ble.n	80054f4 <__gethex+0x1f4>
 80054e8:	1eb9      	subs	r1, r7, #2
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 fed6 	bl	800629c <__any_on>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d145      	bne.n	8005580 <__gethex+0x280>
 80054f4:	f04f 0a02 	mov.w	sl, #2
 80054f8:	4639      	mov	r1, r7
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7ff fe98 	bl	8005230 <rshift>
 8005500:	443d      	add	r5, r7
 8005502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005506:	42ab      	cmp	r3, r5
 8005508:	da4c      	bge.n	80055a4 <__gethex+0x2a4>
 800550a:	ee18 0a10 	vmov	r0, s16
 800550e:	4621      	mov	r1, r4
 8005510:	f000 fa6a 	bl	80059e8 <_Bfree>
 8005514:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005516:	2300      	movs	r3, #0
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	27a3      	movs	r7, #163	; 0xa3
 800551c:	e785      	b.n	800542a <__gethex+0x12a>
 800551e:	1e73      	subs	r3, r6, #1
 8005520:	9a05      	ldr	r2, [sp, #20]
 8005522:	9303      	str	r3, [sp, #12]
 8005524:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005528:	4293      	cmp	r3, r2
 800552a:	d019      	beq.n	8005560 <__gethex+0x260>
 800552c:	f1bb 0f20 	cmp.w	fp, #32
 8005530:	d107      	bne.n	8005542 <__gethex+0x242>
 8005532:	9b02      	ldr	r3, [sp, #8]
 8005534:	9a00      	ldr	r2, [sp, #0]
 8005536:	f843 2b04 	str.w	r2, [r3], #4
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	2300      	movs	r3, #0
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	469b      	mov	fp, r3
 8005542:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005546:	f7ff fec5 	bl	80052d4 <__hexdig_fun>
 800554a:	9b00      	ldr	r3, [sp, #0]
 800554c:	f000 000f 	and.w	r0, r0, #15
 8005550:	fa00 f00b 	lsl.w	r0, r0, fp
 8005554:	4303      	orrs	r3, r0
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	f10b 0b04 	add.w	fp, fp, #4
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	e00d      	b.n	800557c <__gethex+0x27c>
 8005560:	9b03      	ldr	r3, [sp, #12]
 8005562:	9a06      	ldr	r2, [sp, #24]
 8005564:	4413      	add	r3, r2
 8005566:	42bb      	cmp	r3, r7
 8005568:	d3e0      	bcc.n	800552c <__gethex+0x22c>
 800556a:	4618      	mov	r0, r3
 800556c:	9901      	ldr	r1, [sp, #4]
 800556e:	9307      	str	r3, [sp, #28]
 8005570:	4652      	mov	r2, sl
 8005572:	f001 f8e1 	bl	8006738 <strncmp>
 8005576:	9b07      	ldr	r3, [sp, #28]
 8005578:	2800      	cmp	r0, #0
 800557a:	d1d7      	bne.n	800552c <__gethex+0x22c>
 800557c:	461e      	mov	r6, r3
 800557e:	e78b      	b.n	8005498 <__gethex+0x198>
 8005580:	f04f 0a03 	mov.w	sl, #3
 8005584:	e7b8      	b.n	80054f8 <__gethex+0x1f8>
 8005586:	da0a      	bge.n	800559e <__gethex+0x29e>
 8005588:	1a37      	subs	r7, r6, r0
 800558a:	4621      	mov	r1, r4
 800558c:	ee18 0a10 	vmov	r0, s16
 8005590:	463a      	mov	r2, r7
 8005592:	f000 fc45 	bl	8005e20 <__lshift>
 8005596:	1bed      	subs	r5, r5, r7
 8005598:	4604      	mov	r4, r0
 800559a:	f100 0914 	add.w	r9, r0, #20
 800559e:	f04f 0a00 	mov.w	sl, #0
 80055a2:	e7ae      	b.n	8005502 <__gethex+0x202>
 80055a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80055a8:	42a8      	cmp	r0, r5
 80055aa:	dd72      	ble.n	8005692 <__gethex+0x392>
 80055ac:	1b45      	subs	r5, r0, r5
 80055ae:	42ae      	cmp	r6, r5
 80055b0:	dc36      	bgt.n	8005620 <__gethex+0x320>
 80055b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d02a      	beq.n	8005610 <__gethex+0x310>
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d02c      	beq.n	8005618 <__gethex+0x318>
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d115      	bne.n	80055ee <__gethex+0x2ee>
 80055c2:	42ae      	cmp	r6, r5
 80055c4:	d113      	bne.n	80055ee <__gethex+0x2ee>
 80055c6:	2e01      	cmp	r6, #1
 80055c8:	d10b      	bne.n	80055e2 <__gethex+0x2e2>
 80055ca:	9a04      	ldr	r2, [sp, #16]
 80055cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	2301      	movs	r3, #1
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	f8c9 3000 	str.w	r3, [r9]
 80055da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055dc:	2762      	movs	r7, #98	; 0x62
 80055de:	601c      	str	r4, [r3, #0]
 80055e0:	e723      	b.n	800542a <__gethex+0x12a>
 80055e2:	1e71      	subs	r1, r6, #1
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 fe59 	bl	800629c <__any_on>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d1ed      	bne.n	80055ca <__gethex+0x2ca>
 80055ee:	ee18 0a10 	vmov	r0, s16
 80055f2:	4621      	mov	r1, r4
 80055f4:	f000 f9f8 	bl	80059e8 <_Bfree>
 80055f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055fa:	2300      	movs	r3, #0
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	2750      	movs	r7, #80	; 0x50
 8005600:	e713      	b.n	800542a <__gethex+0x12a>
 8005602:	bf00      	nop
 8005604:	08007648 	.word	0x08007648
 8005608:	080075cc 	.word	0x080075cc
 800560c:	080075dd 	.word	0x080075dd
 8005610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1eb      	bne.n	80055ee <__gethex+0x2ee>
 8005616:	e7d8      	b.n	80055ca <__gethex+0x2ca>
 8005618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d5      	bne.n	80055ca <__gethex+0x2ca>
 800561e:	e7e6      	b.n	80055ee <__gethex+0x2ee>
 8005620:	1e6f      	subs	r7, r5, #1
 8005622:	f1ba 0f00 	cmp.w	sl, #0
 8005626:	d131      	bne.n	800568c <__gethex+0x38c>
 8005628:	b127      	cbz	r7, 8005634 <__gethex+0x334>
 800562a:	4639      	mov	r1, r7
 800562c:	4620      	mov	r0, r4
 800562e:	f000 fe35 	bl	800629c <__any_on>
 8005632:	4682      	mov	sl, r0
 8005634:	117b      	asrs	r3, r7, #5
 8005636:	2101      	movs	r1, #1
 8005638:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800563c:	f007 071f 	and.w	r7, r7, #31
 8005640:	fa01 f707 	lsl.w	r7, r1, r7
 8005644:	421f      	tst	r7, r3
 8005646:	4629      	mov	r1, r5
 8005648:	4620      	mov	r0, r4
 800564a:	bf18      	it	ne
 800564c:	f04a 0a02 	orrne.w	sl, sl, #2
 8005650:	1b76      	subs	r6, r6, r5
 8005652:	f7ff fded 	bl	8005230 <rshift>
 8005656:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800565a:	2702      	movs	r7, #2
 800565c:	f1ba 0f00 	cmp.w	sl, #0
 8005660:	d048      	beq.n	80056f4 <__gethex+0x3f4>
 8005662:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d015      	beq.n	8005696 <__gethex+0x396>
 800566a:	2b03      	cmp	r3, #3
 800566c:	d017      	beq.n	800569e <__gethex+0x39e>
 800566e:	2b01      	cmp	r3, #1
 8005670:	d109      	bne.n	8005686 <__gethex+0x386>
 8005672:	f01a 0f02 	tst.w	sl, #2
 8005676:	d006      	beq.n	8005686 <__gethex+0x386>
 8005678:	f8d9 0000 	ldr.w	r0, [r9]
 800567c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005680:	f01a 0f01 	tst.w	sl, #1
 8005684:	d10e      	bne.n	80056a4 <__gethex+0x3a4>
 8005686:	f047 0710 	orr.w	r7, r7, #16
 800568a:	e033      	b.n	80056f4 <__gethex+0x3f4>
 800568c:	f04f 0a01 	mov.w	sl, #1
 8005690:	e7d0      	b.n	8005634 <__gethex+0x334>
 8005692:	2701      	movs	r7, #1
 8005694:	e7e2      	b.n	800565c <__gethex+0x35c>
 8005696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005698:	f1c3 0301 	rsb	r3, r3, #1
 800569c:	9315      	str	r3, [sp, #84]	; 0x54
 800569e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <__gethex+0x386>
 80056a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80056a8:	f104 0314 	add.w	r3, r4, #20
 80056ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80056b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80056b4:	f04f 0c00 	mov.w	ip, #0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80056be:	f1b2 3fff 	cmp.w	r2, #4294967295
 80056c2:	d01c      	beq.n	80056fe <__gethex+0x3fe>
 80056c4:	3201      	adds	r2, #1
 80056c6:	6002      	str	r2, [r0, #0]
 80056c8:	2f02      	cmp	r7, #2
 80056ca:	f104 0314 	add.w	r3, r4, #20
 80056ce:	d13f      	bne.n	8005750 <__gethex+0x450>
 80056d0:	f8d8 2000 	ldr.w	r2, [r8]
 80056d4:	3a01      	subs	r2, #1
 80056d6:	42b2      	cmp	r2, r6
 80056d8:	d10a      	bne.n	80056f0 <__gethex+0x3f0>
 80056da:	1171      	asrs	r1, r6, #5
 80056dc:	2201      	movs	r2, #1
 80056de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056e2:	f006 061f 	and.w	r6, r6, #31
 80056e6:	fa02 f606 	lsl.w	r6, r2, r6
 80056ea:	421e      	tst	r6, r3
 80056ec:	bf18      	it	ne
 80056ee:	4617      	movne	r7, r2
 80056f0:	f047 0720 	orr.w	r7, r7, #32
 80056f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056f6:	601c      	str	r4, [r3, #0]
 80056f8:	9b04      	ldr	r3, [sp, #16]
 80056fa:	601d      	str	r5, [r3, #0]
 80056fc:	e695      	b.n	800542a <__gethex+0x12a>
 80056fe:	4299      	cmp	r1, r3
 8005700:	f843 cc04 	str.w	ip, [r3, #-4]
 8005704:	d8d8      	bhi.n	80056b8 <__gethex+0x3b8>
 8005706:	68a3      	ldr	r3, [r4, #8]
 8005708:	459b      	cmp	fp, r3
 800570a:	db19      	blt.n	8005740 <__gethex+0x440>
 800570c:	6861      	ldr	r1, [r4, #4]
 800570e:	ee18 0a10 	vmov	r0, s16
 8005712:	3101      	adds	r1, #1
 8005714:	f000 f928 	bl	8005968 <_Balloc>
 8005718:	4681      	mov	r9, r0
 800571a:	b918      	cbnz	r0, 8005724 <__gethex+0x424>
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <__gethex+0x488>)
 800571e:	4602      	mov	r2, r0
 8005720:	2184      	movs	r1, #132	; 0x84
 8005722:	e6a8      	b.n	8005476 <__gethex+0x176>
 8005724:	6922      	ldr	r2, [r4, #16]
 8005726:	3202      	adds	r2, #2
 8005728:	f104 010c 	add.w	r1, r4, #12
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	300c      	adds	r0, #12
 8005730:	f000 f90c 	bl	800594c <memcpy>
 8005734:	4621      	mov	r1, r4
 8005736:	ee18 0a10 	vmov	r0, s16
 800573a:	f000 f955 	bl	80059e8 <_Bfree>
 800573e:	464c      	mov	r4, r9
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005748:	6122      	str	r2, [r4, #16]
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]
 800574e:	e7bb      	b.n	80056c8 <__gethex+0x3c8>
 8005750:	6922      	ldr	r2, [r4, #16]
 8005752:	455a      	cmp	r2, fp
 8005754:	dd0b      	ble.n	800576e <__gethex+0x46e>
 8005756:	2101      	movs	r1, #1
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff fd69 	bl	8005230 <rshift>
 800575e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005762:	3501      	adds	r5, #1
 8005764:	42ab      	cmp	r3, r5
 8005766:	f6ff aed0 	blt.w	800550a <__gethex+0x20a>
 800576a:	2701      	movs	r7, #1
 800576c:	e7c0      	b.n	80056f0 <__gethex+0x3f0>
 800576e:	f016 061f 	ands.w	r6, r6, #31
 8005772:	d0fa      	beq.n	800576a <__gethex+0x46a>
 8005774:	449a      	add	sl, r3
 8005776:	f1c6 0620 	rsb	r6, r6, #32
 800577a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800577e:	f000 f9e9 	bl	8005b54 <__hi0bits>
 8005782:	42b0      	cmp	r0, r6
 8005784:	dbe7      	blt.n	8005756 <__gethex+0x456>
 8005786:	e7f0      	b.n	800576a <__gethex+0x46a>
 8005788:	080075cc 	.word	0x080075cc

0800578c <L_shift>:
 800578c:	f1c2 0208 	rsb	r2, r2, #8
 8005790:	0092      	lsls	r2, r2, #2
 8005792:	b570      	push	{r4, r5, r6, lr}
 8005794:	f1c2 0620 	rsb	r6, r2, #32
 8005798:	6843      	ldr	r3, [r0, #4]
 800579a:	6804      	ldr	r4, [r0, #0]
 800579c:	fa03 f506 	lsl.w	r5, r3, r6
 80057a0:	432c      	orrs	r4, r5
 80057a2:	40d3      	lsrs	r3, r2
 80057a4:	6004      	str	r4, [r0, #0]
 80057a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80057aa:	4288      	cmp	r0, r1
 80057ac:	d3f4      	bcc.n	8005798 <L_shift+0xc>
 80057ae:	bd70      	pop	{r4, r5, r6, pc}

080057b0 <__match>:
 80057b0:	b530      	push	{r4, r5, lr}
 80057b2:	6803      	ldr	r3, [r0, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ba:	b914      	cbnz	r4, 80057c2 <__match+0x12>
 80057bc:	6003      	str	r3, [r0, #0]
 80057be:	2001      	movs	r0, #1
 80057c0:	bd30      	pop	{r4, r5, pc}
 80057c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80057ca:	2d19      	cmp	r5, #25
 80057cc:	bf98      	it	ls
 80057ce:	3220      	addls	r2, #32
 80057d0:	42a2      	cmp	r2, r4
 80057d2:	d0f0      	beq.n	80057b6 <__match+0x6>
 80057d4:	2000      	movs	r0, #0
 80057d6:	e7f3      	b.n	80057c0 <__match+0x10>

080057d8 <__hexnan>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	6801      	ldr	r1, [r0, #0]
 80057e0:	115e      	asrs	r6, r3, #5
 80057e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057e6:	f013 031f 	ands.w	r3, r3, #31
 80057ea:	b087      	sub	sp, #28
 80057ec:	bf18      	it	ne
 80057ee:	3604      	addne	r6, #4
 80057f0:	2500      	movs	r5, #0
 80057f2:	1f37      	subs	r7, r6, #4
 80057f4:	4682      	mov	sl, r0
 80057f6:	4690      	mov	r8, r2
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80057fe:	46b9      	mov	r9, r7
 8005800:	463c      	mov	r4, r7
 8005802:	9502      	str	r5, [sp, #8]
 8005804:	46ab      	mov	fp, r5
 8005806:	784a      	ldrb	r2, [r1, #1]
 8005808:	1c4b      	adds	r3, r1, #1
 800580a:	9303      	str	r3, [sp, #12]
 800580c:	b342      	cbz	r2, 8005860 <__hexnan+0x88>
 800580e:	4610      	mov	r0, r2
 8005810:	9105      	str	r1, [sp, #20]
 8005812:	9204      	str	r2, [sp, #16]
 8005814:	f7ff fd5e 	bl	80052d4 <__hexdig_fun>
 8005818:	2800      	cmp	r0, #0
 800581a:	d14f      	bne.n	80058bc <__hexnan+0xe4>
 800581c:	9a04      	ldr	r2, [sp, #16]
 800581e:	9905      	ldr	r1, [sp, #20]
 8005820:	2a20      	cmp	r2, #32
 8005822:	d818      	bhi.n	8005856 <__hexnan+0x7e>
 8005824:	9b02      	ldr	r3, [sp, #8]
 8005826:	459b      	cmp	fp, r3
 8005828:	dd13      	ble.n	8005852 <__hexnan+0x7a>
 800582a:	454c      	cmp	r4, r9
 800582c:	d206      	bcs.n	800583c <__hexnan+0x64>
 800582e:	2d07      	cmp	r5, #7
 8005830:	dc04      	bgt.n	800583c <__hexnan+0x64>
 8005832:	462a      	mov	r2, r5
 8005834:	4649      	mov	r1, r9
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff ffa8 	bl	800578c <L_shift>
 800583c:	4544      	cmp	r4, r8
 800583e:	d950      	bls.n	80058e2 <__hexnan+0x10a>
 8005840:	2300      	movs	r3, #0
 8005842:	f1a4 0904 	sub.w	r9, r4, #4
 8005846:	f844 3c04 	str.w	r3, [r4, #-4]
 800584a:	f8cd b008 	str.w	fp, [sp, #8]
 800584e:	464c      	mov	r4, r9
 8005850:	461d      	mov	r5, r3
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	e7d7      	b.n	8005806 <__hexnan+0x2e>
 8005856:	2a29      	cmp	r2, #41	; 0x29
 8005858:	d156      	bne.n	8005908 <__hexnan+0x130>
 800585a:	3102      	adds	r1, #2
 800585c:	f8ca 1000 	str.w	r1, [sl]
 8005860:	f1bb 0f00 	cmp.w	fp, #0
 8005864:	d050      	beq.n	8005908 <__hexnan+0x130>
 8005866:	454c      	cmp	r4, r9
 8005868:	d206      	bcs.n	8005878 <__hexnan+0xa0>
 800586a:	2d07      	cmp	r5, #7
 800586c:	dc04      	bgt.n	8005878 <__hexnan+0xa0>
 800586e:	462a      	mov	r2, r5
 8005870:	4649      	mov	r1, r9
 8005872:	4620      	mov	r0, r4
 8005874:	f7ff ff8a 	bl	800578c <L_shift>
 8005878:	4544      	cmp	r4, r8
 800587a:	d934      	bls.n	80058e6 <__hexnan+0x10e>
 800587c:	f1a8 0204 	sub.w	r2, r8, #4
 8005880:	4623      	mov	r3, r4
 8005882:	f853 1b04 	ldr.w	r1, [r3], #4
 8005886:	f842 1f04 	str.w	r1, [r2, #4]!
 800588a:	429f      	cmp	r7, r3
 800588c:	d2f9      	bcs.n	8005882 <__hexnan+0xaa>
 800588e:	1b3b      	subs	r3, r7, r4
 8005890:	f023 0303 	bic.w	r3, r3, #3
 8005894:	3304      	adds	r3, #4
 8005896:	3401      	adds	r4, #1
 8005898:	3e03      	subs	r6, #3
 800589a:	42b4      	cmp	r4, r6
 800589c:	bf88      	it	hi
 800589e:	2304      	movhi	r3, #4
 80058a0:	4443      	add	r3, r8
 80058a2:	2200      	movs	r2, #0
 80058a4:	f843 2b04 	str.w	r2, [r3], #4
 80058a8:	429f      	cmp	r7, r3
 80058aa:	d2fb      	bcs.n	80058a4 <__hexnan+0xcc>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	b91b      	cbnz	r3, 80058b8 <__hexnan+0xe0>
 80058b0:	4547      	cmp	r7, r8
 80058b2:	d127      	bne.n	8005904 <__hexnan+0x12c>
 80058b4:	2301      	movs	r3, #1
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	2005      	movs	r0, #5
 80058ba:	e026      	b.n	800590a <__hexnan+0x132>
 80058bc:	3501      	adds	r5, #1
 80058be:	2d08      	cmp	r5, #8
 80058c0:	f10b 0b01 	add.w	fp, fp, #1
 80058c4:	dd06      	ble.n	80058d4 <__hexnan+0xfc>
 80058c6:	4544      	cmp	r4, r8
 80058c8:	d9c3      	bls.n	8005852 <__hexnan+0x7a>
 80058ca:	2300      	movs	r3, #0
 80058cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80058d0:	2501      	movs	r5, #1
 80058d2:	3c04      	subs	r4, #4
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	f000 000f 	and.w	r0, r0, #15
 80058da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80058de:	6022      	str	r2, [r4, #0]
 80058e0:	e7b7      	b.n	8005852 <__hexnan+0x7a>
 80058e2:	2508      	movs	r5, #8
 80058e4:	e7b5      	b.n	8005852 <__hexnan+0x7a>
 80058e6:	9b01      	ldr	r3, [sp, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0df      	beq.n	80058ac <__hexnan+0xd4>
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295
 80058f0:	f1c3 0320 	rsb	r3, r3, #32
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
 80058f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80058fc:	401a      	ands	r2, r3
 80058fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8005902:	e7d3      	b.n	80058ac <__hexnan+0xd4>
 8005904:	3f04      	subs	r7, #4
 8005906:	e7d1      	b.n	80058ac <__hexnan+0xd4>
 8005908:	2004      	movs	r0, #4
 800590a:	b007      	add	sp, #28
 800590c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005910 <_localeconv_r>:
 8005910:	4800      	ldr	r0, [pc, #0]	; (8005914 <_localeconv_r+0x4>)
 8005912:	4770      	bx	lr
 8005914:	2000015c 	.word	0x2000015c

08005918 <malloc>:
 8005918:	4b02      	ldr	r3, [pc, #8]	; (8005924 <malloc+0xc>)
 800591a:	4601      	mov	r1, r0
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	f000 bd3d 	b.w	800639c <_malloc_r>
 8005922:	bf00      	nop
 8005924:	20000004 	.word	0x20000004

08005928 <__ascii_mbtowc>:
 8005928:	b082      	sub	sp, #8
 800592a:	b901      	cbnz	r1, 800592e <__ascii_mbtowc+0x6>
 800592c:	a901      	add	r1, sp, #4
 800592e:	b142      	cbz	r2, 8005942 <__ascii_mbtowc+0x1a>
 8005930:	b14b      	cbz	r3, 8005946 <__ascii_mbtowc+0x1e>
 8005932:	7813      	ldrb	r3, [r2, #0]
 8005934:	600b      	str	r3, [r1, #0]
 8005936:	7812      	ldrb	r2, [r2, #0]
 8005938:	1e10      	subs	r0, r2, #0
 800593a:	bf18      	it	ne
 800593c:	2001      	movne	r0, #1
 800593e:	b002      	add	sp, #8
 8005940:	4770      	bx	lr
 8005942:	4610      	mov	r0, r2
 8005944:	e7fb      	b.n	800593e <__ascii_mbtowc+0x16>
 8005946:	f06f 0001 	mvn.w	r0, #1
 800594a:	e7f8      	b.n	800593e <__ascii_mbtowc+0x16>

0800594c <memcpy>:
 800594c:	440a      	add	r2, r1
 800594e:	4291      	cmp	r1, r2
 8005950:	f100 33ff 	add.w	r3, r0, #4294967295
 8005954:	d100      	bne.n	8005958 <memcpy+0xc>
 8005956:	4770      	bx	lr
 8005958:	b510      	push	{r4, lr}
 800595a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800595e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005962:	4291      	cmp	r1, r2
 8005964:	d1f9      	bne.n	800595a <memcpy+0xe>
 8005966:	bd10      	pop	{r4, pc}

08005968 <_Balloc>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	b976      	cbnz	r6, 8005990 <_Balloc+0x28>
 8005972:	2010      	movs	r0, #16
 8005974:	f7ff ffd0 	bl	8005918 <malloc>
 8005978:	4602      	mov	r2, r0
 800597a:	6260      	str	r0, [r4, #36]	; 0x24
 800597c:	b920      	cbnz	r0, 8005988 <_Balloc+0x20>
 800597e:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <_Balloc+0x78>)
 8005980:	4818      	ldr	r0, [pc, #96]	; (80059e4 <_Balloc+0x7c>)
 8005982:	2166      	movs	r1, #102	; 0x66
 8005984:	f000 fef8 	bl	8006778 <__assert_func>
 8005988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800598c:	6006      	str	r6, [r0, #0]
 800598e:	60c6      	str	r6, [r0, #12]
 8005990:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005992:	68f3      	ldr	r3, [r6, #12]
 8005994:	b183      	cbz	r3, 80059b8 <_Balloc+0x50>
 8005996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800599e:	b9b8      	cbnz	r0, 80059d0 <_Balloc+0x68>
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f605 	lsl.w	r6, r1, r5
 80059a6:	1d72      	adds	r2, r6, #5
 80059a8:	0092      	lsls	r2, r2, #2
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 fc97 	bl	80062de <_calloc_r>
 80059b0:	b160      	cbz	r0, 80059cc <_Balloc+0x64>
 80059b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059b6:	e00e      	b.n	80059d6 <_Balloc+0x6e>
 80059b8:	2221      	movs	r2, #33	; 0x21
 80059ba:	2104      	movs	r1, #4
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 fc8e 	bl	80062de <_calloc_r>
 80059c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059c4:	60f0      	str	r0, [r6, #12]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e4      	bne.n	8005996 <_Balloc+0x2e>
 80059cc:	2000      	movs	r0, #0
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	6802      	ldr	r2, [r0, #0]
 80059d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059d6:	2300      	movs	r3, #0
 80059d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059dc:	e7f7      	b.n	80059ce <_Balloc+0x66>
 80059de:	bf00      	nop
 80059e0:	08007556 	.word	0x08007556
 80059e4:	0800765c 	.word	0x0800765c

080059e8 <_Bfree>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059ec:	4605      	mov	r5, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	b976      	cbnz	r6, 8005a10 <_Bfree+0x28>
 80059f2:	2010      	movs	r0, #16
 80059f4:	f7ff ff90 	bl	8005918 <malloc>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6268      	str	r0, [r5, #36]	; 0x24
 80059fc:	b920      	cbnz	r0, 8005a08 <_Bfree+0x20>
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <_Bfree+0x3c>)
 8005a00:	4809      	ldr	r0, [pc, #36]	; (8005a28 <_Bfree+0x40>)
 8005a02:	218a      	movs	r1, #138	; 0x8a
 8005a04:	f000 feb8 	bl	8006778 <__assert_func>
 8005a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a0c:	6006      	str	r6, [r0, #0]
 8005a0e:	60c6      	str	r6, [r0, #12]
 8005a10:	b13c      	cbz	r4, 8005a22 <_Bfree+0x3a>
 8005a12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a14:	6862      	ldr	r2, [r4, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a1c:	6021      	str	r1, [r4, #0]
 8005a1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	08007556 	.word	0x08007556
 8005a28:	0800765c 	.word	0x0800765c

08005a2c <__multadd>:
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	690e      	ldr	r6, [r1, #16]
 8005a32:	4607      	mov	r7, r0
 8005a34:	4698      	mov	r8, r3
 8005a36:	460c      	mov	r4, r1
 8005a38:	f101 0014 	add.w	r0, r1, #20
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6805      	ldr	r5, [r0, #0]
 8005a40:	b2a9      	uxth	r1, r5
 8005a42:	fb02 8101 	mla	r1, r2, r1, r8
 8005a46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a4a:	0c2d      	lsrs	r5, r5, #16
 8005a4c:	fb02 c505 	mla	r5, r2, r5, ip
 8005a50:	b289      	uxth	r1, r1
 8005a52:	3301      	adds	r3, #1
 8005a54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a58:	429e      	cmp	r6, r3
 8005a5a:	f840 1b04 	str.w	r1, [r0], #4
 8005a5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a62:	dcec      	bgt.n	8005a3e <__multadd+0x12>
 8005a64:	f1b8 0f00 	cmp.w	r8, #0
 8005a68:	d022      	beq.n	8005ab0 <__multadd+0x84>
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	42b3      	cmp	r3, r6
 8005a6e:	dc19      	bgt.n	8005aa4 <__multadd+0x78>
 8005a70:	6861      	ldr	r1, [r4, #4]
 8005a72:	4638      	mov	r0, r7
 8005a74:	3101      	adds	r1, #1
 8005a76:	f7ff ff77 	bl	8005968 <_Balloc>
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	b928      	cbnz	r0, 8005a8a <__multadd+0x5e>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <__multadd+0x8c>)
 8005a82:	480e      	ldr	r0, [pc, #56]	; (8005abc <__multadd+0x90>)
 8005a84:	21b5      	movs	r1, #181	; 0xb5
 8005a86:	f000 fe77 	bl	8006778 <__assert_func>
 8005a8a:	6922      	ldr	r2, [r4, #16]
 8005a8c:	3202      	adds	r2, #2
 8005a8e:	f104 010c 	add.w	r1, r4, #12
 8005a92:	0092      	lsls	r2, r2, #2
 8005a94:	300c      	adds	r0, #12
 8005a96:	f7ff ff59 	bl	800594c <memcpy>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f7ff ffa3 	bl	80059e8 <_Bfree>
 8005aa2:	462c      	mov	r4, r5
 8005aa4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005aa8:	3601      	adds	r6, #1
 8005aaa:	f8c3 8014 	str.w	r8, [r3, #20]
 8005aae:	6126      	str	r6, [r4, #16]
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab6:	bf00      	nop
 8005ab8:	080075cc 	.word	0x080075cc
 8005abc:	0800765c 	.word	0x0800765c

08005ac0 <__s2b>:
 8005ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	4615      	mov	r5, r2
 8005ac8:	461f      	mov	r7, r3
 8005aca:	2209      	movs	r2, #9
 8005acc:	3308      	adds	r3, #8
 8005ace:	4606      	mov	r6, r0
 8005ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	db09      	blt.n	8005af0 <__s2b+0x30>
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff ff43 	bl	8005968 <_Balloc>
 8005ae2:	b940      	cbnz	r0, 8005af6 <__s2b+0x36>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <__s2b+0x8c>)
 8005ae8:	4819      	ldr	r0, [pc, #100]	; (8005b50 <__s2b+0x90>)
 8005aea:	21ce      	movs	r1, #206	; 0xce
 8005aec:	f000 fe44 	bl	8006778 <__assert_func>
 8005af0:	0052      	lsls	r2, r2, #1
 8005af2:	3101      	adds	r1, #1
 8005af4:	e7f0      	b.n	8005ad8 <__s2b+0x18>
 8005af6:	9b08      	ldr	r3, [sp, #32]
 8005af8:	6143      	str	r3, [r0, #20]
 8005afa:	2d09      	cmp	r5, #9
 8005afc:	f04f 0301 	mov.w	r3, #1
 8005b00:	6103      	str	r3, [r0, #16]
 8005b02:	dd16      	ble.n	8005b32 <__s2b+0x72>
 8005b04:	f104 0909 	add.w	r9, r4, #9
 8005b08:	46c8      	mov	r8, r9
 8005b0a:	442c      	add	r4, r5
 8005b0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b10:	4601      	mov	r1, r0
 8005b12:	3b30      	subs	r3, #48	; 0x30
 8005b14:	220a      	movs	r2, #10
 8005b16:	4630      	mov	r0, r6
 8005b18:	f7ff ff88 	bl	8005a2c <__multadd>
 8005b1c:	45a0      	cmp	r8, r4
 8005b1e:	d1f5      	bne.n	8005b0c <__s2b+0x4c>
 8005b20:	f1a5 0408 	sub.w	r4, r5, #8
 8005b24:	444c      	add	r4, r9
 8005b26:	1b2d      	subs	r5, r5, r4
 8005b28:	1963      	adds	r3, r4, r5
 8005b2a:	42bb      	cmp	r3, r7
 8005b2c:	db04      	blt.n	8005b38 <__s2b+0x78>
 8005b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b32:	340a      	adds	r4, #10
 8005b34:	2509      	movs	r5, #9
 8005b36:	e7f6      	b.n	8005b26 <__s2b+0x66>
 8005b38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	3b30      	subs	r3, #48	; 0x30
 8005b40:	220a      	movs	r2, #10
 8005b42:	4630      	mov	r0, r6
 8005b44:	f7ff ff72 	bl	8005a2c <__multadd>
 8005b48:	e7ee      	b.n	8005b28 <__s2b+0x68>
 8005b4a:	bf00      	nop
 8005b4c:	080075cc 	.word	0x080075cc
 8005b50:	0800765c 	.word	0x0800765c

08005b54 <__hi0bits>:
 8005b54:	0c03      	lsrs	r3, r0, #16
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	b9d3      	cbnz	r3, 8005b90 <__hi0bits+0x3c>
 8005b5a:	0400      	lsls	r0, r0, #16
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b62:	bf04      	itt	eq
 8005b64:	0200      	lsleq	r0, r0, #8
 8005b66:	3308      	addeq	r3, #8
 8005b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b6c:	bf04      	itt	eq
 8005b6e:	0100      	lsleq	r0, r0, #4
 8005b70:	3304      	addeq	r3, #4
 8005b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b76:	bf04      	itt	eq
 8005b78:	0080      	lsleq	r0, r0, #2
 8005b7a:	3302      	addeq	r3, #2
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	db05      	blt.n	8005b8c <__hi0bits+0x38>
 8005b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b84:	f103 0301 	add.w	r3, r3, #1
 8005b88:	bf08      	it	eq
 8005b8a:	2320      	moveq	r3, #32
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	4770      	bx	lr
 8005b90:	2300      	movs	r3, #0
 8005b92:	e7e4      	b.n	8005b5e <__hi0bits+0xa>

08005b94 <__lo0bits>:
 8005b94:	6803      	ldr	r3, [r0, #0]
 8005b96:	f013 0207 	ands.w	r2, r3, #7
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	d00b      	beq.n	8005bb6 <__lo0bits+0x22>
 8005b9e:	07da      	lsls	r2, r3, #31
 8005ba0:	d424      	bmi.n	8005bec <__lo0bits+0x58>
 8005ba2:	0798      	lsls	r0, r3, #30
 8005ba4:	bf49      	itett	mi
 8005ba6:	085b      	lsrmi	r3, r3, #1
 8005ba8:	089b      	lsrpl	r3, r3, #2
 8005baa:	2001      	movmi	r0, #1
 8005bac:	600b      	strmi	r3, [r1, #0]
 8005bae:	bf5c      	itt	pl
 8005bb0:	600b      	strpl	r3, [r1, #0]
 8005bb2:	2002      	movpl	r0, #2
 8005bb4:	4770      	bx	lr
 8005bb6:	b298      	uxth	r0, r3
 8005bb8:	b9b0      	cbnz	r0, 8005be8 <__lo0bits+0x54>
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	2010      	movs	r0, #16
 8005bbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bc2:	bf04      	itt	eq
 8005bc4:	0a1b      	lsreq	r3, r3, #8
 8005bc6:	3008      	addeq	r0, #8
 8005bc8:	071a      	lsls	r2, r3, #28
 8005bca:	bf04      	itt	eq
 8005bcc:	091b      	lsreq	r3, r3, #4
 8005bce:	3004      	addeq	r0, #4
 8005bd0:	079a      	lsls	r2, r3, #30
 8005bd2:	bf04      	itt	eq
 8005bd4:	089b      	lsreq	r3, r3, #2
 8005bd6:	3002      	addeq	r0, #2
 8005bd8:	07da      	lsls	r2, r3, #31
 8005bda:	d403      	bmi.n	8005be4 <__lo0bits+0x50>
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	f100 0001 	add.w	r0, r0, #1
 8005be2:	d005      	beq.n	8005bf0 <__lo0bits+0x5c>
 8005be4:	600b      	str	r3, [r1, #0]
 8005be6:	4770      	bx	lr
 8005be8:	4610      	mov	r0, r2
 8005bea:	e7e8      	b.n	8005bbe <__lo0bits+0x2a>
 8005bec:	2000      	movs	r0, #0
 8005bee:	4770      	bx	lr
 8005bf0:	2020      	movs	r0, #32
 8005bf2:	4770      	bx	lr

08005bf4 <__i2b>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	f7ff feb5 	bl	8005968 <_Balloc>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	b928      	cbnz	r0, 8005c0e <__i2b+0x1a>
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <__i2b+0x24>)
 8005c04:	4805      	ldr	r0, [pc, #20]	; (8005c1c <__i2b+0x28>)
 8005c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c0a:	f000 fdb5 	bl	8006778 <__assert_func>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	6144      	str	r4, [r0, #20]
 8005c12:	6103      	str	r3, [r0, #16]
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	bf00      	nop
 8005c18:	080075cc 	.word	0x080075cc
 8005c1c:	0800765c 	.word	0x0800765c

08005c20 <__multiply>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	4614      	mov	r4, r2
 8005c26:	690a      	ldr	r2, [r1, #16]
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	bfb8      	it	lt
 8005c2e:	460b      	movlt	r3, r1
 8005c30:	460d      	mov	r5, r1
 8005c32:	bfbc      	itt	lt
 8005c34:	4625      	movlt	r5, r4
 8005c36:	461c      	movlt	r4, r3
 8005c38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005c3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c40:	68ab      	ldr	r3, [r5, #8]
 8005c42:	6869      	ldr	r1, [r5, #4]
 8005c44:	eb0a 0709 	add.w	r7, sl, r9
 8005c48:	42bb      	cmp	r3, r7
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	bfb8      	it	lt
 8005c4e:	3101      	addlt	r1, #1
 8005c50:	f7ff fe8a 	bl	8005968 <_Balloc>
 8005c54:	b930      	cbnz	r0, 8005c64 <__multiply+0x44>
 8005c56:	4602      	mov	r2, r0
 8005c58:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <__multiply+0x144>)
 8005c5a:	4843      	ldr	r0, [pc, #268]	; (8005d68 <__multiply+0x148>)
 8005c5c:	f240 115d 	movw	r1, #349	; 0x15d
 8005c60:	f000 fd8a 	bl	8006778 <__assert_func>
 8005c64:	f100 0614 	add.w	r6, r0, #20
 8005c68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c6c:	4633      	mov	r3, r6
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4543      	cmp	r3, r8
 8005c72:	d31e      	bcc.n	8005cb2 <__multiply+0x92>
 8005c74:	f105 0c14 	add.w	ip, r5, #20
 8005c78:	f104 0314 	add.w	r3, r4, #20
 8005c7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005c84:	9202      	str	r2, [sp, #8]
 8005c86:	ebac 0205 	sub.w	r2, ip, r5
 8005c8a:	3a15      	subs	r2, #21
 8005c8c:	f022 0203 	bic.w	r2, r2, #3
 8005c90:	3204      	adds	r2, #4
 8005c92:	f105 0115 	add.w	r1, r5, #21
 8005c96:	458c      	cmp	ip, r1
 8005c98:	bf38      	it	cc
 8005c9a:	2204      	movcc	r2, #4
 8005c9c:	9201      	str	r2, [sp, #4]
 8005c9e:	9a02      	ldr	r2, [sp, #8]
 8005ca0:	9303      	str	r3, [sp, #12]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d808      	bhi.n	8005cb8 <__multiply+0x98>
 8005ca6:	2f00      	cmp	r7, #0
 8005ca8:	dc55      	bgt.n	8005d56 <__multiply+0x136>
 8005caa:	6107      	str	r7, [r0, #16]
 8005cac:	b005      	add	sp, #20
 8005cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb2:	f843 2b04 	str.w	r2, [r3], #4
 8005cb6:	e7db      	b.n	8005c70 <__multiply+0x50>
 8005cb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cbc:	f1ba 0f00 	cmp.w	sl, #0
 8005cc0:	d020      	beq.n	8005d04 <__multiply+0xe4>
 8005cc2:	f105 0e14 	add.w	lr, r5, #20
 8005cc6:	46b1      	mov	r9, r6
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005cce:	f8d9 b000 	ldr.w	fp, [r9]
 8005cd2:	b2a1      	uxth	r1, r4
 8005cd4:	fa1f fb8b 	uxth.w	fp, fp
 8005cd8:	fb0a b101 	mla	r1, sl, r1, fp
 8005cdc:	4411      	add	r1, r2
 8005cde:	f8d9 2000 	ldr.w	r2, [r9]
 8005ce2:	0c24      	lsrs	r4, r4, #16
 8005ce4:	0c12      	lsrs	r2, r2, #16
 8005ce6:	fb0a 2404 	mla	r4, sl, r4, r2
 8005cea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005cee:	b289      	uxth	r1, r1
 8005cf0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005cf4:	45f4      	cmp	ip, lr
 8005cf6:	f849 1b04 	str.w	r1, [r9], #4
 8005cfa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005cfe:	d8e4      	bhi.n	8005cca <__multiply+0xaa>
 8005d00:	9901      	ldr	r1, [sp, #4]
 8005d02:	5072      	str	r2, [r6, r1]
 8005d04:	9a03      	ldr	r2, [sp, #12]
 8005d06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	f1b9 0f00 	cmp.w	r9, #0
 8005d10:	d01f      	beq.n	8005d52 <__multiply+0x132>
 8005d12:	6834      	ldr	r4, [r6, #0]
 8005d14:	f105 0114 	add.w	r1, r5, #20
 8005d18:	46b6      	mov	lr, r6
 8005d1a:	f04f 0a00 	mov.w	sl, #0
 8005d1e:	880a      	ldrh	r2, [r1, #0]
 8005d20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d24:	fb09 b202 	mla	r2, r9, r2, fp
 8005d28:	4492      	add	sl, r2
 8005d2a:	b2a4      	uxth	r4, r4
 8005d2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d30:	f84e 4b04 	str.w	r4, [lr], #4
 8005d34:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d38:	f8be 2000 	ldrh.w	r2, [lr]
 8005d3c:	0c24      	lsrs	r4, r4, #16
 8005d3e:	fb09 2404 	mla	r4, r9, r4, r2
 8005d42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005d46:	458c      	cmp	ip, r1
 8005d48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d4c:	d8e7      	bhi.n	8005d1e <__multiply+0xfe>
 8005d4e:	9a01      	ldr	r2, [sp, #4]
 8005d50:	50b4      	str	r4, [r6, r2]
 8005d52:	3604      	adds	r6, #4
 8005d54:	e7a3      	b.n	8005c9e <__multiply+0x7e>
 8005d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1a5      	bne.n	8005caa <__multiply+0x8a>
 8005d5e:	3f01      	subs	r7, #1
 8005d60:	e7a1      	b.n	8005ca6 <__multiply+0x86>
 8005d62:	bf00      	nop
 8005d64:	080075cc 	.word	0x080075cc
 8005d68:	0800765c 	.word	0x0800765c

08005d6c <__pow5mult>:
 8005d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d70:	4615      	mov	r5, r2
 8005d72:	f012 0203 	ands.w	r2, r2, #3
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	d007      	beq.n	8005d8c <__pow5mult+0x20>
 8005d7c:	4c25      	ldr	r4, [pc, #148]	; (8005e14 <__pow5mult+0xa8>)
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	2300      	movs	r3, #0
 8005d82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d86:	f7ff fe51 	bl	8005a2c <__multadd>
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	10ad      	asrs	r5, r5, #2
 8005d8e:	d03d      	beq.n	8005e0c <__pow5mult+0xa0>
 8005d90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d92:	b97c      	cbnz	r4, 8005db4 <__pow5mult+0x48>
 8005d94:	2010      	movs	r0, #16
 8005d96:	f7ff fdbf 	bl	8005918 <malloc>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6270      	str	r0, [r6, #36]	; 0x24
 8005d9e:	b928      	cbnz	r0, 8005dac <__pow5mult+0x40>
 8005da0:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <__pow5mult+0xac>)
 8005da2:	481e      	ldr	r0, [pc, #120]	; (8005e1c <__pow5mult+0xb0>)
 8005da4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005da8:	f000 fce6 	bl	8006778 <__assert_func>
 8005dac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005db0:	6004      	str	r4, [r0, #0]
 8005db2:	60c4      	str	r4, [r0, #12]
 8005db4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005db8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005dbc:	b94c      	cbnz	r4, 8005dd2 <__pow5mult+0x66>
 8005dbe:	f240 2171 	movw	r1, #625	; 0x271
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff ff16 	bl	8005bf4 <__i2b>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dce:	4604      	mov	r4, r0
 8005dd0:	6003      	str	r3, [r0, #0]
 8005dd2:	f04f 0900 	mov.w	r9, #0
 8005dd6:	07eb      	lsls	r3, r5, #31
 8005dd8:	d50a      	bpl.n	8005df0 <__pow5mult+0x84>
 8005dda:	4639      	mov	r1, r7
 8005ddc:	4622      	mov	r2, r4
 8005dde:	4630      	mov	r0, r6
 8005de0:	f7ff ff1e 	bl	8005c20 <__multiply>
 8005de4:	4639      	mov	r1, r7
 8005de6:	4680      	mov	r8, r0
 8005de8:	4630      	mov	r0, r6
 8005dea:	f7ff fdfd 	bl	80059e8 <_Bfree>
 8005dee:	4647      	mov	r7, r8
 8005df0:	106d      	asrs	r5, r5, #1
 8005df2:	d00b      	beq.n	8005e0c <__pow5mult+0xa0>
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	b938      	cbnz	r0, 8005e08 <__pow5mult+0x9c>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f7ff ff0f 	bl	8005c20 <__multiply>
 8005e02:	6020      	str	r0, [r4, #0]
 8005e04:	f8c0 9000 	str.w	r9, [r0]
 8005e08:	4604      	mov	r4, r0
 8005e0a:	e7e4      	b.n	8005dd6 <__pow5mult+0x6a>
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e12:	bf00      	nop
 8005e14:	080077b0 	.word	0x080077b0
 8005e18:	08007556 	.word	0x08007556
 8005e1c:	0800765c 	.word	0x0800765c

08005e20 <__lshift>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	460c      	mov	r4, r1
 8005e26:	6849      	ldr	r1, [r1, #4]
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e2e:	68a3      	ldr	r3, [r4, #8]
 8005e30:	4607      	mov	r7, r0
 8005e32:	4691      	mov	r9, r2
 8005e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e38:	f108 0601 	add.w	r6, r8, #1
 8005e3c:	42b3      	cmp	r3, r6
 8005e3e:	db0b      	blt.n	8005e58 <__lshift+0x38>
 8005e40:	4638      	mov	r0, r7
 8005e42:	f7ff fd91 	bl	8005968 <_Balloc>
 8005e46:	4605      	mov	r5, r0
 8005e48:	b948      	cbnz	r0, 8005e5e <__lshift+0x3e>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	4b28      	ldr	r3, [pc, #160]	; (8005ef0 <__lshift+0xd0>)
 8005e4e:	4829      	ldr	r0, [pc, #164]	; (8005ef4 <__lshift+0xd4>)
 8005e50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e54:	f000 fc90 	bl	8006778 <__assert_func>
 8005e58:	3101      	adds	r1, #1
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	e7ee      	b.n	8005e3c <__lshift+0x1c>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f100 0114 	add.w	r1, r0, #20
 8005e64:	f100 0210 	add.w	r2, r0, #16
 8005e68:	4618      	mov	r0, r3
 8005e6a:	4553      	cmp	r3, sl
 8005e6c:	db33      	blt.n	8005ed6 <__lshift+0xb6>
 8005e6e:	6920      	ldr	r0, [r4, #16]
 8005e70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e74:	f104 0314 	add.w	r3, r4, #20
 8005e78:	f019 091f 	ands.w	r9, r9, #31
 8005e7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e84:	d02b      	beq.n	8005ede <__lshift+0xbe>
 8005e86:	f1c9 0e20 	rsb	lr, r9, #32
 8005e8a:	468a      	mov	sl, r1
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	fa00 f009 	lsl.w	r0, r0, r9
 8005e94:	4302      	orrs	r2, r0
 8005e96:	f84a 2b04 	str.w	r2, [sl], #4
 8005e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e9e:	459c      	cmp	ip, r3
 8005ea0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ea4:	d8f3      	bhi.n	8005e8e <__lshift+0x6e>
 8005ea6:	ebac 0304 	sub.w	r3, ip, r4
 8005eaa:	3b15      	subs	r3, #21
 8005eac:	f023 0303 	bic.w	r3, r3, #3
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	f104 0015 	add.w	r0, r4, #21
 8005eb6:	4584      	cmp	ip, r0
 8005eb8:	bf38      	it	cc
 8005eba:	2304      	movcc	r3, #4
 8005ebc:	50ca      	str	r2, [r1, r3]
 8005ebe:	b10a      	cbz	r2, 8005ec4 <__lshift+0xa4>
 8005ec0:	f108 0602 	add.w	r6, r8, #2
 8005ec4:	3e01      	subs	r6, #1
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	612e      	str	r6, [r5, #16]
 8005eca:	4621      	mov	r1, r4
 8005ecc:	f7ff fd8c 	bl	80059e8 <_Bfree>
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005eda:	3301      	adds	r3, #1
 8005edc:	e7c5      	b.n	8005e6a <__lshift+0x4a>
 8005ede:	3904      	subs	r1, #4
 8005ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ee8:	459c      	cmp	ip, r3
 8005eea:	d8f9      	bhi.n	8005ee0 <__lshift+0xc0>
 8005eec:	e7ea      	b.n	8005ec4 <__lshift+0xa4>
 8005eee:	bf00      	nop
 8005ef0:	080075cc 	.word	0x080075cc
 8005ef4:	0800765c 	.word	0x0800765c

08005ef8 <__mcmp>:
 8005ef8:	b530      	push	{r4, r5, lr}
 8005efa:	6902      	ldr	r2, [r0, #16]
 8005efc:	690c      	ldr	r4, [r1, #16]
 8005efe:	1b12      	subs	r2, r2, r4
 8005f00:	d10e      	bne.n	8005f20 <__mcmp+0x28>
 8005f02:	f100 0314 	add.w	r3, r0, #20
 8005f06:	3114      	adds	r1, #20
 8005f08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f18:	42a5      	cmp	r5, r4
 8005f1a:	d003      	beq.n	8005f24 <__mcmp+0x2c>
 8005f1c:	d305      	bcc.n	8005f2a <__mcmp+0x32>
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4610      	mov	r0, r2
 8005f22:	bd30      	pop	{r4, r5, pc}
 8005f24:	4283      	cmp	r3, r0
 8005f26:	d3f3      	bcc.n	8005f10 <__mcmp+0x18>
 8005f28:	e7fa      	b.n	8005f20 <__mcmp+0x28>
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	e7f7      	b.n	8005f20 <__mcmp+0x28>

08005f30 <__mdiff>:
 8005f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	460c      	mov	r4, r1
 8005f36:	4606      	mov	r6, r0
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4617      	mov	r7, r2
 8005f3e:	f7ff ffdb 	bl	8005ef8 <__mcmp>
 8005f42:	1e05      	subs	r5, r0, #0
 8005f44:	d110      	bne.n	8005f68 <__mdiff+0x38>
 8005f46:	4629      	mov	r1, r5
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff fd0d 	bl	8005968 <_Balloc>
 8005f4e:	b930      	cbnz	r0, 8005f5e <__mdiff+0x2e>
 8005f50:	4b39      	ldr	r3, [pc, #228]	; (8006038 <__mdiff+0x108>)
 8005f52:	4602      	mov	r2, r0
 8005f54:	f240 2132 	movw	r1, #562	; 0x232
 8005f58:	4838      	ldr	r0, [pc, #224]	; (800603c <__mdiff+0x10c>)
 8005f5a:	f000 fc0d 	bl	8006778 <__assert_func>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	bfa4      	itt	ge
 8005f6a:	463b      	movge	r3, r7
 8005f6c:	4627      	movge	r7, r4
 8005f6e:	4630      	mov	r0, r6
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	bfa6      	itte	ge
 8005f74:	461c      	movge	r4, r3
 8005f76:	2500      	movge	r5, #0
 8005f78:	2501      	movlt	r5, #1
 8005f7a:	f7ff fcf5 	bl	8005968 <_Balloc>
 8005f7e:	b920      	cbnz	r0, 8005f8a <__mdiff+0x5a>
 8005f80:	4b2d      	ldr	r3, [pc, #180]	; (8006038 <__mdiff+0x108>)
 8005f82:	4602      	mov	r2, r0
 8005f84:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f88:	e7e6      	b.n	8005f58 <__mdiff+0x28>
 8005f8a:	693e      	ldr	r6, [r7, #16]
 8005f8c:	60c5      	str	r5, [r0, #12]
 8005f8e:	6925      	ldr	r5, [r4, #16]
 8005f90:	f107 0114 	add.w	r1, r7, #20
 8005f94:	f104 0914 	add.w	r9, r4, #20
 8005f98:	f100 0e14 	add.w	lr, r0, #20
 8005f9c:	f107 0210 	add.w	r2, r7, #16
 8005fa0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005fa4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005fa8:	46f2      	mov	sl, lr
 8005faa:	2700      	movs	r7, #0
 8005fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005fb4:	fa1f f883 	uxth.w	r8, r3
 8005fb8:	fa17 f78b 	uxtah	r7, r7, fp
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	eba7 0808 	sub.w	r8, r7, r8
 8005fc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005fc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005fca:	fa1f f888 	uxth.w	r8, r8
 8005fce:	141f      	asrs	r7, r3, #16
 8005fd0:	454d      	cmp	r5, r9
 8005fd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005fd6:	f84a 3b04 	str.w	r3, [sl], #4
 8005fda:	d8e7      	bhi.n	8005fac <__mdiff+0x7c>
 8005fdc:	1b2b      	subs	r3, r5, r4
 8005fde:	3b15      	subs	r3, #21
 8005fe0:	f023 0303 	bic.w	r3, r3, #3
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	3415      	adds	r4, #21
 8005fe8:	42a5      	cmp	r5, r4
 8005fea:	bf38      	it	cc
 8005fec:	2304      	movcc	r3, #4
 8005fee:	4419      	add	r1, r3
 8005ff0:	4473      	add	r3, lr
 8005ff2:	469e      	mov	lr, r3
 8005ff4:	460d      	mov	r5, r1
 8005ff6:	4565      	cmp	r5, ip
 8005ff8:	d30e      	bcc.n	8006018 <__mdiff+0xe8>
 8005ffa:	f10c 0203 	add.w	r2, ip, #3
 8005ffe:	1a52      	subs	r2, r2, r1
 8006000:	f022 0203 	bic.w	r2, r2, #3
 8006004:	3903      	subs	r1, #3
 8006006:	458c      	cmp	ip, r1
 8006008:	bf38      	it	cc
 800600a:	2200      	movcc	r2, #0
 800600c:	441a      	add	r2, r3
 800600e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006012:	b17b      	cbz	r3, 8006034 <__mdiff+0x104>
 8006014:	6106      	str	r6, [r0, #16]
 8006016:	e7a5      	b.n	8005f64 <__mdiff+0x34>
 8006018:	f855 8b04 	ldr.w	r8, [r5], #4
 800601c:	fa17 f488 	uxtah	r4, r7, r8
 8006020:	1422      	asrs	r2, r4, #16
 8006022:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006026:	b2a4      	uxth	r4, r4
 8006028:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800602c:	f84e 4b04 	str.w	r4, [lr], #4
 8006030:	1417      	asrs	r7, r2, #16
 8006032:	e7e0      	b.n	8005ff6 <__mdiff+0xc6>
 8006034:	3e01      	subs	r6, #1
 8006036:	e7ea      	b.n	800600e <__mdiff+0xde>
 8006038:	080075cc 	.word	0x080075cc
 800603c:	0800765c 	.word	0x0800765c

08006040 <__ulp>:
 8006040:	b082      	sub	sp, #8
 8006042:	ed8d 0b00 	vstr	d0, [sp]
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	4912      	ldr	r1, [pc, #72]	; (8006094 <__ulp+0x54>)
 800604a:	4019      	ands	r1, r3
 800604c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006050:	2900      	cmp	r1, #0
 8006052:	dd05      	ble.n	8006060 <__ulp+0x20>
 8006054:	2200      	movs	r2, #0
 8006056:	460b      	mov	r3, r1
 8006058:	ec43 2b10 	vmov	d0, r2, r3
 800605c:	b002      	add	sp, #8
 800605e:	4770      	bx	lr
 8006060:	4249      	negs	r1, r1
 8006062:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006066:	ea4f 5021 	mov.w	r0, r1, asr #20
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	da04      	bge.n	800607e <__ulp+0x3e>
 8006074:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006078:	fa41 f300 	asr.w	r3, r1, r0
 800607c:	e7ec      	b.n	8006058 <__ulp+0x18>
 800607e:	f1a0 0114 	sub.w	r1, r0, #20
 8006082:	291e      	cmp	r1, #30
 8006084:	bfda      	itte	le
 8006086:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800608a:	fa20 f101 	lsrle.w	r1, r0, r1
 800608e:	2101      	movgt	r1, #1
 8006090:	460a      	mov	r2, r1
 8006092:	e7e1      	b.n	8006058 <__ulp+0x18>
 8006094:	7ff00000 	.word	0x7ff00000

08006098 <__b2d>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	6905      	ldr	r5, [r0, #16]
 800609c:	f100 0714 	add.w	r7, r0, #20
 80060a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80060a4:	1f2e      	subs	r6, r5, #4
 80060a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7ff fd52 	bl	8005b54 <__hi0bits>
 80060b0:	f1c0 0320 	rsb	r3, r0, #32
 80060b4:	280a      	cmp	r0, #10
 80060b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006134 <__b2d+0x9c>
 80060ba:	600b      	str	r3, [r1, #0]
 80060bc:	dc14      	bgt.n	80060e8 <__b2d+0x50>
 80060be:	f1c0 0e0b 	rsb	lr, r0, #11
 80060c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80060c6:	42b7      	cmp	r7, r6
 80060c8:	ea41 030c 	orr.w	r3, r1, ip
 80060cc:	bf34      	ite	cc
 80060ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80060d2:	2100      	movcs	r1, #0
 80060d4:	3015      	adds	r0, #21
 80060d6:	fa04 f000 	lsl.w	r0, r4, r0
 80060da:	fa21 f10e 	lsr.w	r1, r1, lr
 80060de:	ea40 0201 	orr.w	r2, r0, r1
 80060e2:	ec43 2b10 	vmov	d0, r2, r3
 80060e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e8:	42b7      	cmp	r7, r6
 80060ea:	bf3a      	itte	cc
 80060ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80060f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80060f4:	2100      	movcs	r1, #0
 80060f6:	380b      	subs	r0, #11
 80060f8:	d017      	beq.n	800612a <__b2d+0x92>
 80060fa:	f1c0 0c20 	rsb	ip, r0, #32
 80060fe:	fa04 f500 	lsl.w	r5, r4, r0
 8006102:	42be      	cmp	r6, r7
 8006104:	fa21 f40c 	lsr.w	r4, r1, ip
 8006108:	ea45 0504 	orr.w	r5, r5, r4
 800610c:	bf8c      	ite	hi
 800610e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006112:	2400      	movls	r4, #0
 8006114:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006118:	fa01 f000 	lsl.w	r0, r1, r0
 800611c:	fa24 f40c 	lsr.w	r4, r4, ip
 8006120:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006124:	ea40 0204 	orr.w	r2, r0, r4
 8006128:	e7db      	b.n	80060e2 <__b2d+0x4a>
 800612a:	ea44 030c 	orr.w	r3, r4, ip
 800612e:	460a      	mov	r2, r1
 8006130:	e7d7      	b.n	80060e2 <__b2d+0x4a>
 8006132:	bf00      	nop
 8006134:	3ff00000 	.word	0x3ff00000

08006138 <__d2b>:
 8006138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800613c:	4689      	mov	r9, r1
 800613e:	2101      	movs	r1, #1
 8006140:	ec57 6b10 	vmov	r6, r7, d0
 8006144:	4690      	mov	r8, r2
 8006146:	f7ff fc0f 	bl	8005968 <_Balloc>
 800614a:	4604      	mov	r4, r0
 800614c:	b930      	cbnz	r0, 800615c <__d2b+0x24>
 800614e:	4602      	mov	r2, r0
 8006150:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <__d2b+0xb0>)
 8006152:	4826      	ldr	r0, [pc, #152]	; (80061ec <__d2b+0xb4>)
 8006154:	f240 310a 	movw	r1, #778	; 0x30a
 8006158:	f000 fb0e 	bl	8006778 <__assert_func>
 800615c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006164:	bb35      	cbnz	r5, 80061b4 <__d2b+0x7c>
 8006166:	2e00      	cmp	r6, #0
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	d028      	beq.n	80061be <__d2b+0x86>
 800616c:	4668      	mov	r0, sp
 800616e:	9600      	str	r6, [sp, #0]
 8006170:	f7ff fd10 	bl	8005b94 <__lo0bits>
 8006174:	9900      	ldr	r1, [sp, #0]
 8006176:	b300      	cbz	r0, 80061ba <__d2b+0x82>
 8006178:	9a01      	ldr	r2, [sp, #4]
 800617a:	f1c0 0320 	rsb	r3, r0, #32
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	430b      	orrs	r3, r1
 8006184:	40c2      	lsrs	r2, r0
 8006186:	6163      	str	r3, [r4, #20]
 8006188:	9201      	str	r2, [sp, #4]
 800618a:	9b01      	ldr	r3, [sp, #4]
 800618c:	61a3      	str	r3, [r4, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf14      	ite	ne
 8006192:	2202      	movne	r2, #2
 8006194:	2201      	moveq	r2, #1
 8006196:	6122      	str	r2, [r4, #16]
 8006198:	b1d5      	cbz	r5, 80061d0 <__d2b+0x98>
 800619a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800619e:	4405      	add	r5, r0
 80061a0:	f8c9 5000 	str.w	r5, [r9]
 80061a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061a8:	f8c8 0000 	str.w	r0, [r8]
 80061ac:	4620      	mov	r0, r4
 80061ae:	b003      	add	sp, #12
 80061b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061b8:	e7d5      	b.n	8006166 <__d2b+0x2e>
 80061ba:	6161      	str	r1, [r4, #20]
 80061bc:	e7e5      	b.n	800618a <__d2b+0x52>
 80061be:	a801      	add	r0, sp, #4
 80061c0:	f7ff fce8 	bl	8005b94 <__lo0bits>
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	6163      	str	r3, [r4, #20]
 80061c8:	2201      	movs	r2, #1
 80061ca:	6122      	str	r2, [r4, #16]
 80061cc:	3020      	adds	r0, #32
 80061ce:	e7e3      	b.n	8006198 <__d2b+0x60>
 80061d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061d8:	f8c9 0000 	str.w	r0, [r9]
 80061dc:	6918      	ldr	r0, [r3, #16]
 80061de:	f7ff fcb9 	bl	8005b54 <__hi0bits>
 80061e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80061e6:	e7df      	b.n	80061a8 <__d2b+0x70>
 80061e8:	080075cc 	.word	0x080075cc
 80061ec:	0800765c 	.word	0x0800765c

080061f0 <__ratio>:
 80061f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	4688      	mov	r8, r1
 80061f6:	4669      	mov	r1, sp
 80061f8:	4681      	mov	r9, r0
 80061fa:	f7ff ff4d 	bl	8006098 <__b2d>
 80061fe:	a901      	add	r1, sp, #4
 8006200:	4640      	mov	r0, r8
 8006202:	ec55 4b10 	vmov	r4, r5, d0
 8006206:	f7ff ff47 	bl	8006098 <__b2d>
 800620a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800620e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006212:	eba3 0c02 	sub.w	ip, r3, r2
 8006216:	e9dd 3200 	ldrd	r3, r2, [sp]
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006220:	ec51 0b10 	vmov	r0, r1, d0
 8006224:	2b00      	cmp	r3, #0
 8006226:	bfd6      	itet	le
 8006228:	460a      	movle	r2, r1
 800622a:	462a      	movgt	r2, r5
 800622c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006230:	468b      	mov	fp, r1
 8006232:	462f      	mov	r7, r5
 8006234:	bfd4      	ite	le
 8006236:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800623a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800623e:	4620      	mov	r0, r4
 8006240:	ee10 2a10 	vmov	r2, s0
 8006244:	465b      	mov	r3, fp
 8006246:	4639      	mov	r1, r7
 8006248:	f7fa fb00 	bl	800084c <__aeabi_ddiv>
 800624c:	ec41 0b10 	vmov	d0, r0, r1
 8006250:	b003      	add	sp, #12
 8006252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006256 <__copybits>:
 8006256:	3901      	subs	r1, #1
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	1149      	asrs	r1, r1, #5
 800625c:	6914      	ldr	r4, [r2, #16]
 800625e:	3101      	adds	r1, #1
 8006260:	f102 0314 	add.w	r3, r2, #20
 8006264:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006268:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800626c:	1f05      	subs	r5, r0, #4
 800626e:	42a3      	cmp	r3, r4
 8006270:	d30c      	bcc.n	800628c <__copybits+0x36>
 8006272:	1aa3      	subs	r3, r4, r2
 8006274:	3b11      	subs	r3, #17
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	3211      	adds	r2, #17
 800627c:	42a2      	cmp	r2, r4
 800627e:	bf88      	it	hi
 8006280:	2300      	movhi	r3, #0
 8006282:	4418      	add	r0, r3
 8006284:	2300      	movs	r3, #0
 8006286:	4288      	cmp	r0, r1
 8006288:	d305      	bcc.n	8006296 <__copybits+0x40>
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006290:	f845 6f04 	str.w	r6, [r5, #4]!
 8006294:	e7eb      	b.n	800626e <__copybits+0x18>
 8006296:	f840 3b04 	str.w	r3, [r0], #4
 800629a:	e7f4      	b.n	8006286 <__copybits+0x30>

0800629c <__any_on>:
 800629c:	f100 0214 	add.w	r2, r0, #20
 80062a0:	6900      	ldr	r0, [r0, #16]
 80062a2:	114b      	asrs	r3, r1, #5
 80062a4:	4298      	cmp	r0, r3
 80062a6:	b510      	push	{r4, lr}
 80062a8:	db11      	blt.n	80062ce <__any_on+0x32>
 80062aa:	dd0a      	ble.n	80062c2 <__any_on+0x26>
 80062ac:	f011 011f 	ands.w	r1, r1, #31
 80062b0:	d007      	beq.n	80062c2 <__any_on+0x26>
 80062b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062b6:	fa24 f001 	lsr.w	r0, r4, r1
 80062ba:	fa00 f101 	lsl.w	r1, r0, r1
 80062be:	428c      	cmp	r4, r1
 80062c0:	d10b      	bne.n	80062da <__any_on+0x3e>
 80062c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d803      	bhi.n	80062d2 <__any_on+0x36>
 80062ca:	2000      	movs	r0, #0
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	4603      	mov	r3, r0
 80062d0:	e7f7      	b.n	80062c2 <__any_on+0x26>
 80062d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d0f5      	beq.n	80062c6 <__any_on+0x2a>
 80062da:	2001      	movs	r0, #1
 80062dc:	e7f6      	b.n	80062cc <__any_on+0x30>

080062de <_calloc_r>:
 80062de:	b513      	push	{r0, r1, r4, lr}
 80062e0:	434a      	muls	r2, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	9201      	str	r2, [sp, #4]
 80062e6:	f000 f859 	bl	800639c <_malloc_r>
 80062ea:	4604      	mov	r4, r0
 80062ec:	b118      	cbz	r0, 80062f6 <_calloc_r+0x18>
 80062ee:	9a01      	ldr	r2, [sp, #4]
 80062f0:	2100      	movs	r1, #0
 80062f2:	f7fc fbc9 	bl	8002a88 <memset>
 80062f6:	4620      	mov	r0, r4
 80062f8:	b002      	add	sp, #8
 80062fa:	bd10      	pop	{r4, pc}

080062fc <_free_r>:
 80062fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062fe:	2900      	cmp	r1, #0
 8006300:	d048      	beq.n	8006394 <_free_r+0x98>
 8006302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006306:	9001      	str	r0, [sp, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f1a1 0404 	sub.w	r4, r1, #4
 800630e:	bfb8      	it	lt
 8006310:	18e4      	addlt	r4, r4, r3
 8006312:	f000 fa7b 	bl	800680c <__malloc_lock>
 8006316:	4a20      	ldr	r2, [pc, #128]	; (8006398 <_free_r+0x9c>)
 8006318:	9801      	ldr	r0, [sp, #4]
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	4615      	mov	r5, r2
 800631e:	b933      	cbnz	r3, 800632e <_free_r+0x32>
 8006320:	6063      	str	r3, [r4, #4]
 8006322:	6014      	str	r4, [r2, #0]
 8006324:	b003      	add	sp, #12
 8006326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800632a:	f000 ba75 	b.w	8006818 <__malloc_unlock>
 800632e:	42a3      	cmp	r3, r4
 8006330:	d90b      	bls.n	800634a <_free_r+0x4e>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	1862      	adds	r2, r4, r1
 8006336:	4293      	cmp	r3, r2
 8006338:	bf04      	itt	eq
 800633a:	681a      	ldreq	r2, [r3, #0]
 800633c:	685b      	ldreq	r3, [r3, #4]
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	bf04      	itt	eq
 8006342:	1852      	addeq	r2, r2, r1
 8006344:	6022      	streq	r2, [r4, #0]
 8006346:	602c      	str	r4, [r5, #0]
 8006348:	e7ec      	b.n	8006324 <_free_r+0x28>
 800634a:	461a      	mov	r2, r3
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b10b      	cbz	r3, 8006354 <_free_r+0x58>
 8006350:	42a3      	cmp	r3, r4
 8006352:	d9fa      	bls.n	800634a <_free_r+0x4e>
 8006354:	6811      	ldr	r1, [r2, #0]
 8006356:	1855      	adds	r5, r2, r1
 8006358:	42a5      	cmp	r5, r4
 800635a:	d10b      	bne.n	8006374 <_free_r+0x78>
 800635c:	6824      	ldr	r4, [r4, #0]
 800635e:	4421      	add	r1, r4
 8006360:	1854      	adds	r4, r2, r1
 8006362:	42a3      	cmp	r3, r4
 8006364:	6011      	str	r1, [r2, #0]
 8006366:	d1dd      	bne.n	8006324 <_free_r+0x28>
 8006368:	681c      	ldr	r4, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	6053      	str	r3, [r2, #4]
 800636e:	4421      	add	r1, r4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	e7d7      	b.n	8006324 <_free_r+0x28>
 8006374:	d902      	bls.n	800637c <_free_r+0x80>
 8006376:	230c      	movs	r3, #12
 8006378:	6003      	str	r3, [r0, #0]
 800637a:	e7d3      	b.n	8006324 <_free_r+0x28>
 800637c:	6825      	ldr	r5, [r4, #0]
 800637e:	1961      	adds	r1, r4, r5
 8006380:	428b      	cmp	r3, r1
 8006382:	bf04      	itt	eq
 8006384:	6819      	ldreq	r1, [r3, #0]
 8006386:	685b      	ldreq	r3, [r3, #4]
 8006388:	6063      	str	r3, [r4, #4]
 800638a:	bf04      	itt	eq
 800638c:	1949      	addeq	r1, r1, r5
 800638e:	6021      	streq	r1, [r4, #0]
 8006390:	6054      	str	r4, [r2, #4]
 8006392:	e7c7      	b.n	8006324 <_free_r+0x28>
 8006394:	b003      	add	sp, #12
 8006396:	bd30      	pop	{r4, r5, pc}
 8006398:	20000204 	.word	0x20000204

0800639c <_malloc_r>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	1ccd      	adds	r5, r1, #3
 80063a0:	f025 0503 	bic.w	r5, r5, #3
 80063a4:	3508      	adds	r5, #8
 80063a6:	2d0c      	cmp	r5, #12
 80063a8:	bf38      	it	cc
 80063aa:	250c      	movcc	r5, #12
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	4606      	mov	r6, r0
 80063b0:	db01      	blt.n	80063b6 <_malloc_r+0x1a>
 80063b2:	42a9      	cmp	r1, r5
 80063b4:	d903      	bls.n	80063be <_malloc_r+0x22>
 80063b6:	230c      	movs	r3, #12
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	2000      	movs	r0, #0
 80063bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063be:	f000 fa25 	bl	800680c <__malloc_lock>
 80063c2:	4921      	ldr	r1, [pc, #132]	; (8006448 <_malloc_r+0xac>)
 80063c4:	680a      	ldr	r2, [r1, #0]
 80063c6:	4614      	mov	r4, r2
 80063c8:	b99c      	cbnz	r4, 80063f2 <_malloc_r+0x56>
 80063ca:	4f20      	ldr	r7, [pc, #128]	; (800644c <_malloc_r+0xb0>)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	b923      	cbnz	r3, 80063da <_malloc_r+0x3e>
 80063d0:	4621      	mov	r1, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	f000 f9a0 	bl	8006718 <_sbrk_r>
 80063d8:	6038      	str	r0, [r7, #0]
 80063da:	4629      	mov	r1, r5
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f99b 	bl	8006718 <_sbrk_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	d123      	bne.n	800642e <_malloc_r+0x92>
 80063e6:	230c      	movs	r3, #12
 80063e8:	6033      	str	r3, [r6, #0]
 80063ea:	4630      	mov	r0, r6
 80063ec:	f000 fa14 	bl	8006818 <__malloc_unlock>
 80063f0:	e7e3      	b.n	80063ba <_malloc_r+0x1e>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	1b5b      	subs	r3, r3, r5
 80063f6:	d417      	bmi.n	8006428 <_malloc_r+0x8c>
 80063f8:	2b0b      	cmp	r3, #11
 80063fa:	d903      	bls.n	8006404 <_malloc_r+0x68>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	441c      	add	r4, r3
 8006400:	6025      	str	r5, [r4, #0]
 8006402:	e004      	b.n	800640e <_malloc_r+0x72>
 8006404:	6863      	ldr	r3, [r4, #4]
 8006406:	42a2      	cmp	r2, r4
 8006408:	bf0c      	ite	eq
 800640a:	600b      	streq	r3, [r1, #0]
 800640c:	6053      	strne	r3, [r2, #4]
 800640e:	4630      	mov	r0, r6
 8006410:	f000 fa02 	bl	8006818 <__malloc_unlock>
 8006414:	f104 000b 	add.w	r0, r4, #11
 8006418:	1d23      	adds	r3, r4, #4
 800641a:	f020 0007 	bic.w	r0, r0, #7
 800641e:	1ac2      	subs	r2, r0, r3
 8006420:	d0cc      	beq.n	80063bc <_malloc_r+0x20>
 8006422:	1a1b      	subs	r3, r3, r0
 8006424:	50a3      	str	r3, [r4, r2]
 8006426:	e7c9      	b.n	80063bc <_malloc_r+0x20>
 8006428:	4622      	mov	r2, r4
 800642a:	6864      	ldr	r4, [r4, #4]
 800642c:	e7cc      	b.n	80063c8 <_malloc_r+0x2c>
 800642e:	1cc4      	adds	r4, r0, #3
 8006430:	f024 0403 	bic.w	r4, r4, #3
 8006434:	42a0      	cmp	r0, r4
 8006436:	d0e3      	beq.n	8006400 <_malloc_r+0x64>
 8006438:	1a21      	subs	r1, r4, r0
 800643a:	4630      	mov	r0, r6
 800643c:	f000 f96c 	bl	8006718 <_sbrk_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d1dd      	bne.n	8006400 <_malloc_r+0x64>
 8006444:	e7cf      	b.n	80063e6 <_malloc_r+0x4a>
 8006446:	bf00      	nop
 8006448:	20000204 	.word	0x20000204
 800644c:	20000208 	.word	0x20000208

08006450 <__ssputs_r>:
 8006450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006454:	688e      	ldr	r6, [r1, #8]
 8006456:	429e      	cmp	r6, r3
 8006458:	4682      	mov	sl, r0
 800645a:	460c      	mov	r4, r1
 800645c:	4690      	mov	r8, r2
 800645e:	461f      	mov	r7, r3
 8006460:	d838      	bhi.n	80064d4 <__ssputs_r+0x84>
 8006462:	898a      	ldrh	r2, [r1, #12]
 8006464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006468:	d032      	beq.n	80064d0 <__ssputs_r+0x80>
 800646a:	6825      	ldr	r5, [r4, #0]
 800646c:	6909      	ldr	r1, [r1, #16]
 800646e:	eba5 0901 	sub.w	r9, r5, r1
 8006472:	6965      	ldr	r5, [r4, #20]
 8006474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800647c:	3301      	adds	r3, #1
 800647e:	444b      	add	r3, r9
 8006480:	106d      	asrs	r5, r5, #1
 8006482:	429d      	cmp	r5, r3
 8006484:	bf38      	it	cc
 8006486:	461d      	movcc	r5, r3
 8006488:	0553      	lsls	r3, r2, #21
 800648a:	d531      	bpl.n	80064f0 <__ssputs_r+0xa0>
 800648c:	4629      	mov	r1, r5
 800648e:	f7ff ff85 	bl	800639c <_malloc_r>
 8006492:	4606      	mov	r6, r0
 8006494:	b950      	cbnz	r0, 80064ac <__ssputs_r+0x5c>
 8006496:	230c      	movs	r3, #12
 8006498:	f8ca 3000 	str.w	r3, [sl]
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ac:	6921      	ldr	r1, [r4, #16]
 80064ae:	464a      	mov	r2, r9
 80064b0:	f7ff fa4c 	bl	800594c <memcpy>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064be:	81a3      	strh	r3, [r4, #12]
 80064c0:	6126      	str	r6, [r4, #16]
 80064c2:	6165      	str	r5, [r4, #20]
 80064c4:	444e      	add	r6, r9
 80064c6:	eba5 0509 	sub.w	r5, r5, r9
 80064ca:	6026      	str	r6, [r4, #0]
 80064cc:	60a5      	str	r5, [r4, #8]
 80064ce:	463e      	mov	r6, r7
 80064d0:	42be      	cmp	r6, r7
 80064d2:	d900      	bls.n	80064d6 <__ssputs_r+0x86>
 80064d4:	463e      	mov	r6, r7
 80064d6:	4632      	mov	r2, r6
 80064d8:	6820      	ldr	r0, [r4, #0]
 80064da:	4641      	mov	r1, r8
 80064dc:	f000 f97c 	bl	80067d8 <memmove>
 80064e0:	68a3      	ldr	r3, [r4, #8]
 80064e2:	6822      	ldr	r2, [r4, #0]
 80064e4:	1b9b      	subs	r3, r3, r6
 80064e6:	4432      	add	r2, r6
 80064e8:	60a3      	str	r3, [r4, #8]
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	2000      	movs	r0, #0
 80064ee:	e7db      	b.n	80064a8 <__ssputs_r+0x58>
 80064f0:	462a      	mov	r2, r5
 80064f2:	f000 f997 	bl	8006824 <_realloc_r>
 80064f6:	4606      	mov	r6, r0
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d1e1      	bne.n	80064c0 <__ssputs_r+0x70>
 80064fc:	6921      	ldr	r1, [r4, #16]
 80064fe:	4650      	mov	r0, sl
 8006500:	f7ff fefc 	bl	80062fc <_free_r>
 8006504:	e7c7      	b.n	8006496 <__ssputs_r+0x46>
	...

08006508 <_svfiprintf_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	4698      	mov	r8, r3
 800650e:	898b      	ldrh	r3, [r1, #12]
 8006510:	061b      	lsls	r3, r3, #24
 8006512:	b09d      	sub	sp, #116	; 0x74
 8006514:	4607      	mov	r7, r0
 8006516:	460d      	mov	r5, r1
 8006518:	4614      	mov	r4, r2
 800651a:	d50e      	bpl.n	800653a <_svfiprintf_r+0x32>
 800651c:	690b      	ldr	r3, [r1, #16]
 800651e:	b963      	cbnz	r3, 800653a <_svfiprintf_r+0x32>
 8006520:	2140      	movs	r1, #64	; 0x40
 8006522:	f7ff ff3b 	bl	800639c <_malloc_r>
 8006526:	6028      	str	r0, [r5, #0]
 8006528:	6128      	str	r0, [r5, #16]
 800652a:	b920      	cbnz	r0, 8006536 <_svfiprintf_r+0x2e>
 800652c:	230c      	movs	r3, #12
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	e0d1      	b.n	80066da <_svfiprintf_r+0x1d2>
 8006536:	2340      	movs	r3, #64	; 0x40
 8006538:	616b      	str	r3, [r5, #20]
 800653a:	2300      	movs	r3, #0
 800653c:	9309      	str	r3, [sp, #36]	; 0x24
 800653e:	2320      	movs	r3, #32
 8006540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006544:	f8cd 800c 	str.w	r8, [sp, #12]
 8006548:	2330      	movs	r3, #48	; 0x30
 800654a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066f4 <_svfiprintf_r+0x1ec>
 800654e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006552:	f04f 0901 	mov.w	r9, #1
 8006556:	4623      	mov	r3, r4
 8006558:	469a      	mov	sl, r3
 800655a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800655e:	b10a      	cbz	r2, 8006564 <_svfiprintf_r+0x5c>
 8006560:	2a25      	cmp	r2, #37	; 0x25
 8006562:	d1f9      	bne.n	8006558 <_svfiprintf_r+0x50>
 8006564:	ebba 0b04 	subs.w	fp, sl, r4
 8006568:	d00b      	beq.n	8006582 <_svfiprintf_r+0x7a>
 800656a:	465b      	mov	r3, fp
 800656c:	4622      	mov	r2, r4
 800656e:	4629      	mov	r1, r5
 8006570:	4638      	mov	r0, r7
 8006572:	f7ff ff6d 	bl	8006450 <__ssputs_r>
 8006576:	3001      	adds	r0, #1
 8006578:	f000 80aa 	beq.w	80066d0 <_svfiprintf_r+0x1c8>
 800657c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800657e:	445a      	add	r2, fp
 8006580:	9209      	str	r2, [sp, #36]	; 0x24
 8006582:	f89a 3000 	ldrb.w	r3, [sl]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80a2 	beq.w	80066d0 <_svfiprintf_r+0x1c8>
 800658c:	2300      	movs	r3, #0
 800658e:	f04f 32ff 	mov.w	r2, #4294967295
 8006592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006596:	f10a 0a01 	add.w	sl, sl, #1
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	9307      	str	r3, [sp, #28]
 800659e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065a2:	931a      	str	r3, [sp, #104]	; 0x68
 80065a4:	4654      	mov	r4, sl
 80065a6:	2205      	movs	r2, #5
 80065a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ac:	4851      	ldr	r0, [pc, #324]	; (80066f4 <_svfiprintf_r+0x1ec>)
 80065ae:	f7f9 fe17 	bl	80001e0 <memchr>
 80065b2:	9a04      	ldr	r2, [sp, #16]
 80065b4:	b9d8      	cbnz	r0, 80065ee <_svfiprintf_r+0xe6>
 80065b6:	06d0      	lsls	r0, r2, #27
 80065b8:	bf44      	itt	mi
 80065ba:	2320      	movmi	r3, #32
 80065bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c0:	0711      	lsls	r1, r2, #28
 80065c2:	bf44      	itt	mi
 80065c4:	232b      	movmi	r3, #43	; 0x2b
 80065c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ca:	f89a 3000 	ldrb.w	r3, [sl]
 80065ce:	2b2a      	cmp	r3, #42	; 0x2a
 80065d0:	d015      	beq.n	80065fe <_svfiprintf_r+0xf6>
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	4654      	mov	r4, sl
 80065d6:	2000      	movs	r0, #0
 80065d8:	f04f 0c0a 	mov.w	ip, #10
 80065dc:	4621      	mov	r1, r4
 80065de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065e2:	3b30      	subs	r3, #48	; 0x30
 80065e4:	2b09      	cmp	r3, #9
 80065e6:	d94e      	bls.n	8006686 <_svfiprintf_r+0x17e>
 80065e8:	b1b0      	cbz	r0, 8006618 <_svfiprintf_r+0x110>
 80065ea:	9207      	str	r2, [sp, #28]
 80065ec:	e014      	b.n	8006618 <_svfiprintf_r+0x110>
 80065ee:	eba0 0308 	sub.w	r3, r0, r8
 80065f2:	fa09 f303 	lsl.w	r3, r9, r3
 80065f6:	4313      	orrs	r3, r2
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	46a2      	mov	sl, r4
 80065fc:	e7d2      	b.n	80065a4 <_svfiprintf_r+0x9c>
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	1d19      	adds	r1, r3, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	9103      	str	r1, [sp, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	bfbb      	ittet	lt
 800660a:	425b      	neglt	r3, r3
 800660c:	f042 0202 	orrlt.w	r2, r2, #2
 8006610:	9307      	strge	r3, [sp, #28]
 8006612:	9307      	strlt	r3, [sp, #28]
 8006614:	bfb8      	it	lt
 8006616:	9204      	strlt	r2, [sp, #16]
 8006618:	7823      	ldrb	r3, [r4, #0]
 800661a:	2b2e      	cmp	r3, #46	; 0x2e
 800661c:	d10c      	bne.n	8006638 <_svfiprintf_r+0x130>
 800661e:	7863      	ldrb	r3, [r4, #1]
 8006620:	2b2a      	cmp	r3, #42	; 0x2a
 8006622:	d135      	bne.n	8006690 <_svfiprintf_r+0x188>
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	1d1a      	adds	r2, r3, #4
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	9203      	str	r2, [sp, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	bfb8      	it	lt
 8006630:	f04f 33ff 	movlt.w	r3, #4294967295
 8006634:	3402      	adds	r4, #2
 8006636:	9305      	str	r3, [sp, #20]
 8006638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006704 <_svfiprintf_r+0x1fc>
 800663c:	7821      	ldrb	r1, [r4, #0]
 800663e:	2203      	movs	r2, #3
 8006640:	4650      	mov	r0, sl
 8006642:	f7f9 fdcd 	bl	80001e0 <memchr>
 8006646:	b140      	cbz	r0, 800665a <_svfiprintf_r+0x152>
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	eba0 000a 	sub.w	r0, r0, sl
 800664e:	fa03 f000 	lsl.w	r0, r3, r0
 8006652:	9b04      	ldr	r3, [sp, #16]
 8006654:	4303      	orrs	r3, r0
 8006656:	3401      	adds	r4, #1
 8006658:	9304      	str	r3, [sp, #16]
 800665a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665e:	4826      	ldr	r0, [pc, #152]	; (80066f8 <_svfiprintf_r+0x1f0>)
 8006660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006664:	2206      	movs	r2, #6
 8006666:	f7f9 fdbb 	bl	80001e0 <memchr>
 800666a:	2800      	cmp	r0, #0
 800666c:	d038      	beq.n	80066e0 <_svfiprintf_r+0x1d8>
 800666e:	4b23      	ldr	r3, [pc, #140]	; (80066fc <_svfiprintf_r+0x1f4>)
 8006670:	bb1b      	cbnz	r3, 80066ba <_svfiprintf_r+0x1b2>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	3307      	adds	r3, #7
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	3308      	adds	r3, #8
 800667c:	9303      	str	r3, [sp, #12]
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	4433      	add	r3, r6
 8006682:	9309      	str	r3, [sp, #36]	; 0x24
 8006684:	e767      	b.n	8006556 <_svfiprintf_r+0x4e>
 8006686:	fb0c 3202 	mla	r2, ip, r2, r3
 800668a:	460c      	mov	r4, r1
 800668c:	2001      	movs	r0, #1
 800668e:	e7a5      	b.n	80065dc <_svfiprintf_r+0xd4>
 8006690:	2300      	movs	r3, #0
 8006692:	3401      	adds	r4, #1
 8006694:	9305      	str	r3, [sp, #20]
 8006696:	4619      	mov	r1, r3
 8006698:	f04f 0c0a 	mov.w	ip, #10
 800669c:	4620      	mov	r0, r4
 800669e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a2:	3a30      	subs	r2, #48	; 0x30
 80066a4:	2a09      	cmp	r2, #9
 80066a6:	d903      	bls.n	80066b0 <_svfiprintf_r+0x1a8>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0c5      	beq.n	8006638 <_svfiprintf_r+0x130>
 80066ac:	9105      	str	r1, [sp, #20]
 80066ae:	e7c3      	b.n	8006638 <_svfiprintf_r+0x130>
 80066b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066b4:	4604      	mov	r4, r0
 80066b6:	2301      	movs	r3, #1
 80066b8:	e7f0      	b.n	800669c <_svfiprintf_r+0x194>
 80066ba:	ab03      	add	r3, sp, #12
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	462a      	mov	r2, r5
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <_svfiprintf_r+0x1f8>)
 80066c2:	a904      	add	r1, sp, #16
 80066c4:	4638      	mov	r0, r7
 80066c6:	f7fc fa87 	bl	8002bd8 <_printf_float>
 80066ca:	1c42      	adds	r2, r0, #1
 80066cc:	4606      	mov	r6, r0
 80066ce:	d1d6      	bne.n	800667e <_svfiprintf_r+0x176>
 80066d0:	89ab      	ldrh	r3, [r5, #12]
 80066d2:	065b      	lsls	r3, r3, #25
 80066d4:	f53f af2c 	bmi.w	8006530 <_svfiprintf_r+0x28>
 80066d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066da:	b01d      	add	sp, #116	; 0x74
 80066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e0:	ab03      	add	r3, sp, #12
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	462a      	mov	r2, r5
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <_svfiprintf_r+0x1f8>)
 80066e8:	a904      	add	r1, sp, #16
 80066ea:	4638      	mov	r0, r7
 80066ec:	f7fc fd18 	bl	8003120 <_printf_i>
 80066f0:	e7eb      	b.n	80066ca <_svfiprintf_r+0x1c2>
 80066f2:	bf00      	nop
 80066f4:	080077bc 	.word	0x080077bc
 80066f8:	080077c6 	.word	0x080077c6
 80066fc:	08002bd9 	.word	0x08002bd9
 8006700:	08006451 	.word	0x08006451
 8006704:	080077c2 	.word	0x080077c2

08006708 <nan>:
 8006708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006710 <nan+0x8>
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	00000000 	.word	0x00000000
 8006714:	7ff80000 	.word	0x7ff80000

08006718 <_sbrk_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d06      	ldr	r5, [pc, #24]	; (8006734 <_sbrk_r+0x1c>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fb fbfe 	bl	8001f24 <_sbrk>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_sbrk_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_sbrk_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20000470 	.word	0x20000470

08006738 <strncmp>:
 8006738:	b510      	push	{r4, lr}
 800673a:	b16a      	cbz	r2, 8006758 <strncmp+0x20>
 800673c:	3901      	subs	r1, #1
 800673e:	1884      	adds	r4, r0, r2
 8006740:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006744:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006748:	4293      	cmp	r3, r2
 800674a:	d103      	bne.n	8006754 <strncmp+0x1c>
 800674c:	42a0      	cmp	r0, r4
 800674e:	d001      	beq.n	8006754 <strncmp+0x1c>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f5      	bne.n	8006740 <strncmp+0x8>
 8006754:	1a98      	subs	r0, r3, r2
 8006756:	bd10      	pop	{r4, pc}
 8006758:	4610      	mov	r0, r2
 800675a:	e7fc      	b.n	8006756 <strncmp+0x1e>

0800675c <__ascii_wctomb>:
 800675c:	b149      	cbz	r1, 8006772 <__ascii_wctomb+0x16>
 800675e:	2aff      	cmp	r2, #255	; 0xff
 8006760:	bf85      	ittet	hi
 8006762:	238a      	movhi	r3, #138	; 0x8a
 8006764:	6003      	strhi	r3, [r0, #0]
 8006766:	700a      	strbls	r2, [r1, #0]
 8006768:	f04f 30ff 	movhi.w	r0, #4294967295
 800676c:	bf98      	it	ls
 800676e:	2001      	movls	r0, #1
 8006770:	4770      	bx	lr
 8006772:	4608      	mov	r0, r1
 8006774:	4770      	bx	lr
	...

08006778 <__assert_func>:
 8006778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800677a:	4614      	mov	r4, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <__assert_func+0x2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4605      	mov	r5, r0
 8006784:	68d8      	ldr	r0, [r3, #12]
 8006786:	b14c      	cbz	r4, 800679c <__assert_func+0x24>
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <__assert_func+0x30>)
 800678a:	9100      	str	r1, [sp, #0]
 800678c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006790:	4906      	ldr	r1, [pc, #24]	; (80067ac <__assert_func+0x34>)
 8006792:	462b      	mov	r3, r5
 8006794:	f000 f80e 	bl	80067b4 <fiprintf>
 8006798:	f000 fa84 	bl	8006ca4 <abort>
 800679c:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <__assert_func+0x38>)
 800679e:	461c      	mov	r4, r3
 80067a0:	e7f3      	b.n	800678a <__assert_func+0x12>
 80067a2:	bf00      	nop
 80067a4:	20000004 	.word	0x20000004
 80067a8:	080077cd 	.word	0x080077cd
 80067ac:	080077da 	.word	0x080077da
 80067b0:	08007808 	.word	0x08007808

080067b4 <fiprintf>:
 80067b4:	b40e      	push	{r1, r2, r3}
 80067b6:	b503      	push	{r0, r1, lr}
 80067b8:	4601      	mov	r1, r0
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	4805      	ldr	r0, [pc, #20]	; (80067d4 <fiprintf+0x20>)
 80067be:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	f000 f87d 	bl	80068c4 <_vfiprintf_r>
 80067ca:	b002      	add	sp, #8
 80067cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d0:	b003      	add	sp, #12
 80067d2:	4770      	bx	lr
 80067d4:	20000004 	.word	0x20000004

080067d8 <memmove>:
 80067d8:	4288      	cmp	r0, r1
 80067da:	b510      	push	{r4, lr}
 80067dc:	eb01 0402 	add.w	r4, r1, r2
 80067e0:	d902      	bls.n	80067e8 <memmove+0x10>
 80067e2:	4284      	cmp	r4, r0
 80067e4:	4623      	mov	r3, r4
 80067e6:	d807      	bhi.n	80067f8 <memmove+0x20>
 80067e8:	1e43      	subs	r3, r0, #1
 80067ea:	42a1      	cmp	r1, r4
 80067ec:	d008      	beq.n	8006800 <memmove+0x28>
 80067ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067f6:	e7f8      	b.n	80067ea <memmove+0x12>
 80067f8:	4402      	add	r2, r0
 80067fa:	4601      	mov	r1, r0
 80067fc:	428a      	cmp	r2, r1
 80067fe:	d100      	bne.n	8006802 <memmove+0x2a>
 8006800:	bd10      	pop	{r4, pc}
 8006802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800680a:	e7f7      	b.n	80067fc <memmove+0x24>

0800680c <__malloc_lock>:
 800680c:	4801      	ldr	r0, [pc, #4]	; (8006814 <__malloc_lock+0x8>)
 800680e:	f000 bc09 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8006812:	bf00      	nop
 8006814:	20000478 	.word	0x20000478

08006818 <__malloc_unlock>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__malloc_unlock+0x8>)
 800681a:	f000 bc04 	b.w	8007026 <__retarget_lock_release_recursive>
 800681e:	bf00      	nop
 8006820:	20000478 	.word	0x20000478

08006824 <_realloc_r>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	4607      	mov	r7, r0
 8006828:	4614      	mov	r4, r2
 800682a:	460e      	mov	r6, r1
 800682c:	b921      	cbnz	r1, 8006838 <_realloc_r+0x14>
 800682e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006832:	4611      	mov	r1, r2
 8006834:	f7ff bdb2 	b.w	800639c <_malloc_r>
 8006838:	b922      	cbnz	r2, 8006844 <_realloc_r+0x20>
 800683a:	f7ff fd5f 	bl	80062fc <_free_r>
 800683e:	4625      	mov	r5, r4
 8006840:	4628      	mov	r0, r5
 8006842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006844:	f000 fc54 	bl	80070f0 <_malloc_usable_size_r>
 8006848:	42a0      	cmp	r0, r4
 800684a:	d20f      	bcs.n	800686c <_realloc_r+0x48>
 800684c:	4621      	mov	r1, r4
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff fda4 	bl	800639c <_malloc_r>
 8006854:	4605      	mov	r5, r0
 8006856:	2800      	cmp	r0, #0
 8006858:	d0f2      	beq.n	8006840 <_realloc_r+0x1c>
 800685a:	4631      	mov	r1, r6
 800685c:	4622      	mov	r2, r4
 800685e:	f7ff f875 	bl	800594c <memcpy>
 8006862:	4631      	mov	r1, r6
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fd49 	bl	80062fc <_free_r>
 800686a:	e7e9      	b.n	8006840 <_realloc_r+0x1c>
 800686c:	4635      	mov	r5, r6
 800686e:	e7e7      	b.n	8006840 <_realloc_r+0x1c>

08006870 <__sfputc_r>:
 8006870:	6893      	ldr	r3, [r2, #8]
 8006872:	3b01      	subs	r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	b410      	push	{r4}
 8006878:	6093      	str	r3, [r2, #8]
 800687a:	da08      	bge.n	800688e <__sfputc_r+0x1e>
 800687c:	6994      	ldr	r4, [r2, #24]
 800687e:	42a3      	cmp	r3, r4
 8006880:	db01      	blt.n	8006886 <__sfputc_r+0x16>
 8006882:	290a      	cmp	r1, #10
 8006884:	d103      	bne.n	800688e <__sfputc_r+0x1e>
 8006886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800688a:	f000 b94b 	b.w	8006b24 <__swbuf_r>
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	1c58      	adds	r0, r3, #1
 8006892:	6010      	str	r0, [r2, #0]
 8006894:	7019      	strb	r1, [r3, #0]
 8006896:	4608      	mov	r0, r1
 8006898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689c:	4770      	bx	lr

0800689e <__sfputs_r>:
 800689e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a0:	4606      	mov	r6, r0
 80068a2:	460f      	mov	r7, r1
 80068a4:	4614      	mov	r4, r2
 80068a6:	18d5      	adds	r5, r2, r3
 80068a8:	42ac      	cmp	r4, r5
 80068aa:	d101      	bne.n	80068b0 <__sfputs_r+0x12>
 80068ac:	2000      	movs	r0, #0
 80068ae:	e007      	b.n	80068c0 <__sfputs_r+0x22>
 80068b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b4:	463a      	mov	r2, r7
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff ffda 	bl	8006870 <__sfputc_r>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d1f3      	bne.n	80068a8 <__sfputs_r+0xa>
 80068c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068c4 <_vfiprintf_r>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	460d      	mov	r5, r1
 80068ca:	b09d      	sub	sp, #116	; 0x74
 80068cc:	4614      	mov	r4, r2
 80068ce:	4698      	mov	r8, r3
 80068d0:	4606      	mov	r6, r0
 80068d2:	b118      	cbz	r0, 80068dc <_vfiprintf_r+0x18>
 80068d4:	6983      	ldr	r3, [r0, #24]
 80068d6:	b90b      	cbnz	r3, 80068dc <_vfiprintf_r+0x18>
 80068d8:	f000 fb06 	bl	8006ee8 <__sinit>
 80068dc:	4b89      	ldr	r3, [pc, #548]	; (8006b04 <_vfiprintf_r+0x240>)
 80068de:	429d      	cmp	r5, r3
 80068e0:	d11b      	bne.n	800691a <_vfiprintf_r+0x56>
 80068e2:	6875      	ldr	r5, [r6, #4]
 80068e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e6:	07d9      	lsls	r1, r3, #31
 80068e8:	d405      	bmi.n	80068f6 <_vfiprintf_r+0x32>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	059a      	lsls	r2, r3, #22
 80068ee:	d402      	bmi.n	80068f6 <_vfiprintf_r+0x32>
 80068f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068f2:	f000 fb97 	bl	8007024 <__retarget_lock_acquire_recursive>
 80068f6:	89ab      	ldrh	r3, [r5, #12]
 80068f8:	071b      	lsls	r3, r3, #28
 80068fa:	d501      	bpl.n	8006900 <_vfiprintf_r+0x3c>
 80068fc:	692b      	ldr	r3, [r5, #16]
 80068fe:	b9eb      	cbnz	r3, 800693c <_vfiprintf_r+0x78>
 8006900:	4629      	mov	r1, r5
 8006902:	4630      	mov	r0, r6
 8006904:	f000 f960 	bl	8006bc8 <__swsetup_r>
 8006908:	b1c0      	cbz	r0, 800693c <_vfiprintf_r+0x78>
 800690a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800690c:	07dc      	lsls	r4, r3, #31
 800690e:	d50e      	bpl.n	800692e <_vfiprintf_r+0x6a>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	b01d      	add	sp, #116	; 0x74
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691a:	4b7b      	ldr	r3, [pc, #492]	; (8006b08 <_vfiprintf_r+0x244>)
 800691c:	429d      	cmp	r5, r3
 800691e:	d101      	bne.n	8006924 <_vfiprintf_r+0x60>
 8006920:	68b5      	ldr	r5, [r6, #8]
 8006922:	e7df      	b.n	80068e4 <_vfiprintf_r+0x20>
 8006924:	4b79      	ldr	r3, [pc, #484]	; (8006b0c <_vfiprintf_r+0x248>)
 8006926:	429d      	cmp	r5, r3
 8006928:	bf08      	it	eq
 800692a:	68f5      	ldreq	r5, [r6, #12]
 800692c:	e7da      	b.n	80068e4 <_vfiprintf_r+0x20>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	0598      	lsls	r0, r3, #22
 8006932:	d4ed      	bmi.n	8006910 <_vfiprintf_r+0x4c>
 8006934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006936:	f000 fb76 	bl	8007026 <__retarget_lock_release_recursive>
 800693a:	e7e9      	b.n	8006910 <_vfiprintf_r+0x4c>
 800693c:	2300      	movs	r3, #0
 800693e:	9309      	str	r3, [sp, #36]	; 0x24
 8006940:	2320      	movs	r3, #32
 8006942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006946:	f8cd 800c 	str.w	r8, [sp, #12]
 800694a:	2330      	movs	r3, #48	; 0x30
 800694c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b10 <_vfiprintf_r+0x24c>
 8006950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006954:	f04f 0901 	mov.w	r9, #1
 8006958:	4623      	mov	r3, r4
 800695a:	469a      	mov	sl, r3
 800695c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006960:	b10a      	cbz	r2, 8006966 <_vfiprintf_r+0xa2>
 8006962:	2a25      	cmp	r2, #37	; 0x25
 8006964:	d1f9      	bne.n	800695a <_vfiprintf_r+0x96>
 8006966:	ebba 0b04 	subs.w	fp, sl, r4
 800696a:	d00b      	beq.n	8006984 <_vfiprintf_r+0xc0>
 800696c:	465b      	mov	r3, fp
 800696e:	4622      	mov	r2, r4
 8006970:	4629      	mov	r1, r5
 8006972:	4630      	mov	r0, r6
 8006974:	f7ff ff93 	bl	800689e <__sfputs_r>
 8006978:	3001      	adds	r0, #1
 800697a:	f000 80aa 	beq.w	8006ad2 <_vfiprintf_r+0x20e>
 800697e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006980:	445a      	add	r2, fp
 8006982:	9209      	str	r2, [sp, #36]	; 0x24
 8006984:	f89a 3000 	ldrb.w	r3, [sl]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80a2 	beq.w	8006ad2 <_vfiprintf_r+0x20e>
 800698e:	2300      	movs	r3, #0
 8006990:	f04f 32ff 	mov.w	r2, #4294967295
 8006994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006998:	f10a 0a01 	add.w	sl, sl, #1
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069a4:	931a      	str	r3, [sp, #104]	; 0x68
 80069a6:	4654      	mov	r4, sl
 80069a8:	2205      	movs	r2, #5
 80069aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ae:	4858      	ldr	r0, [pc, #352]	; (8006b10 <_vfiprintf_r+0x24c>)
 80069b0:	f7f9 fc16 	bl	80001e0 <memchr>
 80069b4:	9a04      	ldr	r2, [sp, #16]
 80069b6:	b9d8      	cbnz	r0, 80069f0 <_vfiprintf_r+0x12c>
 80069b8:	06d1      	lsls	r1, r2, #27
 80069ba:	bf44      	itt	mi
 80069bc:	2320      	movmi	r3, #32
 80069be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c2:	0713      	lsls	r3, r2, #28
 80069c4:	bf44      	itt	mi
 80069c6:	232b      	movmi	r3, #43	; 0x2b
 80069c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069cc:	f89a 3000 	ldrb.w	r3, [sl]
 80069d0:	2b2a      	cmp	r3, #42	; 0x2a
 80069d2:	d015      	beq.n	8006a00 <_vfiprintf_r+0x13c>
 80069d4:	9a07      	ldr	r2, [sp, #28]
 80069d6:	4654      	mov	r4, sl
 80069d8:	2000      	movs	r0, #0
 80069da:	f04f 0c0a 	mov.w	ip, #10
 80069de:	4621      	mov	r1, r4
 80069e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069e4:	3b30      	subs	r3, #48	; 0x30
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d94e      	bls.n	8006a88 <_vfiprintf_r+0x1c4>
 80069ea:	b1b0      	cbz	r0, 8006a1a <_vfiprintf_r+0x156>
 80069ec:	9207      	str	r2, [sp, #28]
 80069ee:	e014      	b.n	8006a1a <_vfiprintf_r+0x156>
 80069f0:	eba0 0308 	sub.w	r3, r0, r8
 80069f4:	fa09 f303 	lsl.w	r3, r9, r3
 80069f8:	4313      	orrs	r3, r2
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	46a2      	mov	sl, r4
 80069fe:	e7d2      	b.n	80069a6 <_vfiprintf_r+0xe2>
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	1d19      	adds	r1, r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	9103      	str	r1, [sp, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bfbb      	ittet	lt
 8006a0c:	425b      	neglt	r3, r3
 8006a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a12:	9307      	strge	r3, [sp, #28]
 8006a14:	9307      	strlt	r3, [sp, #28]
 8006a16:	bfb8      	it	lt
 8006a18:	9204      	strlt	r2, [sp, #16]
 8006a1a:	7823      	ldrb	r3, [r4, #0]
 8006a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a1e:	d10c      	bne.n	8006a3a <_vfiprintf_r+0x176>
 8006a20:	7863      	ldrb	r3, [r4, #1]
 8006a22:	2b2a      	cmp	r3, #42	; 0x2a
 8006a24:	d135      	bne.n	8006a92 <_vfiprintf_r+0x1ce>
 8006a26:	9b03      	ldr	r3, [sp, #12]
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	9203      	str	r2, [sp, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfb8      	it	lt
 8006a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a36:	3402      	adds	r4, #2
 8006a38:	9305      	str	r3, [sp, #20]
 8006a3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b20 <_vfiprintf_r+0x25c>
 8006a3e:	7821      	ldrb	r1, [r4, #0]
 8006a40:	2203      	movs	r2, #3
 8006a42:	4650      	mov	r0, sl
 8006a44:	f7f9 fbcc 	bl	80001e0 <memchr>
 8006a48:	b140      	cbz	r0, 8006a5c <_vfiprintf_r+0x198>
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	eba0 000a 	sub.w	r0, r0, sl
 8006a50:	fa03 f000 	lsl.w	r0, r3, r0
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	4303      	orrs	r3, r0
 8006a58:	3401      	adds	r4, #1
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a60:	482c      	ldr	r0, [pc, #176]	; (8006b14 <_vfiprintf_r+0x250>)
 8006a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a66:	2206      	movs	r2, #6
 8006a68:	f7f9 fbba 	bl	80001e0 <memchr>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d03f      	beq.n	8006af0 <_vfiprintf_r+0x22c>
 8006a70:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <_vfiprintf_r+0x254>)
 8006a72:	bb1b      	cbnz	r3, 8006abc <_vfiprintf_r+0x1f8>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	3307      	adds	r3, #7
 8006a78:	f023 0307 	bic.w	r3, r3, #7
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a82:	443b      	add	r3, r7
 8006a84:	9309      	str	r3, [sp, #36]	; 0x24
 8006a86:	e767      	b.n	8006958 <_vfiprintf_r+0x94>
 8006a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	2001      	movs	r0, #1
 8006a90:	e7a5      	b.n	80069de <_vfiprintf_r+0x11a>
 8006a92:	2300      	movs	r3, #0
 8006a94:	3401      	adds	r4, #1
 8006a96:	9305      	str	r3, [sp, #20]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f04f 0c0a 	mov.w	ip, #10
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aa4:	3a30      	subs	r2, #48	; 0x30
 8006aa6:	2a09      	cmp	r2, #9
 8006aa8:	d903      	bls.n	8006ab2 <_vfiprintf_r+0x1ee>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0c5      	beq.n	8006a3a <_vfiprintf_r+0x176>
 8006aae:	9105      	str	r1, [sp, #20]
 8006ab0:	e7c3      	b.n	8006a3a <_vfiprintf_r+0x176>
 8006ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e7f0      	b.n	8006a9e <_vfiprintf_r+0x1da>
 8006abc:	ab03      	add	r3, sp, #12
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <_vfiprintf_r+0x258>)
 8006ac4:	a904      	add	r1, sp, #16
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7fc f886 	bl	8002bd8 <_printf_float>
 8006acc:	4607      	mov	r7, r0
 8006ace:	1c78      	adds	r0, r7, #1
 8006ad0:	d1d6      	bne.n	8006a80 <_vfiprintf_r+0x1bc>
 8006ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ad4:	07d9      	lsls	r1, r3, #31
 8006ad6:	d405      	bmi.n	8006ae4 <_vfiprintf_r+0x220>
 8006ad8:	89ab      	ldrh	r3, [r5, #12]
 8006ada:	059a      	lsls	r2, r3, #22
 8006adc:	d402      	bmi.n	8006ae4 <_vfiprintf_r+0x220>
 8006ade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ae0:	f000 faa1 	bl	8007026 <__retarget_lock_release_recursive>
 8006ae4:	89ab      	ldrh	r3, [r5, #12]
 8006ae6:	065b      	lsls	r3, r3, #25
 8006ae8:	f53f af12 	bmi.w	8006910 <_vfiprintf_r+0x4c>
 8006aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aee:	e711      	b.n	8006914 <_vfiprintf_r+0x50>
 8006af0:	ab03      	add	r3, sp, #12
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	462a      	mov	r2, r5
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <_vfiprintf_r+0x258>)
 8006af8:	a904      	add	r1, sp, #16
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7fc fb10 	bl	8003120 <_printf_i>
 8006b00:	e7e4      	b.n	8006acc <_vfiprintf_r+0x208>
 8006b02:	bf00      	nop
 8006b04:	0800782c 	.word	0x0800782c
 8006b08:	0800784c 	.word	0x0800784c
 8006b0c:	0800780c 	.word	0x0800780c
 8006b10:	080077bc 	.word	0x080077bc
 8006b14:	080077c6 	.word	0x080077c6
 8006b18:	08002bd9 	.word	0x08002bd9
 8006b1c:	0800689f 	.word	0x0800689f
 8006b20:	080077c2 	.word	0x080077c2

08006b24 <__swbuf_r>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	460e      	mov	r6, r1
 8006b28:	4614      	mov	r4, r2
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	b118      	cbz	r0, 8006b36 <__swbuf_r+0x12>
 8006b2e:	6983      	ldr	r3, [r0, #24]
 8006b30:	b90b      	cbnz	r3, 8006b36 <__swbuf_r+0x12>
 8006b32:	f000 f9d9 	bl	8006ee8 <__sinit>
 8006b36:	4b21      	ldr	r3, [pc, #132]	; (8006bbc <__swbuf_r+0x98>)
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	d12b      	bne.n	8006b94 <__swbuf_r+0x70>
 8006b3c:	686c      	ldr	r4, [r5, #4]
 8006b3e:	69a3      	ldr	r3, [r4, #24]
 8006b40:	60a3      	str	r3, [r4, #8]
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	071a      	lsls	r2, r3, #28
 8006b46:	d52f      	bpl.n	8006ba8 <__swbuf_r+0x84>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	b36b      	cbz	r3, 8006ba8 <__swbuf_r+0x84>
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	1ac0      	subs	r0, r0, r3
 8006b52:	6963      	ldr	r3, [r4, #20]
 8006b54:	b2f6      	uxtb	r6, r6
 8006b56:	4283      	cmp	r3, r0
 8006b58:	4637      	mov	r7, r6
 8006b5a:	dc04      	bgt.n	8006b66 <__swbuf_r+0x42>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 f92e 	bl	8006dc0 <_fflush_r>
 8006b64:	bb30      	cbnz	r0, 8006bb4 <__swbuf_r+0x90>
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	60a3      	str	r3, [r4, #8]
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	701e      	strb	r6, [r3, #0]
 8006b74:	6963      	ldr	r3, [r4, #20]
 8006b76:	3001      	adds	r0, #1
 8006b78:	4283      	cmp	r3, r0
 8006b7a:	d004      	beq.n	8006b86 <__swbuf_r+0x62>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	07db      	lsls	r3, r3, #31
 8006b80:	d506      	bpl.n	8006b90 <__swbuf_r+0x6c>
 8006b82:	2e0a      	cmp	r6, #10
 8006b84:	d104      	bne.n	8006b90 <__swbuf_r+0x6c>
 8006b86:	4621      	mov	r1, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 f919 	bl	8006dc0 <_fflush_r>
 8006b8e:	b988      	cbnz	r0, 8006bb4 <__swbuf_r+0x90>
 8006b90:	4638      	mov	r0, r7
 8006b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b94:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <__swbuf_r+0x9c>)
 8006b96:	429c      	cmp	r4, r3
 8006b98:	d101      	bne.n	8006b9e <__swbuf_r+0x7a>
 8006b9a:	68ac      	ldr	r4, [r5, #8]
 8006b9c:	e7cf      	b.n	8006b3e <__swbuf_r+0x1a>
 8006b9e:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <__swbuf_r+0xa0>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	bf08      	it	eq
 8006ba4:	68ec      	ldreq	r4, [r5, #12]
 8006ba6:	e7ca      	b.n	8006b3e <__swbuf_r+0x1a>
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 f80c 	bl	8006bc8 <__swsetup_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d0cb      	beq.n	8006b4c <__swbuf_r+0x28>
 8006bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bb8:	e7ea      	b.n	8006b90 <__swbuf_r+0x6c>
 8006bba:	bf00      	nop
 8006bbc:	0800782c 	.word	0x0800782c
 8006bc0:	0800784c 	.word	0x0800784c
 8006bc4:	0800780c 	.word	0x0800780c

08006bc8 <__swsetup_r>:
 8006bc8:	4b32      	ldr	r3, [pc, #200]	; (8006c94 <__swsetup_r+0xcc>)
 8006bca:	b570      	push	{r4, r5, r6, lr}
 8006bcc:	681d      	ldr	r5, [r3, #0]
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	b125      	cbz	r5, 8006bde <__swsetup_r+0x16>
 8006bd4:	69ab      	ldr	r3, [r5, #24]
 8006bd6:	b913      	cbnz	r3, 8006bde <__swsetup_r+0x16>
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f000 f985 	bl	8006ee8 <__sinit>
 8006bde:	4b2e      	ldr	r3, [pc, #184]	; (8006c98 <__swsetup_r+0xd0>)
 8006be0:	429c      	cmp	r4, r3
 8006be2:	d10f      	bne.n	8006c04 <__swsetup_r+0x3c>
 8006be4:	686c      	ldr	r4, [r5, #4]
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bec:	0719      	lsls	r1, r3, #28
 8006bee:	d42c      	bmi.n	8006c4a <__swsetup_r+0x82>
 8006bf0:	06dd      	lsls	r5, r3, #27
 8006bf2:	d411      	bmi.n	8006c18 <__swsetup_r+0x50>
 8006bf4:	2309      	movs	r3, #9
 8006bf6:	6033      	str	r3, [r6, #0]
 8006bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006c02:	e03e      	b.n	8006c82 <__swsetup_r+0xba>
 8006c04:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <__swsetup_r+0xd4>)
 8006c06:	429c      	cmp	r4, r3
 8006c08:	d101      	bne.n	8006c0e <__swsetup_r+0x46>
 8006c0a:	68ac      	ldr	r4, [r5, #8]
 8006c0c:	e7eb      	b.n	8006be6 <__swsetup_r+0x1e>
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <__swsetup_r+0xd8>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	bf08      	it	eq
 8006c14:	68ec      	ldreq	r4, [r5, #12]
 8006c16:	e7e6      	b.n	8006be6 <__swsetup_r+0x1e>
 8006c18:	0758      	lsls	r0, r3, #29
 8006c1a:	d512      	bpl.n	8006c42 <__swsetup_r+0x7a>
 8006c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1e:	b141      	cbz	r1, 8006c32 <__swsetup_r+0x6a>
 8006c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c24:	4299      	cmp	r1, r3
 8006c26:	d002      	beq.n	8006c2e <__swsetup_r+0x66>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f7ff fb67 	bl	80062fc <_free_r>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6363      	str	r3, [r4, #52]	; 0x34
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6063      	str	r3, [r4, #4]
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f043 0308 	orr.w	r3, r3, #8
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	b94b      	cbnz	r3, 8006c62 <__swsetup_r+0x9a>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c58:	d003      	beq.n	8006c62 <__swsetup_r+0x9a>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f000 fa07 	bl	8007070 <__smakebuf_r>
 8006c62:	89a0      	ldrh	r0, [r4, #12]
 8006c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c68:	f010 0301 	ands.w	r3, r0, #1
 8006c6c:	d00a      	beq.n	8006c84 <__swsetup_r+0xbc>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60a3      	str	r3, [r4, #8]
 8006c72:	6963      	ldr	r3, [r4, #20]
 8006c74:	425b      	negs	r3, r3
 8006c76:	61a3      	str	r3, [r4, #24]
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	b943      	cbnz	r3, 8006c8e <__swsetup_r+0xc6>
 8006c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c80:	d1ba      	bne.n	8006bf8 <__swsetup_r+0x30>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	0781      	lsls	r1, r0, #30
 8006c86:	bf58      	it	pl
 8006c88:	6963      	ldrpl	r3, [r4, #20]
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	e7f4      	b.n	8006c78 <__swsetup_r+0xb0>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e7f7      	b.n	8006c82 <__swsetup_r+0xba>
 8006c92:	bf00      	nop
 8006c94:	20000004 	.word	0x20000004
 8006c98:	0800782c 	.word	0x0800782c
 8006c9c:	0800784c 	.word	0x0800784c
 8006ca0:	0800780c 	.word	0x0800780c

08006ca4 <abort>:
 8006ca4:	b508      	push	{r3, lr}
 8006ca6:	2006      	movs	r0, #6
 8006ca8:	f000 fa52 	bl	8007150 <raise>
 8006cac:	2001      	movs	r0, #1
 8006cae:	f7fb f8c1 	bl	8001e34 <_exit>
	...

08006cb4 <__sflush_r>:
 8006cb4:	898a      	ldrh	r2, [r1, #12]
 8006cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cba:	4605      	mov	r5, r0
 8006cbc:	0710      	lsls	r0, r2, #28
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	d458      	bmi.n	8006d74 <__sflush_r+0xc0>
 8006cc2:	684b      	ldr	r3, [r1, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dc05      	bgt.n	8006cd4 <__sflush_r+0x20>
 8006cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dc02      	bgt.n	8006cd4 <__sflush_r+0x20>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cd6:	2e00      	cmp	r6, #0
 8006cd8:	d0f9      	beq.n	8006cce <__sflush_r+0x1a>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ce0:	682f      	ldr	r7, [r5, #0]
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	d032      	beq.n	8006d4c <__sflush_r+0x98>
 8006ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	075a      	lsls	r2, r3, #29
 8006cec:	d505      	bpl.n	8006cfa <__sflush_r+0x46>
 8006cee:	6863      	ldr	r3, [r4, #4]
 8006cf0:	1ac0      	subs	r0, r0, r3
 8006cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf4:	b10b      	cbz	r3, 8006cfa <__sflush_r+0x46>
 8006cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cf8:	1ac0      	subs	r0, r0, r3
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d00:	6a21      	ldr	r1, [r4, #32]
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b0      	blx	r6
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	d106      	bne.n	8006d1a <__sflush_r+0x66>
 8006d0c:	6829      	ldr	r1, [r5, #0]
 8006d0e:	291d      	cmp	r1, #29
 8006d10:	d82c      	bhi.n	8006d6c <__sflush_r+0xb8>
 8006d12:	4a2a      	ldr	r2, [pc, #168]	; (8006dbc <__sflush_r+0x108>)
 8006d14:	40ca      	lsrs	r2, r1
 8006d16:	07d6      	lsls	r6, r2, #31
 8006d18:	d528      	bpl.n	8006d6c <__sflush_r+0xb8>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	6062      	str	r2, [r4, #4]
 8006d1e:	04d9      	lsls	r1, r3, #19
 8006d20:	6922      	ldr	r2, [r4, #16]
 8006d22:	6022      	str	r2, [r4, #0]
 8006d24:	d504      	bpl.n	8006d30 <__sflush_r+0x7c>
 8006d26:	1c42      	adds	r2, r0, #1
 8006d28:	d101      	bne.n	8006d2e <__sflush_r+0x7a>
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	b903      	cbnz	r3, 8006d30 <__sflush_r+0x7c>
 8006d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d32:	602f      	str	r7, [r5, #0]
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d0ca      	beq.n	8006cce <__sflush_r+0x1a>
 8006d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	d002      	beq.n	8006d46 <__sflush_r+0x92>
 8006d40:	4628      	mov	r0, r5
 8006d42:	f7ff fadb 	bl	80062fc <_free_r>
 8006d46:	2000      	movs	r0, #0
 8006d48:	6360      	str	r0, [r4, #52]	; 0x34
 8006d4a:	e7c1      	b.n	8006cd0 <__sflush_r+0x1c>
 8006d4c:	6a21      	ldr	r1, [r4, #32]
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b0      	blx	r6
 8006d54:	1c41      	adds	r1, r0, #1
 8006d56:	d1c7      	bne.n	8006ce8 <__sflush_r+0x34>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0c4      	beq.n	8006ce8 <__sflush_r+0x34>
 8006d5e:	2b1d      	cmp	r3, #29
 8006d60:	d001      	beq.n	8006d66 <__sflush_r+0xb2>
 8006d62:	2b16      	cmp	r3, #22
 8006d64:	d101      	bne.n	8006d6a <__sflush_r+0xb6>
 8006d66:	602f      	str	r7, [r5, #0]
 8006d68:	e7b1      	b.n	8006cce <__sflush_r+0x1a>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	e7ad      	b.n	8006cd0 <__sflush_r+0x1c>
 8006d74:	690f      	ldr	r7, [r1, #16]
 8006d76:	2f00      	cmp	r7, #0
 8006d78:	d0a9      	beq.n	8006cce <__sflush_r+0x1a>
 8006d7a:	0793      	lsls	r3, r2, #30
 8006d7c:	680e      	ldr	r6, [r1, #0]
 8006d7e:	bf08      	it	eq
 8006d80:	694b      	ldreq	r3, [r1, #20]
 8006d82:	600f      	str	r7, [r1, #0]
 8006d84:	bf18      	it	ne
 8006d86:	2300      	movne	r3, #0
 8006d88:	eba6 0807 	sub.w	r8, r6, r7
 8006d8c:	608b      	str	r3, [r1, #8]
 8006d8e:	f1b8 0f00 	cmp.w	r8, #0
 8006d92:	dd9c      	ble.n	8006cce <__sflush_r+0x1a>
 8006d94:	6a21      	ldr	r1, [r4, #32]
 8006d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d98:	4643      	mov	r3, r8
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b0      	blx	r6
 8006da0:	2800      	cmp	r0, #0
 8006da2:	dc06      	bgt.n	8006db2 <__sflush_r+0xfe>
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e78e      	b.n	8006cd0 <__sflush_r+0x1c>
 8006db2:	4407      	add	r7, r0
 8006db4:	eba8 0800 	sub.w	r8, r8, r0
 8006db8:	e7e9      	b.n	8006d8e <__sflush_r+0xda>
 8006dba:	bf00      	nop
 8006dbc:	20400001 	.word	0x20400001

08006dc0 <_fflush_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	690b      	ldr	r3, [r1, #16]
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	b913      	cbnz	r3, 8006dd0 <_fflush_r+0x10>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	4628      	mov	r0, r5
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	b118      	cbz	r0, 8006dda <_fflush_r+0x1a>
 8006dd2:	6983      	ldr	r3, [r0, #24]
 8006dd4:	b90b      	cbnz	r3, 8006dda <_fflush_r+0x1a>
 8006dd6:	f000 f887 	bl	8006ee8 <__sinit>
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <_fflush_r+0x6c>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	d11b      	bne.n	8006e18 <_fflush_r+0x58>
 8006de0:	686c      	ldr	r4, [r5, #4]
 8006de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0ef      	beq.n	8006dca <_fflush_r+0xa>
 8006dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dec:	07d0      	lsls	r0, r2, #31
 8006dee:	d404      	bmi.n	8006dfa <_fflush_r+0x3a>
 8006df0:	0599      	lsls	r1, r3, #22
 8006df2:	d402      	bmi.n	8006dfa <_fflush_r+0x3a>
 8006df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df6:	f000 f915 	bl	8007024 <__retarget_lock_acquire_recursive>
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	f7ff ff59 	bl	8006cb4 <__sflush_r>
 8006e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e04:	07da      	lsls	r2, r3, #31
 8006e06:	4605      	mov	r5, r0
 8006e08:	d4e0      	bmi.n	8006dcc <_fflush_r+0xc>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	059b      	lsls	r3, r3, #22
 8006e0e:	d4dd      	bmi.n	8006dcc <_fflush_r+0xc>
 8006e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e12:	f000 f908 	bl	8007026 <__retarget_lock_release_recursive>
 8006e16:	e7d9      	b.n	8006dcc <_fflush_r+0xc>
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <_fflush_r+0x70>)
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	d101      	bne.n	8006e22 <_fflush_r+0x62>
 8006e1e:	68ac      	ldr	r4, [r5, #8]
 8006e20:	e7df      	b.n	8006de2 <_fflush_r+0x22>
 8006e22:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <_fflush_r+0x74>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	bf08      	it	eq
 8006e28:	68ec      	ldreq	r4, [r5, #12]
 8006e2a:	e7da      	b.n	8006de2 <_fflush_r+0x22>
 8006e2c:	0800782c 	.word	0x0800782c
 8006e30:	0800784c 	.word	0x0800784c
 8006e34:	0800780c 	.word	0x0800780c

08006e38 <std>:
 8006e38:	2300      	movs	r3, #0
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e46:	6083      	str	r3, [r0, #8]
 8006e48:	8181      	strh	r1, [r0, #12]
 8006e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e4c:	81c2      	strh	r2, [r0, #14]
 8006e4e:	6183      	str	r3, [r0, #24]
 8006e50:	4619      	mov	r1, r3
 8006e52:	2208      	movs	r2, #8
 8006e54:	305c      	adds	r0, #92	; 0x5c
 8006e56:	f7fb fe17 	bl	8002a88 <memset>
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x38>)
 8006e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <std+0x3c>)
 8006e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x40>)
 8006e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <std+0x44>)
 8006e68:	6224      	str	r4, [r4, #32]
 8006e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	08007189 	.word	0x08007189
 8006e74:	080071ab 	.word	0x080071ab
 8006e78:	080071e3 	.word	0x080071e3
 8006e7c:	08007207 	.word	0x08007207

08006e80 <_cleanup_r>:
 8006e80:	4901      	ldr	r1, [pc, #4]	; (8006e88 <_cleanup_r+0x8>)
 8006e82:	f000 b8af 	b.w	8006fe4 <_fwalk_reent>
 8006e86:	bf00      	nop
 8006e88:	08006dc1 	.word	0x08006dc1

08006e8c <__sfmoreglue>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	1e4a      	subs	r2, r1, #1
 8006e90:	2568      	movs	r5, #104	; 0x68
 8006e92:	4355      	muls	r5, r2
 8006e94:	460e      	mov	r6, r1
 8006e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e9a:	f7ff fa7f 	bl	800639c <_malloc_r>
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	b140      	cbz	r0, 8006eb4 <__sfmoreglue+0x28>
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ea8:	300c      	adds	r0, #12
 8006eaa:	60a0      	str	r0, [r4, #8]
 8006eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb0:	f7fb fdea 	bl	8002a88 <memset>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}

08006eb8 <__sfp_lock_acquire>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__sfp_lock_acquire+0x8>)
 8006eba:	f000 b8b3 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	2000047c 	.word	0x2000047c

08006ec4 <__sfp_lock_release>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__sfp_lock_release+0x8>)
 8006ec6:	f000 b8ae 	b.w	8007026 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	2000047c 	.word	0x2000047c

08006ed0 <__sinit_lock_acquire>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sinit_lock_acquire+0x8>)
 8006ed2:	f000 b8a7 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	20000477 	.word	0x20000477

08006edc <__sinit_lock_release>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sinit_lock_release+0x8>)
 8006ede:	f000 b8a2 	b.w	8007026 <__retarget_lock_release_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	20000477 	.word	0x20000477

08006ee8 <__sinit>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	f7ff fff0 	bl	8006ed0 <__sinit_lock_acquire>
 8006ef0:	69a3      	ldr	r3, [r4, #24]
 8006ef2:	b11b      	cbz	r3, 8006efc <__sinit+0x14>
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f7ff bff0 	b.w	8006edc <__sinit_lock_release>
 8006efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f00:	6523      	str	r3, [r4, #80]	; 0x50
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <__sinit+0x68>)
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <__sinit+0x6c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	bf04      	itt	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	61a3      	streq	r3, [r4, #24]
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 f820 	bl	8006f58 <__sfp>
 8006f18:	6060      	str	r0, [r4, #4]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f81c 	bl	8006f58 <__sfp>
 8006f20:	60a0      	str	r0, [r4, #8]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f818 	bl	8006f58 <__sfp>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	60e0      	str	r0, [r4, #12]
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	6860      	ldr	r0, [r4, #4]
 8006f30:	f7ff ff82 	bl	8006e38 <std>
 8006f34:	68a0      	ldr	r0, [r4, #8]
 8006f36:	2201      	movs	r2, #1
 8006f38:	2109      	movs	r1, #9
 8006f3a:	f7ff ff7d 	bl	8006e38 <std>
 8006f3e:	68e0      	ldr	r0, [r4, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	2112      	movs	r1, #18
 8006f44:	f7ff ff78 	bl	8006e38 <std>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	61a3      	str	r3, [r4, #24]
 8006f4c:	e7d2      	b.n	8006ef4 <__sinit+0xc>
 8006f4e:	bf00      	nop
 8006f50:	080073b8 	.word	0x080073b8
 8006f54:	08006e81 	.word	0x08006e81

08006f58 <__sfp>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	f7ff ffac 	bl	8006eb8 <__sfp_lock_acquire>
 8006f60:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <__sfp+0x84>)
 8006f62:	681e      	ldr	r6, [r3, #0]
 8006f64:	69b3      	ldr	r3, [r6, #24]
 8006f66:	b913      	cbnz	r3, 8006f6e <__sfp+0x16>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff ffbd 	bl	8006ee8 <__sinit>
 8006f6e:	3648      	adds	r6, #72	; 0x48
 8006f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	d503      	bpl.n	8006f80 <__sfp+0x28>
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	b30b      	cbz	r3, 8006fc0 <__sfp+0x68>
 8006f7c:	6836      	ldr	r6, [r6, #0]
 8006f7e:	e7f7      	b.n	8006f70 <__sfp+0x18>
 8006f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f84:	b9d5      	cbnz	r5, 8006fbc <__sfp+0x64>
 8006f86:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <__sfp+0x88>)
 8006f88:	60e3      	str	r3, [r4, #12]
 8006f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f90:	f000 f847 	bl	8007022 <__retarget_lock_init_recursive>
 8006f94:	f7ff ff96 	bl	8006ec4 <__sfp_lock_release>
 8006f98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fa0:	6025      	str	r5, [r4, #0]
 8006fa2:	61a5      	str	r5, [r4, #24]
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fac:	f7fb fd6c 	bl	8002a88 <memset>
 8006fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fbc:	3468      	adds	r4, #104	; 0x68
 8006fbe:	e7d9      	b.n	8006f74 <__sfp+0x1c>
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ff62 	bl	8006e8c <__sfmoreglue>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	6030      	str	r0, [r6, #0]
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1d5      	bne.n	8006f7c <__sfp+0x24>
 8006fd0:	f7ff ff78 	bl	8006ec4 <__sfp_lock_release>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	e7ee      	b.n	8006fb8 <__sfp+0x60>
 8006fda:	bf00      	nop
 8006fdc:	080073b8 	.word	0x080073b8
 8006fe0:	ffff0001 	.word	0xffff0001

08006fe4 <_fwalk_reent>:
 8006fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	4606      	mov	r6, r0
 8006fea:	4688      	mov	r8, r1
 8006fec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ff0:	2700      	movs	r7, #0
 8006ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8006ffa:	d505      	bpl.n	8007008 <_fwalk_reent+0x24>
 8006ffc:	6824      	ldr	r4, [r4, #0]
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d1f7      	bne.n	8006ff2 <_fwalk_reent+0xe>
 8007002:	4638      	mov	r0, r7
 8007004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007008:	89ab      	ldrh	r3, [r5, #12]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d907      	bls.n	800701e <_fwalk_reent+0x3a>
 800700e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007012:	3301      	adds	r3, #1
 8007014:	d003      	beq.n	800701e <_fwalk_reent+0x3a>
 8007016:	4629      	mov	r1, r5
 8007018:	4630      	mov	r0, r6
 800701a:	47c0      	blx	r8
 800701c:	4307      	orrs	r7, r0
 800701e:	3568      	adds	r5, #104	; 0x68
 8007020:	e7e9      	b.n	8006ff6 <_fwalk_reent+0x12>

08007022 <__retarget_lock_init_recursive>:
 8007022:	4770      	bx	lr

08007024 <__retarget_lock_acquire_recursive>:
 8007024:	4770      	bx	lr

08007026 <__retarget_lock_release_recursive>:
 8007026:	4770      	bx	lr

08007028 <__swhatbuf_r>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	460e      	mov	r6, r1
 800702c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007030:	2900      	cmp	r1, #0
 8007032:	b096      	sub	sp, #88	; 0x58
 8007034:	4614      	mov	r4, r2
 8007036:	461d      	mov	r5, r3
 8007038:	da07      	bge.n	800704a <__swhatbuf_r+0x22>
 800703a:	2300      	movs	r3, #0
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	89b3      	ldrh	r3, [r6, #12]
 8007040:	061a      	lsls	r2, r3, #24
 8007042:	d410      	bmi.n	8007066 <__swhatbuf_r+0x3e>
 8007044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007048:	e00e      	b.n	8007068 <__swhatbuf_r+0x40>
 800704a:	466a      	mov	r2, sp
 800704c:	f000 f902 	bl	8007254 <_fstat_r>
 8007050:	2800      	cmp	r0, #0
 8007052:	dbf2      	blt.n	800703a <__swhatbuf_r+0x12>
 8007054:	9a01      	ldr	r2, [sp, #4]
 8007056:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800705a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800705e:	425a      	negs	r2, r3
 8007060:	415a      	adcs	r2, r3
 8007062:	602a      	str	r2, [r5, #0]
 8007064:	e7ee      	b.n	8007044 <__swhatbuf_r+0x1c>
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	2000      	movs	r0, #0
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	b016      	add	sp, #88	; 0x58
 800706e:	bd70      	pop	{r4, r5, r6, pc}

08007070 <__smakebuf_r>:
 8007070:	898b      	ldrh	r3, [r1, #12]
 8007072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007074:	079d      	lsls	r5, r3, #30
 8007076:	4606      	mov	r6, r0
 8007078:	460c      	mov	r4, r1
 800707a:	d507      	bpl.n	800708c <__smakebuf_r+0x1c>
 800707c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	2301      	movs	r3, #1
 8007086:	6163      	str	r3, [r4, #20]
 8007088:	b002      	add	sp, #8
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	ab01      	add	r3, sp, #4
 800708e:	466a      	mov	r2, sp
 8007090:	f7ff ffca 	bl	8007028 <__swhatbuf_r>
 8007094:	9900      	ldr	r1, [sp, #0]
 8007096:	4605      	mov	r5, r0
 8007098:	4630      	mov	r0, r6
 800709a:	f7ff f97f 	bl	800639c <_malloc_r>
 800709e:	b948      	cbnz	r0, 80070b4 <__smakebuf_r+0x44>
 80070a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a4:	059a      	lsls	r2, r3, #22
 80070a6:	d4ef      	bmi.n	8007088 <__smakebuf_r+0x18>
 80070a8:	f023 0303 	bic.w	r3, r3, #3
 80070ac:	f043 0302 	orr.w	r3, r3, #2
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	e7e3      	b.n	800707c <__smakebuf_r+0xc>
 80070b4:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <__smakebuf_r+0x7c>)
 80070b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	6020      	str	r0, [r4, #0]
 80070bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	9b00      	ldr	r3, [sp, #0]
 80070c4:	6163      	str	r3, [r4, #20]
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	6120      	str	r0, [r4, #16]
 80070ca:	b15b      	cbz	r3, 80070e4 <__smakebuf_r+0x74>
 80070cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d0:	4630      	mov	r0, r6
 80070d2:	f000 f8d1 	bl	8007278 <_isatty_r>
 80070d6:	b128      	cbz	r0, 80070e4 <__smakebuf_r+0x74>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	f023 0303 	bic.w	r3, r3, #3
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	89a0      	ldrh	r0, [r4, #12]
 80070e6:	4305      	orrs	r5, r0
 80070e8:	81a5      	strh	r5, [r4, #12]
 80070ea:	e7cd      	b.n	8007088 <__smakebuf_r+0x18>
 80070ec:	08006e81 	.word	0x08006e81

080070f0 <_malloc_usable_size_r>:
 80070f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f4:	1f18      	subs	r0, r3, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfbc      	itt	lt
 80070fa:	580b      	ldrlt	r3, [r1, r0]
 80070fc:	18c0      	addlt	r0, r0, r3
 80070fe:	4770      	bx	lr

08007100 <_raise_r>:
 8007100:	291f      	cmp	r1, #31
 8007102:	b538      	push	{r3, r4, r5, lr}
 8007104:	4604      	mov	r4, r0
 8007106:	460d      	mov	r5, r1
 8007108:	d904      	bls.n	8007114 <_raise_r+0x14>
 800710a:	2316      	movs	r3, #22
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	f04f 30ff 	mov.w	r0, #4294967295
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007116:	b112      	cbz	r2, 800711e <_raise_r+0x1e>
 8007118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800711c:	b94b      	cbnz	r3, 8007132 <_raise_r+0x32>
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f830 	bl	8007184 <_getpid_r>
 8007124:	462a      	mov	r2, r5
 8007126:	4601      	mov	r1, r0
 8007128:	4620      	mov	r0, r4
 800712a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800712e:	f000 b817 	b.w	8007160 <_kill_r>
 8007132:	2b01      	cmp	r3, #1
 8007134:	d00a      	beq.n	800714c <_raise_r+0x4c>
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	d103      	bne.n	8007142 <_raise_r+0x42>
 800713a:	2316      	movs	r3, #22
 800713c:	6003      	str	r3, [r0, #0]
 800713e:	2001      	movs	r0, #1
 8007140:	e7e7      	b.n	8007112 <_raise_r+0x12>
 8007142:	2400      	movs	r4, #0
 8007144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007148:	4628      	mov	r0, r5
 800714a:	4798      	blx	r3
 800714c:	2000      	movs	r0, #0
 800714e:	e7e0      	b.n	8007112 <_raise_r+0x12>

08007150 <raise>:
 8007150:	4b02      	ldr	r3, [pc, #8]	; (800715c <raise+0xc>)
 8007152:	4601      	mov	r1, r0
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f7ff bfd3 	b.w	8007100 <_raise_r>
 800715a:	bf00      	nop
 800715c:	20000004 	.word	0x20000004

08007160 <_kill_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d07      	ldr	r5, [pc, #28]	; (8007180 <_kill_r+0x20>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	f7fa fe51 	bl	8001e14 <_kill>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d102      	bne.n	800717c <_kill_r+0x1c>
 8007176:	682b      	ldr	r3, [r5, #0]
 8007178:	b103      	cbz	r3, 800717c <_kill_r+0x1c>
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	20000470 	.word	0x20000470

08007184 <_getpid_r>:
 8007184:	f7fa be3e 	b.w	8001e04 <_getpid>

08007188 <__sread>:
 8007188:	b510      	push	{r4, lr}
 800718a:	460c      	mov	r4, r1
 800718c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007190:	f000 f894 	bl	80072bc <_read_r>
 8007194:	2800      	cmp	r0, #0
 8007196:	bfab      	itete	ge
 8007198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800719a:	89a3      	ldrhlt	r3, [r4, #12]
 800719c:	181b      	addge	r3, r3, r0
 800719e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071a2:	bfac      	ite	ge
 80071a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071a6:	81a3      	strhlt	r3, [r4, #12]
 80071a8:	bd10      	pop	{r4, pc}

080071aa <__swrite>:
 80071aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ae:	461f      	mov	r7, r3
 80071b0:	898b      	ldrh	r3, [r1, #12]
 80071b2:	05db      	lsls	r3, r3, #23
 80071b4:	4605      	mov	r5, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	4616      	mov	r6, r2
 80071ba:	d505      	bpl.n	80071c8 <__swrite+0x1e>
 80071bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c0:	2302      	movs	r3, #2
 80071c2:	2200      	movs	r2, #0
 80071c4:	f000 f868 	bl	8007298 <_lseek_r>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	4632      	mov	r2, r6
 80071d6:	463b      	mov	r3, r7
 80071d8:	4628      	mov	r0, r5
 80071da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071de:	f000 b817 	b.w	8007210 <_write_r>

080071e2 <__sseek>:
 80071e2:	b510      	push	{r4, lr}
 80071e4:	460c      	mov	r4, r1
 80071e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ea:	f000 f855 	bl	8007298 <_lseek_r>
 80071ee:	1c43      	adds	r3, r0, #1
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	bf15      	itete	ne
 80071f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80071f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071fe:	81a3      	strheq	r3, [r4, #12]
 8007200:	bf18      	it	ne
 8007202:	81a3      	strhne	r3, [r4, #12]
 8007204:	bd10      	pop	{r4, pc}

08007206 <__sclose>:
 8007206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720a:	f000 b813 	b.w	8007234 <_close_r>
	...

08007210 <_write_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	; (8007230 <_write_r+0x20>)
 8007214:	4604      	mov	r4, r0
 8007216:	4608      	mov	r0, r1
 8007218:	4611      	mov	r1, r2
 800721a:	2200      	movs	r2, #0
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7fa fe2f 	bl	8001e82 <_write>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_write_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_write_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000470 	.word	0x20000470

08007234 <_close_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d06      	ldr	r5, [pc, #24]	; (8007250 <_close_r+0x1c>)
 8007238:	2300      	movs	r3, #0
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	602b      	str	r3, [r5, #0]
 8007240:	f7fa fe3b 	bl	8001eba <_close>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d102      	bne.n	800724e <_close_r+0x1a>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b103      	cbz	r3, 800724e <_close_r+0x1a>
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	20000470 	.word	0x20000470

08007254 <_fstat_r>:
 8007254:	b538      	push	{r3, r4, r5, lr}
 8007256:	4d07      	ldr	r5, [pc, #28]	; (8007274 <_fstat_r+0x20>)
 8007258:	2300      	movs	r3, #0
 800725a:	4604      	mov	r4, r0
 800725c:	4608      	mov	r0, r1
 800725e:	4611      	mov	r1, r2
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	f7fa fe36 	bl	8001ed2 <_fstat>
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	d102      	bne.n	8007270 <_fstat_r+0x1c>
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	b103      	cbz	r3, 8007270 <_fstat_r+0x1c>
 800726e:	6023      	str	r3, [r4, #0]
 8007270:	bd38      	pop	{r3, r4, r5, pc}
 8007272:	bf00      	nop
 8007274:	20000470 	.word	0x20000470

08007278 <_isatty_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d06      	ldr	r5, [pc, #24]	; (8007294 <_isatty_r+0x1c>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7fa fe35 	bl	8001ef2 <_isatty>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_isatty_r+0x1a>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_isatty_r+0x1a>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	20000470 	.word	0x20000470

08007298 <_lseek_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	; (80072b8 <_lseek_r+0x20>)
 800729c:	4604      	mov	r4, r0
 800729e:	4608      	mov	r0, r1
 80072a0:	4611      	mov	r1, r2
 80072a2:	2200      	movs	r2, #0
 80072a4:	602a      	str	r2, [r5, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f7fa fe2e 	bl	8001f08 <_lseek>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_lseek_r+0x1e>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_lseek_r+0x1e>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	20000470 	.word	0x20000470

080072bc <_read_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_read_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7fa fdbc 	bl	8001e48 <_read>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_read_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_read_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20000470 	.word	0x20000470

080072e0 <_init>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	bf00      	nop
 80072e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e6:	bc08      	pop	{r3}
 80072e8:	469e      	mov	lr, r3
 80072ea:	4770      	bx	lr

080072ec <_fini>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr
